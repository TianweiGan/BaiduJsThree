/**
 * 计算两个Vector2的坐标是否相同
 * @param {Vector2} v1 起点
 * @param {Vector2} v2 终点
 * @param {number} epsilon js计算偏差的误差值
 */
export function vector2EqualsEpsilon(v1: Vector2, v2: Vector2, epsilon?: number): boolean;
/**
 * 计算二维向量的法线，逆时针旋转90度
 * @param {Vector2} vec 二维向量
 */
export function computeNormal(vec: Vector2): any;
/**
 * 获取两向量夹角的向量
 * @param {Vector2} v1 起始向量
 * @param {Vector2} v2 结束向量
 */
export function computeMiter(v1: Vector2, v2: Vector2): any;
/**
 * 计算两个向量的顺时针旋转角度
 *
 * @param {Vector2} from - 第一个向量
 * @param {Vector2} to - 第二个向量
 * @returns {number} - 两个向量的旋转角度，0 ~ 2*PI
 */
export function vector2RotateTo(from: Vector2, to: Vector2): number;
/**
 * 将一个点绕指定中心按逆时针旋转给定角度。
 *
 * @param {THREE.Vector2} point - 要旋转的点。
 * @param {THREE.Vector2} pivot - 旋转的中心点。
 * @param {number} radian - 旋转弧度（以弧度为单位，逆时针为正）。
 * @returns {THREE.Vector2} - 旋转后的新点。
 */
export function rotatePoint(point: THREE.Vector2, pivot: THREE.Vector2, radian: number): THREE.Vector2;
export function isAOConcaveAngle(p2: any, p1: any, p3: any): boolean;
