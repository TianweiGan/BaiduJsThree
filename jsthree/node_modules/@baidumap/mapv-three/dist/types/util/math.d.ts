/**
 * 计算线坐标串是否首闭合
 * @param {Array<number>} linestring 线坐标串
 */
export function isClosed(linestring: Array<number>): boolean;
/**
 * 计算两点坐标是否相同
 * @param {Array<number>} p1 起点
 * @param {Array<number>} p2 终点
 * @param {number} threshold js计算偏差的误差值
 */
export function isPointEqual(p1: Array<number>, p2: Array<number>, threshold?: number): boolean;
/**
 * 计算两坐标点在三维空间中的距离
 * @param {Array<number>} p1 起点
 * @param {Array<number>} p2 终点
 */
export function getDistance(p1: Array<number>, p2: Array<number>): number;
/**
 * 计算两坐标点在XY平面投影的距离
 * @param {Array<number>} p1 起点
 * @param {Array<number>} p2 终点
 */
export function getXYDistance(p1: Array<number>, p2: Array<number>): number;
/**
 * 数字的线性差值
 * @param {number} v1 差值起点
 * @param {number} v2 差值终
 * @param {number} ratio 差值比例
 */
export function intepolateScalar(v1: number, v2: number, ratio: number): number;
/**
 * 二维数组的线性差值
 * @param {Array} v1 差值起点
 * @param {Array} v2 差值终
 * @param {number} ratio 差值比例
 */
export function intepolateArray2(v1: any[], v2: any[], ratio: number): any[];
/**
 * 三维数组的线性差值
 * @param {Array} v1 差值起点
 * @param {Array} v2 差值终
 * @param {number} ratio 差值比例
 */
export function intepolateArray3(v1: any[], v2: any[], ratio: number): any[];
/**
 * 计算二维坐标p1点到p2点的单位向量
 * @param {Array<number>} p1 起点
 * @param {Array<number>} p2 终点
 */
export function getDirection(p1: Array<number>, p2: Array<number>, result: any): any;
export function getDirection3(p1: any, p2: any, result: any): any;
export function segmentsIntr(a: any, b: any, c: any, d: any): false | {
    x: number;
    y: number;
};
export function getRadiusCenter3D(lineA: any, lineB: any, percent: any): {
    point: any;
    direction: any;
};
export function getRadiusCenter(lineA: any, lineB: any, percent: any): {
    point: number[] | undefined;
    center: boolean | {
        x: number;
        y: number;
    };
    interPointA: any[];
    interPointB: any[];
    direction: number[] | undefined;
};
/**
 * 判断是否为凹多边形
 * @vertexs 顶点数组
 */
export function isConcavePoly(vertexs: any): boolean;
export function arrayRemoveDuplicates(values: any, wrapAround: any, removedIndices: any): any;
