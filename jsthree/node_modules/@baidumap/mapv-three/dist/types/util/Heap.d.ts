export class Heap {
    constructor(options: any);
    _comparator: any;
    _array: any[];
    _length: number;
    _maximumLength: any;
    reserve(length: any): void;
    /**
     * Update the heap so that index and all descendants satisfy the heap property.
     *
     * @param {number} [index=0] The starting index to heapify from.
     */
    heapify(index?: number): void;
    /**
     * Resort the heap.
     */
    resort(): void;
    /**
     * Insert an element into the heap. If the length would grow greater than maximumLength
     * of the heap, extra elements are removed.
     *
     * @param {*} element The element to insert
     *
     * @return {*} The element that was removed from the heap if the heap is at full capacity.
     */
    insert(element: any): any;
    /**
     * Remove the element specified by index from the heap and return it.
     *
     * @param {number} [index=0] The index to remove.
     * @returns {*} The specified element of the heap.
     */
    pop(index?: number): any;
    get length(): number;
    get internalArray(): any[];
    set maximumLength(value: any);
    get maximumLength(): any;
    /**
     * 如果 comparator(a, b) 小于 0，则将 a 排序到比 b 前，否则将 a 排序到后
     */
    get comparator(): any;
}
