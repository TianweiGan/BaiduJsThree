/**
 * worker管理类
 * 适用于执行多次某个特定任务，每次任务的执行时间可能不同
 * 支持多个worker并行处理
 */
export class WorkerTaskScheduler {
    constructor(workerClass: any, size: any);
    /** @private */
    private _size;
    /** @private */
    private _workerClass;
    /** @private */
    private _workers;
    /** @private */
    private _currentRequestId;
    /** @private */
    private _requestMap;
    getRequestMessageId(message: any): number;
    getResponseMessageId(data: any, message: any): any;
    _getAvailableWorker(): any;
    /**
     * 初始化workers
     */
    initWorkers(): void;
    /**
     * 向所有可用工作者发送消息。
     *
     * @param {*} message 消息对象。
     * @param {Transferable[]} transferableData 可传递数据的数组。
     * @param {string} id 请求的唯一标识符，如果未提供则将根据消息生成一个。
     */
    postMessage(message: any, transferableData: Transferable[], id: string): Promise<any>;
    /**
     * hook
     * @param {*} messagedata
     * @param {*} message
     * @returns
     */
    /**
     * hook
     * @param {*} messagedata
     * @param {*} message
     * @returns
     */
    onMessageCompleted(messagedata: any, message: any): Promise<any>;
    isMessageCompleted(messagedata: any, message: any): boolean;
    _handleWorkerMessage: (message: any) => Promise<void>;
    /**
     * 将消息发送给所有工作线程。
     * @param message 要发送的消息。
     * @param transferableData 可传输的数据，用于传递给接收者。
     */
    postMessageToAll(message: any, transferableData: any): void;
    get size(): number;
}
