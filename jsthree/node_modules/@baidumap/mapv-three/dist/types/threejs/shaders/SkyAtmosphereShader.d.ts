export namespace SkyAtmosphereShader {
    export namespace uniforms {
        namespace altitude {
            let value: number;
        }
        namespace transmittanceTexture {
            let value_1: null;
            export { value_1 as value };
        }
        namespace transmittanceResolution {
            let value_2: number[];
            export { value_2 as value };
        }
        namespace scatteringTexture {
            let value_3: null;
            export { value_3 as value };
        }
        namespace scatteringResolution {
            let value_4: number[];
            export { value_4 as value };
        }
        namespace viewTexture {
            let value_5: null;
            export { value_5 as value };
        }
        namespace viewResolution {
            let value_6: number[];
            export { value_6 as value };
        }
        namespace cameraDirection {
            let value_7: any;
            export { value_7 as value };
        }
        namespace viewHeight {
            let value_8: number;
            export { value_8 as value };
        }
        namespace upDirection {
            let value_9: any;
            export { value_9 as value };
        }
        namespace tWeather {
            let value_10: null;
            export { value_10 as value };
        }
        namespace mixGrayFactor {
            let value_11: number;
            export { value_11 as value };
        }
        namespace isEmissive {
            let value_12: boolean;
            export { value_12 as value };
        }
        namespace uTime {
            let value_13: null;
            export { value_13 as value };
        }
        namespace uStarVisible {
            let value_14: boolean;
            export { value_14 as value };
        }
        namespace uMoonMap {
            let value_15: null;
            export { value_15 as value };
        }
        namespace isGlobe {
            let value_16: boolean;
            export { value_16 as value };
        }
    }
    export { mainVertShader as vertexShader };
    export let fragmentShader: string;
}
export namespace SkyAtmosphereTransmittanceShader {
    export namespace uniforms_1 {
        export namespace altitude_1 {
            let value_17: number;
            export { value_17 as value };
        }
        export { altitude_1 as altitude };
        export namespace viewHeight_1 {
            let value_18: number;
            export { value_18 as value };
        }
        export { viewHeight_1 as viewHeight };
    }
    export { uniforms_1 as uniforms };
    export { bufferVertexShader as vertexShader };
    let fragmentShader_1: string;
    export { fragmentShader_1 as fragmentShader };
}
export namespace SkyAtmosphereScatteringShader {
    export namespace uniforms_2 {
        export namespace altitude_2 {
            let value_19: number;
            export { value_19 as value };
        }
        export { altitude_2 as altitude };
        export namespace transmittanceTexture_1 {
            let value_20: null;
            export { value_20 as value };
        }
        export { transmittanceTexture_1 as transmittanceTexture };
        export namespace transmittanceResolution_1 {
            let value_21: number[];
            export { value_21 as value };
        }
        export { transmittanceResolution_1 as transmittanceResolution };
        export namespace viewHeight_2 {
            let value_22: number;
            export { value_22 as value };
        }
        export { viewHeight_2 as viewHeight };
    }
    export { uniforms_2 as uniforms };
    export { bufferVertexShader as vertexShader };
    let fragmentShader_2: string;
    export { fragmentShader_2 as fragmentShader };
}
export namespace SkyAtmosphereViewShader {
    export namespace uniforms_3 {
        export namespace altitude_3 {
            let value_23: number;
            export { value_23 as value };
        }
        export { altitude_3 as altitude };
        export namespace transmittanceTexture_2 {
            let value_24: null;
            export { value_24 as value };
        }
        export { transmittanceTexture_2 as transmittanceTexture };
        export namespace transmittanceResolution_2 {
            let value_25: number[];
            export { value_25 as value };
        }
        export { transmittanceResolution_2 as transmittanceResolution };
        export namespace scatteringTexture_1 {
            let value_26: null;
            export { value_26 as value };
        }
        export { scatteringTexture_1 as scatteringTexture };
        export namespace scatteringResolution_1 {
            let value_27: number[];
            export { value_27 as value };
        }
        export { scatteringResolution_1 as scatteringResolution };
        export namespace viewHeight_3 {
            let value_28: number;
            export { value_28 as value };
        }
        export { viewHeight_3 as viewHeight };
        export namespace mixGrayFactor_1 {
            let value_29: number;
            export { value_29 as value };
        }
        export { mixGrayFactor_1 as mixGrayFactor };
    }
    export { uniforms_3 as uniforms };
    export { bufferVertexShader as vertexShader };
    let fragmentShader_3: string;
    export { fragmentShader_3 as fragmentShader };
}
export namespace SkyAtmospherePostprocessingShader {
    export namespace uniforms_4 {
        export namespace tDiffuse {
            let value_30: null;
            export { value_30 as value };
        }
        export namespace tDepth {
            let value_31: null;
            export { value_31 as value };
        }
        export namespace tNormal {
            let value_32: null;
            export { value_32 as value };
        }
        export namespace tAtmosphere {
            let value_33: null;
            export { value_33 as value };
        }
        export namespace cameraNear {
            let value_34: number;
            export { value_34 as value };
        }
        export namespace cameraFar {
            let value_35: number;
            export { value_35 as value };
        }
        export namespace projectionInverseMatrix {
            let value_36: any;
            export { value_36 as value };
        }
        export namespace viewInverseMatrix {
            let value_37: any;
            export { value_37 as value };
        }
        export namespace mvt_viewMatrix {
            let value_38: any;
            export { value_38 as value };
        }
        export namespace cameraPosition {
            let value_39: any;
            export { value_39 as value };
        }
        export namespace altitude_4 {
            let value_40: number;
            export { value_40 as value };
        }
        export { altitude_4 as altitude };
        export namespace viewHeight_4 {
            let value_41: number;
            export { value_41 as value };
        }
        export { viewHeight_4 as viewHeight };
        export namespace transmittanceTexture_3 {
            let value_42: null;
            export { value_42 as value };
        }
        export { transmittanceTexture_3 as transmittanceTexture };
        export namespace transmittanceResolution_3 {
            let value_43: number[];
            export { value_43 as value };
        }
        export { transmittanceResolution_3 as transmittanceResolution };
        export namespace scatteringTexture_2 {
            let value_44: null;
            export { value_44 as value };
        }
        export { scatteringTexture_2 as scatteringTexture };
        export namespace scatteringResolution_2 {
            let value_45: number[];
            export { value_45 as value };
        }
        export { scatteringResolution_2 as scatteringResolution };
        export namespace viewTexture_1 {
            let value_46: null;
            export { value_46 as value };
        }
        export { viewTexture_1 as viewTexture };
        export namespace viewResolution_1 {
            let value_47: number[];
            export { value_47 as value };
        }
        export { viewResolution_1 as viewResolution };
        export namespace resolution {
            let value_48: number[];
            export { value_48 as value };
        }
        export namespace cameraDirection_1 {
            let value_49: any;
            export { value_49 as value };
        }
        export { cameraDirection_1 as cameraDirection };
        export namespace sunDirection {
            let value_50: any;
            export { value_50 as value };
        }
        export namespace upDirection_1 {
            let value_51: any;
            export { value_51 as value };
        }
        export { upDirection_1 as upDirection };
        export namespace isGlobe_1 {
            let value_52: boolean;
            export { value_52 as value };
        }
        export { isGlobe_1 as isGlobe };
        export namespace fogDepthRange {
            let value_53: any;
            export { value_53 as value };
        }
        export namespace rotationMatrix {
            let value_54: any;
            export { value_54 as value };
        }
    }
    export { uniforms_4 as uniforms };
    let fragmentShader_4: string;
    export { fragmentShader_4 as fragmentShader };
}
export namespace SkyAtmosphereGradientShader {
    export namespace uniforms_5 {
        export namespace tDiffuse_1 {
            let value_55: null;
            export { value_55 as value };
        }
        export { tDiffuse_1 as tDiffuse };
        export namespace tDepth_1 {
            let value_56: null;
            export { value_56 as value };
        }
        export { tDepth_1 as tDepth };
        export namespace cameraNear_1 {
            let value_57: number;
            export { value_57 as value };
        }
        export { cameraNear_1 as cameraNear };
        export namespace cameraFar_1 {
            let value_58: number;
            export { value_58 as value };
        }
        export { cameraFar_1 as cameraFar };
        export namespace viewInverseMatrix_1 {
            let value_59: any;
            export { value_59 as value };
        }
        export { viewInverseMatrix_1 as viewInverseMatrix };
        export namespace cameraPosition_1 {
            let value_60: any;
            export { value_60 as value };
        }
        export { cameraPosition_1 as cameraPosition };
        export namespace viewHeight_5 {
            let value_61: number;
            export { value_61 as value };
        }
        export { viewHeight_5 as viewHeight };
        export namespace resolution_1 {
            let value_62: number[];
            export { value_62 as value };
        }
        export { resolution_1 as resolution };
        export namespace cameraDirection_2 {
            let value_63: any;
            export { value_63 as value };
        }
        export { cameraDirection_2 as cameraDirection };
        export namespace sunDirection_1 {
            let value_64: any;
            export { value_64 as value };
        }
        export { sunDirection_1 as sunDirection };
        export namespace isGlobe_2 {
            let value_65: boolean;
            export { value_65 as value };
        }
        export { isGlobe_2 as isGlobe };
        export namespace fogDepthRange_1 {
            let value_66: any;
            export { value_66 as value };
        }
        export { fogDepthRange_1 as fogDepthRange };
        export namespace rotationMatrix_1 {
            let value_67: any;
            export { value_67 as value };
        }
        export { rotationMatrix_1 as rotationMatrix };
        export namespace projectionInverseMatrix_1 {
            let value_68: any;
            export { value_68 as value };
        }
        export { projectionInverseMatrix_1 as projectionInverseMatrix };
        export namespace color {
            let value_69: any;
            export { value_69 as value };
        }
        export namespace highColor {
            let value_70: any;
            export { value_70 as value };
        }
    }
    export { uniforms_5 as uniforms };
    let fragmentShader_5: string;
    export { fragmentShader_5 as fragmentShader };
}
