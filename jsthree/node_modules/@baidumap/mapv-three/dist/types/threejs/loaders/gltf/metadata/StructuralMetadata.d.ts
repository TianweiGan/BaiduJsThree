export default StructuralMetadata;
/**
 * An object containing structural metadata.
 * <p>
 * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the
 * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.
 * </p>
 *
 * @param {object} options Object with the following properties:
 * @param {MetadataSchema} options.schema The parsed schema.
 * @param {PropertyTable[]} [options.propertyTables] An array of property table objects.
 * For the legacy <code>EXT_feature_metadata</code> extension,
 * this is sorted by the key in the propertyTables dictionary
 * @param {PropertyTexture[]} [options.propertyTextures] An array of property texture objects.
 * For the legacy <code>EXT_feature_metadata</code> extension,
 * this is sorted by the key in the propertyTextures dictionary
 * @param {PropertyAttribute[]} [options.propertyAttributes] An array of property attribute objects.
 * This is new in <code>EXT_structural_metadata</code>
 * @param {object} [options.statistics] Statistics about metadata
 * @param {object} [options.extras] Extra user-defined properties
 * @param {object} [options.extensions] An object containing extensions
 *
 * @alias StructuralMetadata
 * @constructor
 *
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final
 * and is subject to change without Cesium's standard deprecation policy.
 */
declare class StructuralMetadata {
    constructor(options: any);
    _schema: any;
    _propertyTableCount: any;
    _propertyTables: any;
    _propertyTextures: any;
    _propertyAttributes: any;
    _statistics: any;
    _extras: any;
    _extensions: any;
    /**
   * Schema containing classes and enums.
   *
   * @memberof StructuralMetadata.prototype
   * @type {MetadataSchema}
   * @readonly
   * @private
   */
    private readonly get schema();
    /**
   * Statistics about the metadata.
   * <p>
   * See the {@link https://github.com/CesiumGS/glTF/blob/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata/schema/statistics.schema.json|statistics schema reference} for the full set of properties.
   * </p>
   *
   * @memberof StructuralMetadata.prototype
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get statistics();
    /**
   * Extra user-defined properties.
   *
   * @memberof StructuralMetadata.prototype
   * @type {*}
   * @readonly
   * @private
   */
    private readonly get extras();
    /**
   * An object containing extensions.
   *
   * @memberof StructuralMetadata.prototype
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get extensions();
    /**
   * Number of property tables in the metadata.
   *
   * @memberof StructuralMetadata.prototype
   * @type {number}
   * @readonly
   * @private
   */
    private readonly get propertyTableCount();
    /**
   * The property tables in the metadata.
   *
   * @memberof StructuralMetadata.prototype
   * @type {PropertyTable[]}
   * @readonly
   * @private
   */
    private readonly get propertyTables();
    /**
   * The property textures in the metadata.
   *
   * @memberof StructuralMetadata.prototype
   * @type {PropertyTexture[]}
   * @readonly
   * @private
   */
    private readonly get propertyTextures();
    /**
   * The property attributes from the structural metadata extension
   *
   * @memberof StructuralMetadata.prototype
   * @type {PropertyAttribute[]}
   * @readonly
   * @private
   */
    private readonly get propertyAttributes();
    /**
   * Total size in bytes across all property tables
   *
   * @memberof StructuralMetadata.prototype
   * @type {number}
   * @readonly
   * @private
   */
    private readonly get propertyTablesByteLength();
    /**
   * Gets the property table with the given ID.
   * <p>
   * For the legacy <code>EXT_feature_metadata</code>, textures are stored in an array sorted
   * by the key in the propertyTables dictionary.
   * </p>
   *
   * @param {number} propertyTableId The property table ID.
   * @returns {PropertyTable} The property table.
   * @private
   */
    private getPropertyTable;
    /**
   * Gets the property texture with the given ID.
   * <p>
   * For the legacy <code>EXT_feature_metadata</code>, textures are stored in an array sorted
   * by the key in the propertyTextures dictionary.
   * </p>
   *
   * @param {number} propertyTextureId The index into the property textures array.
   * @returns {PropertyTexture} The property texture
   * @private
   */
    private getPropertyTexture;
    /**
   * Gets the property attribute with the given ID. This concept is new in
   * EXT_structural_metadata
   *
   * @param {number} propertyAttributeId The index into the property attributes array.
   * @returns {PropertyAttribute} The property attribute
   * @private
   */
    private getPropertyAttribute;
    dispose(): void;
}
