export default JsonMetadataTable;
declare class JsonMetadataTable {
    /**
   * @param {object} options Object with the following properties:
   * @param {number} options.count The number of entities in the table.
   * @param {Object<string, Array>} options.properties The JSON representation
   * of the metadata table. All the arrays must have exactly options.count elements.
   */
    constructor(options: {
        count: number;
        properties: {
            [x: string]: any[];
        };
    });
    _count: number;
    _properties: any;
    /**
   * Returns whether the table has this property.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {boolean} Whether the table has this property.
   * @private
   */
    private hasProperty;
    /**
   * Returns an array of property IDs.
   *
   * @param {string[]} [results] An array into which to store the results.
   * @returns {string[]} The property IDs.
   * @private
   */
    private getPropertyIds;
    /**
   * Returns a copy of the value of the property with the given ID.
   *
   * @param {number} index The index of the entity.
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the entity does not have this property.
   *
   * @exception {DeveloperError} index is out of bounds
   * @private
   */
    private getProperty;
    /**
   * Sets the value of the property with the given ID. If the property did not
   * exist, it will be created.
   *
   * @param {number} index The index of the entity.
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {*} value The value of the property that will be copied.
   *
   * @exception {DeveloperError} index is out of bounds
   * @private
   */
    private setProperty;
}
