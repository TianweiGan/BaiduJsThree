export default PropertyAttribute;
/**
 * A property attribute; a collection of per-point properties stored as custom
 * vertex attributes.
 * <p>
 * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension}
 * </p>
 *
 * @param {object} options Object with the following properties:
 * @param {string} [options.name] Optional human-readable name to describe the attribute
 * @param {number} [options.id] A unique id to identify the property attribute,
 * useful for debugging. This is the array index in the property attributes array
 * @param {object} options.propertyAttribute The property attribute JSON, following the EXT_structural_metadata schema.
 * @param {MetadataClass} options.class The class that properties conform to.
 *
 * @alias PropertyAttribute
 * @constructor
 *
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final
 * and is subject to change without Cesium's standard deprecation policy.
 */
declare class PropertyAttribute {
    constructor(options: any);
    _name: any;
    _id: any;
    _class: any;
    _properties: {};
    _extras: any;
    _extensions: any;
    /**
   * A human-readable name for this attribute
   *
   * @memberof PropertyAttribute.prototype
   *
   * @type {string}
   * @readonly
   * @private
   */
    private readonly get name();
    /**
   * An identifier for this attribute. Useful for debugging.
   *
   * @memberof PropertyAttribute.prototype
   *
   * @type {string|number}
   * @readonly
   * @private
   */
    private readonly get id();
    /**
   * The class that properties conform to.
   *
   * @memberof PropertyAttribute.prototype
   *
   * @type {MetadataClass}
   * @readonly
   * @private
   */
    private readonly get class();
    /**
   * The properties in this property attribute.
   *
   * @memberof PropertyAttribute.prototype
   *
   * @type {Object<string, PropertyAttributeProperty>}
   * @readonly
   * @private
   */
    private readonly get properties();
    /**
   * Extra user-defined properties.
   *
   * @memberof PropertyAttribute.prototype
   *
   * @type {*}
   * @readonly
   * @private
   */
    private readonly get extras();
    /**
   * An object containing extensions.
   *
   * @memberof PropertyAttribute.prototype
   *
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get extensions();
    /**
   * Gets the property with the given property ID.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {PropertyAttributeProperty|undefined} The property,
   * or <code>undefined</code> if the property does not exist.
   * @private
   */
    private getProperty;
}
