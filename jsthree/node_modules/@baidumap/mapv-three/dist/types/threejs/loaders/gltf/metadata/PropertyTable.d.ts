export default PropertyTable;
/**
 * A property table for use with the <code>EXT_structural_metadata</code> extension or
 * legacy <code>EXT_feature_metadata</code> glTF extension. It also includes some
 * options to be compatible with the 3D Tiles 1.0 batch table.
 * <p>
 * For batch tables, properties are resolved in the following order:
 * </p>
 * <ol>
 *   <li>binary properties from options.metadataTable</li>
 *   <li>JSON properties from options.jsonMetadataTable</li>
 *   <li>batch table hierarchy properties from options.batchTableHierarchy</li>
 * </ol>
 * <p>
 * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the
 * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.
 * </p>
 */
declare class PropertyTable {
    constructor(options?: any);
    _name: any;
    _id: any;
    _count: any;
    _extras: any;
    _extensions: any;
    _metadataTable: any;
    _jsonMetadataTable: any;
    _batchTableHierarchy: any;
    /**
     * A human-readable name for this table.
     *
     * @type {string}
     * @readonly
     * @private
     */
    private readonly get name();
    /**
     * An identifier for this table. Useful for debugging.
     *
     * @type {string|number}
     * @readonly
     * @private
     */
    private readonly get id();
    /**
     * The number of features in the table.
     *
     * @type {number}
     * @readonly
     * @private
     */
    private readonly get count();
    /**
     * The class that properties conform to.
     *
     * @type {MetadataClass}
     * @readonly
     */
    readonly get class(): MetadataClass;
    /**
     * Extra user-defined properties.
     *
     * @type {*}
     * @readonly
     * @private
     */
    private readonly get extras();
    /**
     * An object containing extensions.
     *
     * @type {object}
     * @readonly
     * @private
     */
    private readonly get extensions();
    /**
     * Get the total amount of binary metadata stored in memory. This does not include JSON metadata.
     *
     * @type {number}
     * @readonly
     * @private
     */
    private readonly get byteLength();
    /**
     * Returns whether the feature has this property.For compatibility with the
     * <code>3DTILES_batch_table_hierarchy</code> extension,this is computed for a specific feature.
     *
     * @param {number} index The index of the feature.
     * @param {string} propertyId The case-sensitive ID of the property.
     * @returns {boolean} Whether the feature has this property.
     * @private
     */
    private hasProperty;
    /**
     * Returns whether the feature has a property with the given semantic.
     *
     * @param {number} index The index of the feature.
     * @param {string} semantic The case-sensitive semantic of the property.
     * @returns {boolean} Whether the feature has a property with the given semantic.
     * @private
     */
    private hasPropertyBySemantic;
    /**
     * Returns whether any feature has this property.This is mainly useful for checking whether a property exists
     * in the class hierarchy when using the <code>3DTILES_batch_table_hierarchy</code> extension.
     *
     * @param {string} propertyId The case-sensitive ID of the property.
     * @returns {boolean} Whether any feature has this property.
     * @private
     */
    private propertyExists;
    /**
     * Returns whether any feature has a property with the given semantic.
     *
     * @param {string} semantic The case-sensitive semantic of the property.
     * @returns {boolean} Whether any feature has a property with the given semantic.
     * @private
     */
    private propertyExistsBySemantic;
    /**
     * Returns an array of property IDs.For compatibility with the <code>3DTILES_batch_table_hierarchy</code> extension,
     * this is computed for a specific feature.
     *
     * @param {number} index The index of the feature.
     * @param {string[]} [results] An array into which to store the results.
     * @returns {string[]} The property IDs.
     * @private
     */
    private getPropertyIds;
    /**
     * Returns a copy of the value of the property with the given ID.
     * If the property is normalized the normalized value is returned.
     *
     * @param {number} index The index of the feature.
     * @param {string} propertyId The case-sensitive ID of the property.
     * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this property.
     * @private
     */
    private getProperty;
    /**
     * Sets the value of the property with the given ID.If the property did not exist,
     * it will be created as a JSON metadata property.
     * If the property is normalized a normalized value must be provided to this function.
     *
     * @param {number} index The index of the feature.
     * @param {string} propertyId The case-sensitive ID of the property.
     * @param {*} value The value of the property that will be copied.
     * @private
     */
    private setProperty;
    /**
     * Returns a copy of the value of the property with the given semantic.
     * This only operates on the underlying {@link MetadataTable} (if present)
     * as {@link JsonMetadataTable} and {@link BatchTableHierarchy} do not have semantics.
     *
     * @param {number} index The index of the feature.
     * @param {string} semantic The case-sensitive semantic of the property.
     * @returns {*} The value of the property or <code>undefined</code> if the feature does not have this semantic.
     * @private
     */
    private getPropertyBySemantic;
    /**
     * Sets the value of the property with the given semantic.
     * This only operates on the underlying {@link MetadataTable} (if present)
     * as {@link JsonMetadataTable} and {@link BatchTableHierarchy} do not have semantics.
     *
     * @param {number} index The index of the feature.
     * @param {string} semantic The case-sensitive semantic of the property.
     * @param {*} value The value of the property that will be copied.
     * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
     * @private
     */
    private setPropertyBySemantic;
    /**
     * Returns a typed array containing the property values for a given propertyId.
     * This only operates on the underlying {@link MetadataTable}
     * (if present) as {@link JsonMetadataTable} and {@link BatchTableHierarchy} do not store values in typed arrays.
     *
     * @param {string} propertyId The case-sensitive ID of the property.
     * @returns {*} The typed array containing the property
     * values or <code>undefined</code> if the property values are not stored in a typed array.
     * @private
     */
    private getPropertyTypedArray;
    /**
     * Returns a typed array containing the property values for the property with the given semantic.
     * This only operates on the underlying {@link MetadataTable}
     * (if present) as {@link JsonMetadataTable} and {@link BatchTableHierarchy} do not have semantics.
     *
     * @param {string} semantic The case-sensitive semantic of the property.
     * @returns {*} The typed array containing the property values or <code>undefined</code>
     * if the property values are not stored in a typed array.
     * @private
     */
    private getPropertyTypedArrayBySemantic;
    /**
     * Returns whether the feature is of the given class.
     *
     * @param {number} featureId The index of the feature.
     * @param {string} className The class name to check.
     * @returns {boolean} Whether the feature is of the given class.
     */
    isClass(featureId: number, className: string): boolean;
    /**
     * Returns whether the feature is exactly of the given class.
     *
     * @param {number} featureId The index of the feature.
     * @param {string} className The class name to check.
     * @returns {boolean} Whether the feature is exactly of the given class.
     */
    isExactClass(featureId: number, className: string): boolean;
    /**
     * Returns the exact class name of the feature.
     *
     * @param {number} featureId The index of the feature.
     * @returns {string|undefined} The exact class name of the feature.
     */
    getExactClassName(featureId: number): string | undefined;
}
