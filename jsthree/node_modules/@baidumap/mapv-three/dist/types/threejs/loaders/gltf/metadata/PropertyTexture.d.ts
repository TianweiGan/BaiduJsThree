export default PropertyTexture;
/**
 * A property texture.
 * <p>
 * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} as well as the
 * previous {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata|EXT_feature_metadata Extension} for glTF.
 * </p>
 *
 * @param {object} options Object with the following properties:
 * @param {string} [options.name] Optional human-readable name to describe the texture
 * @param {string|number} [options.id] A unique id to identify the property texture
 * useful for debugging.For <code>EXT_structural_metadata</code>,this is the array index in the property textures array,
 * for <code>EXT_feature_metadata</code> this is the dictionary key in the property textures dictionary.
 * @param {object} options.propertyTexture The property texture JSON, following the EXT_structural_metadata schema.
 * @param {MetadataClass} options.class The class that properties conform to.
 * @param {Object<string, Texture>} options.textures An object mapping texture IDs to {@link Texture} objects.
 *
 * @alias PropertyTexture
 * @constructor
 *
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change
 * without Cesium's standard deprecation policy.
 */
declare class PropertyTexture {
    constructor(options: any);
    _name: any;
    _id: any;
    _class: any;
    _properties: {};
    _extras: any;
    _extensions: any;
    /**
   * A human-readable name for this texture
   *
   * @memberof PropertyTexture.prototype
   * @type {string}
   * @readonly
   * @private
   */
    private readonly get name();
    /**
   * An identifier for this texture. Useful for debugging.
   *
   * @memberof PropertyTexture.prototype
   * @type {string|number}
   * @readonly
   * @private
   */
    private readonly get id();
    /**
   * The class that properties conform to.
   *
   * @memberof PropertyTexture.prototype
   * @type {MetadataClass}
   * @readonly
   * @private
   */
    private readonly get class();
    /**
   * The properties in this property texture.
   *
   * @memberof PropertyTexture.prototype
   * @type {PropertyTextureProperty}
   * @readonly
   * @private
   */
    private readonly get properties();
    /**
   * Extra user-defined properties.
   *
   * @memberof PropertyTexture.prototype
   * @type {*}
   * @readonly
   * @private
   */
    private readonly get extras();
    /**
   * An object containing extensions.
   *
   * @memberof PropertyTexture.prototype
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get extensions();
    /**
   * Gets the property with the given property ID.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {PropertyTextureProperty|undefined} The property, or <code>undefined</code>
   * if the property does not exist.
   * @private
   */
    private getProperty;
}
