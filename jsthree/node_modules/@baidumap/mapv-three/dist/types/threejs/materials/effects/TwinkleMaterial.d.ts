/**
 * 闪烁特效动画材质，可以通过设置effectType属性，实现方块闪烁效果和波纹闪烁效果
 * @example 方块闪烁特效动画材质
 * ```
 * var material = new mapvthree.TwinkleMaterial({
 *      mapSrc: 'website_assets/floor/texture.png',
 *      color: new THREE.Color('#fff'),
 *      opacity: 0.5,
 *      size: [50, 20],
 *      speed: 1,
 *      effectType: mapvthree.TwinkleMaterial.TYPE_BLINK,
 *      emissive: new THREE.Color(0x001155),
 * });
 * ```
 * @example 波纹闪烁特效动画材质
 * ```
 * var material = new mapvthree.TwinkleMaterial({
 *      mapSrc: 'website_assets/floor/texture.png',
 *      color: new THREE.Color('#fff'),
 *      opacity: 0.5,
 *      size: [50, 20],
 *      spreadSize: 1,
 *      spreadColor: new THREE.Color('#fff'),
 *      speed: 1,
 *      effectType: mapvthree.TwinkleMaterial.TYPE_RIPPLE,
 *      emissive: new THREE.Color(0x001155),
 * });
 * ```
 */
export class TwinkleMaterial extends EffectCommonMaterial {
    static TYPE_BLINK: number;
    static TYPE_RIPPLE: number;
    /**
     * 构造函数
     * @param {{
    * speed?: number, size?: Array<number>,
    * color?: string | number | THREE.Color, opacity?: number, emissive?: string | number | THREE.Color,
    * mapSrc?: string, spreadColor?: string | number | THREE.Color, spreadSize?: number
    * }} parameters 材质参数，所有被Material类及其子类接受的参数。
    * @param {number} parameters.effectType 闪烁动画类型，可选值有`TwinkleMaterial.TYPE_BLINK`和`TwinkleMaterial.TYPE_RIPPLE`
    * @param {number} parameters.speed 闪烁动画速度，默认值为1
    * @param {Array<number>} parameters.size 整体效果尺寸大小，默认值为[1, 1]，单位为米
    * @param {string | number | THREE.Color} parameters.color 动画效果颜色，默认值为0xffffff
    * @param {number} parameters.opacity 整体效果透明度，默认值为1
    * @param {string | number | THREE.Color} parameters.emissive 自发光颜色，默认值为0x000000，即不发光
    * @param {string} parameters.mapSrc 打底纹理的图片地址，如果不设置则没有纹理打底
    * @param {string | number | THREE.Color} parameters.spreadColor 仅当`effectType`为`TwinkleMaterial.TYPE_RIPPLE`时有效，表示波纹的颜色，默认值为0xffffff
    * @param {number} parameters.spreadSize 仅当`effectType`为`TwinkleMaterial.TYPE_RIPPLE`时有效，表示波纹的扩散大小，默认值为1
    */
    constructor(parameters: {
        speed?: number;
        size?: Array<number>;
        color?: string | number | THREE.Color;
        opacity?: number;
        emissive?: string | number | THREE.Color;
        mapSrc?: string;
        spreadColor?: string | number | THREE.Color;
        spreadSize?: number;
    });
    name: string;
    transparent: boolean;
    fragmentShader: any;
    vertexShader: any;
}
import { EffectCommonMaterial } from './EffectCommonMaterial';
