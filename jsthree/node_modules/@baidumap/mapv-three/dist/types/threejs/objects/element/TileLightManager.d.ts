/**
 * 瓦片红绿灯管理者，有两种数据更新模式
 * 1. _periodUpdate: false 循环刷新（数据符合条件）
 * 2. _periodUpdate: true 定时刷新，周期时间到了就重新请求
 */
export class TileLightManager {
    constructor(api: any, params?: {});
    maxRange: number;
    /** @private */
    private _maxCount;
    /** @private */
    private _tileSize;
    /** @private */
    private _range;
    /** @private */
    private _queueCollection;
    /** @private */
    private _pendingSet;
    /** @private */
    private _currentTiles;
    /** @private */
    private _maxShowLevel;
    /** @private */
    private _api;
    /** @private */
    private _height;
    /** @private */
    private _lampConfig;
    /** @private */
    private _periodUpdate;
    /** @private */
    private _autoHide;
    /** @private */
    private _debounceTime;
    /** @private */
    private _showLight;
    type: string;
    afterAddToEngine(engine: any): void;
    engine: any;
    onBeforeScenePrepareRender(engine: any, scene: any, camera: any, renderState: any): void;
    _timeOutId: number | undefined;
    _updateTiles(engine: any, camera: any, zoom: any): void;
    _searchLight(engine: any, camera: any): {
        list: any;
        visibleList: any;
    };
    _updateCurrentTiles(list: any): void;
    _render(): void;
    _fetchLight(list: any): void;
    _renderWithTable(tileKey: any, lampGroup: any, time: any): void;
    _renderWithStatus(id: any, lampGroup: any): void;
    _checkIsExpired(key: any, time: any): any;
    _updateLightVisible(visible: any): void;
    set visible(visible: boolean);
    get visible(): boolean;
}
export class LampRequest {
    fetchLamps(params: any): Promise<{}>;
}
export class DefaultLampRequest extends LampRequest {
    constructor(requestConfig?: {});
    path: string;
    /** @private */
    private _requestConfig;
    fetchLamps(params: any): Promise<any>;
}
