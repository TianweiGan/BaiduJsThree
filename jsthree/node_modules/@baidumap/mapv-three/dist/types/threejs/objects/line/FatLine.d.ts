/**
 * 用于绘制具有宽度的线条。支持多种线型样式、动画效果和纹理贴图。
 * 相比{@link SimpleLine}，FatLine 提供了更丰富的渲染特性：
 * - 可自定义线宽
 * - 支持多种拐角和端点样式
 * - 支持虚线渲染
 * - 支持动画效果
 * - 支持纹理贴图
 *
 * @category Objects
 * @example
 * ```javascript
 * // 创建一个基础宽线
 * const line = engine.add(new mapvthree.FatLine({
 *     lineWidth: 4,
 *     color: '#ff0000',
 *     keepSize: true
 * }));
 *
 * // 创建一个带动画效果的虚线
 * const animatedLine = engine.add(new mapvthree.FatLine({
 *     lineWidth: 6,
 *     color: '#00ff00',
 *     dashed: true,
 *     enableAnimation: true,
 *     animationSpeed: 1,
 *     animationTailType: 1,
 *     animationTailRatio: 0.3,
 *     keepSize: true
 * }));
 *
 * // 设置数据源
 * let data = mapvthree.GeoJSONDataSource.fromGeoJSON(lineData);
 * line.dataSource = data;
 * animatedLine.dataSource = data;
 * ```
 */
export class FatLine extends GeoMesh {
    /**
     * 创建宽线渲染对象
     * @param {Object} parameters 配置参数
     * @param {number} [parameters.lineWidth=4] 线宽
     * @param {number} [parameters.height] 线的高度
     * @param {boolean} [parameters.keepSize=true] 是否保持像素宽度
     * @param {string} [parameters.color] 线条颜色
     * @param {boolean} [parameters.vertexColors] 是否启用顶点颜色
     * @param {string} [parameters.mapSrc] 纹理贴图路径
     * @param {number} [parameters.mapGap=50] 纹理贴图间隔(相对于线宽的倍数)
     * @param {number} [parameters.opacity=1] 透明度
     * @param {number} [parameters.alphaTest=0] 开启透明剔除，透明度小于该值的部分都不渲染，默认为0
     * @param {boolean} [parameters.dashed] 是否启用虚线
     * @param {number} [parameters.dashArray] 虚线段长度
     * @param {number} [parameters.dashOffset] 虚线偏移量
     * @param {number} [parameters.dashRatio] 实心部分占每段长度的占比
     * @param {boolean} [parameters.enableAnimation] 是否启用动画
     * @param {boolean} [parameters.enableAnimationChaos] 是否开启不规则动画
     * @param {number} [parameters.animationInterval] 动画重复间隔比例, 值越大，重复之间的间隔越大，0表示不重复
     * @param {number} [parameters.animationSpeed] 动画速度
     * @param {1|2} [parameters.animationTailType] 动画尾迹类型(1:比例长度 2:固定长度), 1按线长度比例，需设置`animationTailRatio`属性，2按固定长度，需设置`animationTailLength`属性
     * @param {number} [parameters.animationTailRatio] 动画尾迹长度比例
     * @param {number} [parameters.animationTailLength] 动画尾迹固定长度
     * @param {number} [parameters.animationIdle] 动画空闲时间(毫秒)
     * @param {boolean} [parameters.transparent] 是否启用透明
     * @param {boolean} [parameters.antialias] 是否启用抗锯齿
     */
    constructor(parameters: {
        lineWidth?: number | undefined;
        height?: number | undefined;
        keepSize?: boolean | undefined;
        color?: string | undefined;
        vertexColors?: boolean | undefined;
        mapSrc?: string | undefined;
        mapGap?: number | undefined;
        opacity?: number | undefined;
        alphaTest?: number | undefined;
        dashed?: boolean | undefined;
        dashArray?: number | undefined;
        dashOffset?: number | undefined;
        dashRatio?: number | undefined;
        enableAnimation?: boolean | undefined;
        enableAnimationChaos?: boolean | undefined;
        animationInterval?: number | undefined;
        animationSpeed?: number | undefined;
        animationTailType?: 1 | 2 | undefined;
        animationTailRatio?: number | undefined;
        animationTailLength?: number | undefined;
        animationIdle?: number | undefined;
        transparent?: boolean | undefined;
        antialias?: boolean | undefined;
    });
    isEventEntitySupported: boolean;
    /** @private */
    private _resolution;
    /** @protected */ protected geometry: any;
    /** @protected */ protected material: any;
    /**
     * @internal
     * 线拐角的形状
     * @type {'miter'|'bevel'|'round'}
     */
    lineJoin: "miter" | "bevel" | "round";
    /**
     * @internal
     * 线端点的形状
     * @type {'butt'|'square'|'round'}
     */
    lineCap: "butt" | "square" | "round";
    /**
     * @internal
     * 拐角如果是miter，则超过该长度自动变平角
     * @type {number}
     */
    miterLimit: number;
    /**
     * 是否保持像素宽度
     * @type {boolean}
     */
    keepSize: boolean;
    /**
     * 线条颜色, 默认为#00ffff
     * @type {string}
     */
    color: string;
    /**
     * @internal
     * 是否启用顶点颜色
     * @type {boolean}
     */
    vertexColors: boolean;
    /**
     * 纹理贴图路径
     * @type {string}
     */
    mapSrc: string;
    /**
     * 透明度, 默认为1
     * @type {number}
     */
    opacity: number;
    /**
     * 开启透明剔除，透明度小于该值的部分都不渲染，默认为0
     * @type {number}
     */
    alphaTest: number;
    /**
     * 是否启用虚线, 默认为false
     * @type {boolean}
     */
    dashed: boolean;
    /**
     * 虚线段长度(实线和虚线部分总长度), 默认为20
     * @type {number}
     */
    dashArray: number;
    /**
     * 虚线偏移量, 默认值为0
     * @type {number}
     */
    dashOffset: number;
    /**
     * 虚线实线部分比例, 默认值为0
     * @type {number}
     */
    dashRatio: number;
    /**
     * 是否启用动画, 默认为false
     * @type {boolean}
     */
    enableAnimation: boolean;
    /**
     * 是否开启不规则动画, 默认为false
     * @type {boolean}
     */
    enableAnimationChaos: boolean;
    /**
     * 动画速度, 默认值为1
     * @type {number}
     */
    animationSpeed: number;
    /**
     * 动画尾迹类型, 1按线长度比例，2按固定长度
     * @type {1|2}
     */
    animationTailType: 1 | 2;
    /**
     * 动画尾迹长度比例(尾迹长度占整条线的长度比例), 默认值为0.2
     * @type {number}
     */
    animationTailRatio: number;
    /**
     * 动画尾迹固定长度, 默认值为100
     * @type {number}
     */
    animationTailLength: number;
    /**
     * 动画间隔时间(毫秒), 默认值为1000
     * @type {number}
     */
    animationIdle: number;
    parameters: {
        lineWidth?: number | undefined;
        height?: number | undefined;
        keepSize?: boolean | undefined;
        color?: string | undefined;
        vertexColors?: boolean | undefined;
        mapSrc?: string | undefined;
        mapGap?: number | undefined;
        opacity?: number | undefined;
        alphaTest?: number | undefined;
        dashed?: boolean | undefined;
        dashArray?: number | undefined;
        dashOffset?: number | undefined;
        dashRatio?: number | undefined;
        enableAnimation?: boolean | undefined;
        enableAnimationChaos?: boolean | undefined;
        animationInterval?: number | undefined;
        animationSpeed?: number | undefined;
        animationTailType?: 1 | 2 | undefined;
        animationTailRatio?: number | undefined;
        animationTailLength?: number | undefined;
        animationIdle?: number | undefined;
        transparent?: boolean | undefined;
        antialias?: boolean | undefined;
    };
    /** @internal */
    getDefaultParams(): {
        lineWidth: number;
    };
    afterGeometryUpdate(): void;
    makeGeometryOffsetPosition: (geometry: any) => void;
    computeViewportTransformation(viewport: any, near: any, far: any, matrix: any): any;
    onBeforeScenePrepareRenderHook(): void;
    /**
     * 设置线宽
     */
    set lineWidth(value: number);
    /**
     * 获取或设置线宽
     * @type {number}
     */
    get lineWidth(): number;
}
import { GeoMesh } from '../GeoMesh';
