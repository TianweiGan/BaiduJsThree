/**
 * 文字网格对象，用于在地图上绘制文字标注。支持自定义字体样式、填充颜色、描边等特性。
 *
 * @category Objects
 * @example
 * ```javascript
 * // 创建一个基础文字网格
 * const text = engine.add(new mapvthree.Text({
 *     fontSize: 16,
 *     fontFamily: 'Arial',
 *     fillStyle: '#ff0000',
 *     strokeStyle: '#ffffff',
 *     lineWidth: 2,
 *     padding: [4, 4],
 *     keepSize: true
 * }));
 *
 * // 设置数据源
 * const data = mapvthree.GeoJSONDataSource.fromGeoJSON([{
 *     type: 'Feature',
 *     geometry: {
 *         type: 'Point',
 *         coordinates: [116.404, 39.915]
 *     },
 *     properties: {
 *         text: '北京市'
 *     }
 * }]);
 *
 * // 定义text属性映射
 * data.defineAttribute('text', 'text');
 * text.dataSource = data;
 * ```
*/
export class Text extends GeoMesh {
    /**
     * 构造函数
     * @param {{
     * fontSize?: number, fontFamily?: string, fillStyle?: string,
     * strokeStyle?: string, lineWidth?: number, padding?: Array<number>
     * }} parameters 传入参数对象
     * @param {number} parameters.fontSize 字号大小，默认16
     * @param {string} parameters.fontFamily 字体，默认微软雅黑
     * @param {string} parameters.fillStyle 绘制字的填充颜色
     * @param {string} parameters.strokeStyle 绘制字的描边颜色
     * @param {string} parameters.lineWidth 绘制字的描边宽度
     * @param {Array<number>} parameters.padding 绘制字方块的内边距，默认[2, 2]
     * @param {boolean} keepSize 是否保留字体大小，默认false
     * @param {boolean} isRenderInPostprocess 是否在后处理中绘制
     */
    constructor(parameters: {
        fontSize?: number;
        fontFamily?: string;
        fillStyle?: string;
        strokeStyle?: string;
        lineWidth?: number;
        padding?: Array<number>;
    });
    /** @readonly */ readonly isEventEntitySupported: true;
    /** @private */ private _fontSize;
    /** @private */ private _fontFamily;
    /** @private */ private _fillStyle;
    /** @private */ private _padding;
    /** @private */ private _strokeStyle;
    /** @private */ private _shouldStroke;
    /** @private */ private _collisionBoxCache;
    /** @private */ private isRenderInPostprocess;
    /** @protected */ protected geometry: any;
    /** @protected */ protected material: any;
    /** @protected */ protected cachedData: any[];
    /** @protected */ protected drawingData: any[];
    /** @protected */ protected canvas: HTMLCanvasElement;
    /** @protected */ protected ctx: CanvasRenderingContext2D | null;
    /** @protected */ protected texture: any;
    /** @protected */ protected matrixAutoUpdate: boolean;
    parameters: {
        fontSize?: number;
        fontFamily?: string;
        fillStyle?: string;
        strokeStyle?: string;
        lineWidth?: number;
        padding?: Array<number>;
    };
    /**
     * 绘制字的描边颜色
     * @param {string} value 描边颜色
     * @example
     * ```javascript
     * text.strokeStyle = '#ffffff';
     * ```
     */
    set strokeStyle(value: string);
    get strokeStyle(): string;
    _lineWidth: number | undefined;
    onBeforeScenePrepareRenderHook(engine: any, scene: any, camera: any): void;
    sortByStyle: (data: any) => any;
    getStrictStyleId: (data: any) => string | 0;
    /** @internal */
    update(): void;
    /**
     * @internal
     * 碰撞检测时计算自身尺寸的方法
     */
    collisionTest(data: any): any;
    /** @internal */
    updateRenderingData: () => void;
    getEntityByIndex(index: any): {
        index: any;
        value: any;
        itemIndex: any;
        pairs: {};
    };
    /**
     * 字号大小
     * @param {number} value 字号
     * @example
     * ```javascript
     * text.fontSize = 16;
     * ```
     */
    set fontSize(value: number);
    /**
     * 获取字号大小
     * @returns {number} 字号
     */
    get fontSize(): number;
    /**
     * 字体设置
     * @param {string} value 字体
     * @example
     * ```javascript
     * text.fontFamily = 'Arial';
     * ```
     */
    set fontFamily(value: string);
    /**
     * 获取字体
     * @returns {string} 字体
     */
    get fontFamily(): string;
    /**
     * 绘制字的填充颜色
     * @param {string} value 填充颜色
     * @example
     * ```javascript
     * text.fillStyle = '#ff0000';
     * ```
     */
    set fillStyle(value: string);
    /**
     * 获取绘制字的填充颜色
     * @returns {string} 填充颜色
     */
    get fillStyle(): string;
    /**
     * 绘制字的描边粗细
     * @param {number} value 描边粗细
     * @example
     * ```javascript
     * text.lineWidth = 2;
     * ```
     */
    set lineWidth(value: number);
    /**
     * 获取绘制字的描边粗细
     * @returns {number} 描边粗细
     */
    get lineWidth(): number;
    /**
     * 绘制字方块的内边距
     * @param {Array<number>} value x轴与y轴的边距
     * @example
     * ```javascript
     * text.padding = [4, 4];
     * ```
     */
    set padding(value: Array<number>);
    /**
     * 获取绘制字方块的内边距
     * @returns {Array<number>} x轴与y轴的边距
     */
    get padding(): Array<number>;
}
import { GeoMesh } from '../GeoMesh';
