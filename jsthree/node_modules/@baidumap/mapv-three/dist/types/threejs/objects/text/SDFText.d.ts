export class SDFText extends GeoGroup {
    frustumCulled: boolean;
    /** @private */
    private _needsUpdate;
    /** @private */
    private _enableFade;
    texture: null;
    /** @private */
    private _padding;
    /** @private */
    private _characterSet;
    /** @private */ private _collisionBoxCache;
    /** @private */ private _sdfTextureNeedUpdate;
    _flat: any;
    _fontSize: any;
    _fontWeight: any;
    _letterSpacing: any;
    _fillStyle: any[];
    _lineWidth: any;
    outlineWidth: any;
    _strokeStyle: any[];
    _fontFamily: any;
    _margin: any;
    textAlign: any;
    alignRotate: any;
    cachedData: any[];
    shouldUpdateRenderingData: boolean;
    drawingData: any[];
    _fadeData: FadeData;
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D | null;
    matrixAutoUpdate: boolean;
    geometry: any;
    material: SDFTextMaterial[] | undefined;
    fontStack: string | undefined;
    fontAtalasManager: FontAtlasManager | undefined;
    update(): void;
    updateRenderingData: () => void;
    updateSdfTexture(): void;
    _fontSettings: {
        fontSize: number;
        buffer: number;
        radius: number;
        fontFamily: any;
        fontWeight: string;
        characterSet: string[];
        sdf: boolean;
    } | undefined;
    _setupCanvas(ctx: any, dpr: any): void;
    _calculateTransform(position: any, outputMatrix: any): any;
    _processTextStyle(style?: {}): {
        fontSize: any;
        fontWeight: any;
        lineWidth: any;
        fillStyle: any;
        strokeStyle: any;
        rotateZ: any;
    };
    _generateCacheName(data: any, textStyle: any): string;
    _calculateRotation(viewMatrix: any, instanceMatrix: any, rotateZ: any): number;
    _calculateCharInfo(char: any, ctx: any, lineHeight: any, currentX: any, offsetY: any, padding: any): {
        char: any;
        width: any;
        height: any;
        offsetX: any;
        offsetY: any;
    };
    _calculatePixelSize(camera: any, position: any): number;
    _processTextLayout(text: any, lineHeight: any, textStyle: any): {
        char: string;
        width: number;
        height: any;
        offsetX: number;
        offsetY: number;
    }[][];
    _applyRotateZ(charBoxes: any, rotateZ: any, rotationMatrix: any): any;
    collisionTest(data: any): any;
    /**
     * 字号大小
     * @param {number} value 字号
     */
    set fontSize(value: number);
    get fontSize(): number;
    /**
     * 字体设置
     * @param {string} value 字体
     */
    set fontFamily(value: string);
    get fontFamily(): string;
    /**
     * 绘制字的填充颜色
     * @param {string} value css颜色
     */
    set fillStyle(value: string);
    get fillStyle(): string;
    /**
     * 绘制字方块的内边距
     * @param {Array<number>} value x轴与y轴的边距
     */
    set padding(value: Array<number>);
    get padding(): Array<number>;
    /**
     * 绘制字的描边颜色
     */
    set strokeStyle(value: any[]);
    get strokeStyle(): any[];
    _shouldStroke: boolean | undefined;
    set enableFade(value: boolean);
    get enableFade(): boolean;
    getStrictStyleId: (data: any) => string | 0;
    /**
     * 将this.material下挂载的同名getter与setter属性挂载到this上，方便操作
     * @param {Array<string>} properties 属性名数组
     * @internal
     */
    defineMaterialProperties(properties?: Array<string>): void;
}
import { GeoGroup } from '../GeoGroup';
import { FadeData } from '../FadeData';
import { SDFTextMaterial } from '../../materials/text/sdf/SDFTextMaterial';
import { FontAtlasManager } from './font-atlas-manager';
