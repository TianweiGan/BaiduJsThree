export class GridLODInstancedMesh {
    constructor(options?: {});
    /** @private */
    private _gridSize;
    /** @private */
    private _gridMap;
    /** @private */
    private _nearestGrid;
    /** @private */
    private _freezeUpdate;
    _lods: {
        model: any;
        meshes: object[];
        distance: any;
        level: number;
    }[];
    afterAddToEngine(engine: any): void;
    engine: any;
    beforeRemoveFromEngine(engine: any): void;
    _parseLods(lods: any): {
        model: any;
        meshes: object[];
        distance: any;
        level: number;
    }[];
    _initGridInfo(x: any, y: any, gridSize: any): {
        x: any;
        y: any;
        gridSize: any;
        center: number[];
        lastLevel: number;
        distance: number;
    };
    setBufferData(bufferData: any): void;
    _getCurrentLOD(distance: any): {
        level: number;
    };
    _createGridMesh(grid: any, lod: any): InstancedModel;
    onBeforeScenePrepareRender(engine: any, scene: any, camera: any): void;
    dispose(): void;
    get nearestGrid(): null;
    set gridSize(value: number);
    get gridSize(): number;
    set freezeUpdate(value: boolean);
    get freezeUpdate(): boolean;
}
import { InstancedModel } from './InstancedModel';
