/**
 * 2D热力图，用于在地图上展示数据密度分布。支持自定义颜色渐变、透明度、半径等属性，可以高效渲染大量数据点。
 * 主要功能：
 * - 支持自定义颜色渐变配置
 * - 支持数据权重设置
 * - 支持保持大小（按像素为单位绘制）
 * - 支持径向渐变速度调整
 * @category Objects
 * @example
 * ```javascript
 * const heatmap = engine.add(new mapvthree.Heatmap({
 *     gradient: {
 *         0.4: 'blue',
 *         0.65: 'lime',
 *         1: 'red'
 *     },
 *     radius: 30,
 *     opacity: 0.8,
 *     keepSize: true
 * }));
 * let data = mapvthree.GeoJSONDataSource.fromGeoJSON(data);
 * heatmap.dataSource = data;
 * ```
 * ![](media://heatmap.png)
 */
export class Heatmap extends GeoMesh {
    /**
     * 创建热力图实例
     * @param {Object} parameters 热力图配置参数
     * @param {Object} [parameters.gradient] 热力渐变颜色配置，格式为{stop: 'color'}，例如{0.4: 'blue', 0.65: 'lime', 1: 'red'}
     * @param {number} [parameters.opacity=1] 透明度整体系数
     * @param {number} [parameters.minValue=0] 最小热力值
     * @param {number} [parameters.maxValue=100] 最大热力值
     * @param {number} [parameters.radius=30] 热力绘制半径
     * @param {boolean} [parameters.keepSize=false] 是否保持大小（即按像素为单位绘制）
     * @param {number} [parameters.attenuateMValueFactor=0] 径向渐变速度
     */
    constructor(parameters: {
        gradient?: Object | undefined;
        opacity?: number | undefined;
        minValue?: number | undefined;
        maxValue?: number | undefined;
        radius?: number | undefined;
        keepSize?: boolean | undefined;
        attenuateMValueFactor?: number | undefined;
    });
    /**
     * 是否为热力图
     * @readonly
     */
    readonly isHeatmap: true;
    /** @protected 是否进行视锥体剔除 */
    protected frustumCulled: boolean;
    /** @protected 几何体 */
    protected geometry: any;
    /** @protected 材质 */
    protected material: any;
    /** @private 场景 */
    private scene;
    /** @private 点网格 */
    private pointMesh;
    /** @private 点材质 */
    private pointMaterial;
    /** @private 点几何体 */
    private pointGeometry;
    /** @private 渲染目标 */
    private renderTarget;
    /** @private 深度材质 */
    private depthMaterial;
    /** @private 深度渲染目标 */
    private depthRenderTarget;
    parameters: {
        gradient?: Object | undefined;
        opacity?: number | undefined;
        minValue?: number | undefined;
        maxValue?: number | undefined;
        radius?: number | undefined;
        keepSize?: boolean | undefined;
        attenuateMValueFactor?: number | undefined;
    };
    /**
     * 获取默认参数
     * @internal
     * @returns {Object} 默认参数对象
     */
    getDefaultParams(): Object;
    /**
     * 热力渐变颜色配置，格式为{stop: 'color'}，例如{0.4: 'blue', 0.65: 'lime', 1: 'red'}
     */
    set gradient(value: any);
    /**
     * 设置热力绘制半径
     * @param {number} value 半径值
     */
    set radius(value: number);
    /**
     * 获取热力绘制半径
     * @returns {number} 半径值
     */
    get radius(): number;
    /**
     * 设置最小热力值
     * @param {number} value 最小热力值
     */
    set minValue(value: number);
    /**
     * 获取最小热力值
     * @returns {number} 最小热力值
     */
    get minValue(): number;
    /**
     * 设置最大热力值
     * @param {number} value 最大热力值
     */
    set maxValue(value: number);
    /**
     * 获取最大热力值
     * @returns {number} 最大热力值
     */
    get maxValue(): number;
    /**
     * 设置透明度
     * @param {number} value 透明度值
     */
    set opacity(value: number);
    /**
     * 获取透明度
     * @returns {number} 透明度值
     */
    get opacity(): number;
    /**
     * 设置是否保持大小（即按像素为单位绘制）
     * @param {boolean} value 是否保持大小
     */
    set keepSize(value: boolean);
    /**
     * 获取是否保持大小（即按像素为单位绘制）
     * @returns {boolean} 是否保持大小
     */
    get keepSize(): boolean;
    /**
     * 径向渐变速度
     */
    set attenuateMValueFactor(value: any);
    /** @internal */
    onBeforeSceneRenderHook(engine: any, scene: any, camera: any, renderState: any): void;
}
import { GeoMesh } from '../GeoMesh';
