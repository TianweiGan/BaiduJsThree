/**
 * 标签渲染对象，用于在地图上绘制文本标签。支持背景图片、自定义样式等功能。
 *
 * @category Objects
 * @example
 * ```javascript
 * // 创建一个标签对象
 * const label = engine.add(new mapvthree.TwinLabel({
 *     width: 100,          // 标签宽度
 *     height: 30,          // 标签高度
 *     background: 'http://url.png',  // 背景图片
 *     padding: [10, 0, 0, 20],       // 内边距
 *     fontSize: 14,                   // 字体大小
 *     fillStyle: '#ffffff',          // 文字颜色
 *     keepSize: true                 // 保持像素大小
 * }));
 *
 * // 设置数据源
 * let data = mapvthree.GeoJSONDataSource.fromGeoJSON(data);
 * data.defineAttribute('text', 'text');  // 定义文本属性
 * label.dataSource = data;
 * ```
 * ![](media://label.png)
 */
export class TwinLabel extends GeoMesh {
    /**
     * 创建标签渲染对象
     * @param {Object} parameters 标签配置参数
     * @param {string} [parameters.background] 背景图片的 URL
     * @param {HTMLCanvasElement} [parameters.backgroundCanvas] 背景 Canvas 对象
     * @param {boolean} [parameters.vertexBackgrounds] 是否使用数据中的背景图 URL
     * @param {boolean} [parameters.vertexBackgroundCanvas] 是否使用数据中的背景 Canvas
     * @param {boolean} [parameters.vertexVisible] 是否使用数据中的可见性
     * @param {boolean} [parameters.vertexSizes] 是否使用数据中的大小
     * @param {boolean} [parameters.vertexPositionOffsets] 是否使用数据中的位置偏移
     * @param {Array<number>} [parameters.padding=[0,0,0,0]] 文字内边距 [上,右,下,左]
     * @param {number} [parameters.width] 标签宽度
     * @param {number} [parameters.height] 标签高度
     * @param {number|string} [parameters.fontSize=14] 字号大小，可设为 'auto' 自动计算
     * @param {string} [parameters.fillStyle='#fff'] 文字颜色
     * @param {Array<number>} [parameters.offset=[0,0]] 标签偏移量
     * @param {number} [parameters.opacity=1] 整体透明度
     * @param {boolean} [parameters.keepSize=true] 是否保持大小（即按像素为单位绘制），默认开启
     * @param {boolean} [parameters.flat=false] 是否贴地显示
     * @param {number} [parameters.boxSize=100] 雪碧图单元数量上限
     * @param {number} [parameters.maxCacheSize=2000] LRU缓存大小限制
     * @param {number} [parameters.scaleRatio=1] 缩放比例
     */
    constructor(parameters: {
        background?: string | undefined;
        backgroundCanvas?: HTMLCanvasElement | undefined;
        vertexBackgrounds?: boolean | undefined;
        vertexBackgroundCanvas?: boolean | undefined;
        vertexVisible?: boolean | undefined;
        vertexSizes?: boolean | undefined;
        vertexPositionOffsets?: boolean | undefined;
        padding?: number[] | undefined;
        width?: number | undefined;
        height?: number | undefined;
        fontSize?: string | number | undefined;
        fillStyle?: string | undefined;
        offset?: number[] | undefined;
        opacity?: number | undefined;
        keepSize?: boolean | undefined;
        flat?: boolean | undefined;
        boxSize?: number | undefined;
        maxCacheSize?: number | undefined;
        scaleRatio?: number | undefined;
    });
    /**
     * 是否支持返回事件实体数据
     * @readonly
     * @type {boolean}
     */
    readonly isEventEntitySupported: boolean;
    /**
     * 是否为标签对象
     * @readonly
     * @type {boolean}
     */
    readonly isLabel: boolean;
    /**
     * @internal 几何体对象
     * @type {LabelGeometry}
     */
    geometry: LabelGeometry;
    /**
     * @internal 材质对象
     * @type {LabelMaterial}
     */
    material: LabelMaterial;
    /**
     * @internal Canvas 元素
     * @type {HTMLCanvasElement}
     */
    canvas: HTMLCanvasElement;
    /**
     * @internal Canvas 2D 上下文
     * @type {CanvasRenderingContext2D}
     */
    ctx: CanvasRenderingContext2D;
    /**
     * @internal 纹理对象
     * @type {CanvasTexture}
     */
    texture: CanvasTexture;
    /**
     * @internal 图标 URL 映射表
     * @type {Map}
     */
    iconUrlHash: Map<any, any>;
    /**
     * @internal Canvas 对象映射表
     * @type {Map}
     */
    canvasHash: Map<any, any>;
    /**
     * @internal 标签盒子映射表
     * @type {Map}
     */
    boxHash: Map<any, any>;
    /**
     * @internal 标签间距
     * @type {Array<number>}
     */
    gap: Array<number>;
    /** @private */ private _padding;
    /** @private */ private _fillStyle;
    /** @private */ private oldMapTextureRes;
    /** @private */ private _instanceIds;
    /** @private */ private labelHash;
    parameters: {
        background?: string | undefined;
        backgroundCanvas?: HTMLCanvasElement | undefined;
        vertexBackgrounds?: boolean | undefined;
        vertexBackgroundCanvas?: boolean | undefined;
        vertexVisible?: boolean | undefined;
        vertexSizes?: boolean | undefined;
        vertexPositionOffsets?: boolean | undefined;
        padding?: number[] | undefined;
        width?: number | undefined;
        height?: number | undefined;
        fontSize?: string | number | undefined;
        fillStyle?: string | undefined;
        offset?: number[] | undefined;
        opacity?: number | undefined;
        keepSize?: boolean | undefined;
        flat?: boolean | undefined;
        boxSize?: number | undefined;
        maxCacheSize?: number | undefined;
        scaleRatio?: number | undefined;
    };
    /**
     * 设置文字在标签中的内边距
     * @param {Array<number>} value 内边距数组，支持 2-4 个值
     * - [v,h] 上下,左右
     * - [top,h,bottom] 上,左右,下
     * - [top,right,bottom,left] 上,右,下,左
     */
    set padding(value: Array<number>);
    /**
     * 获取标签内边距
     * @returns {Array<number>} 四个值的内边距数组 [上,右,下,左]
     */
    get padding(): Array<number>;
    boxes: any[];
    boxSize: number;
    clone(): any;
    /** @internal */
    getDefaultParams(): {
        width: number;
        height: number;
        fontSize: number;
    };
    collisionTest(data: any): {
        width: any;
        height: any;
    };
    createLabelTexture(options: any): CanvasTexture;
    /**
     * @internal
     * TODO：这里的setData是异步函数，所以会有一些先生成雪碧图速度比读数据速度慢的问题
     */
    _updateData(): Promise<void>;
    oldTexture: any;
    /**
     * @internal
     * @param {string | object} url 图片路径
     * @param {function} callback 回调函数
     */
    url2canvas(url: string | object, callback: Function): void;
    /** @protected */
    protected getEntityByIndex(index: any): {
        index: any;
        value: any;
        itemIndex: any;
        pairs: {};
    };
}
import { GeoMesh } from '../GeoMesh';
import { LabelGeometry } from '../../geometries/point/LabelGeometry';
import { LabelMaterial } from '../../materials/point/Label';
