/**
 * 聚合点，它能够汇总一组点要素，统计数据，利用聚合统计得到的数据信息，
 * 结合其他的可视化元素可以展示更丰富的效果。
 *
 * @category Objects
 * @example
 * ```javascript
 * const cluster = engine.add(new mapvthree.ClusterPoint({
 *     cluster: {
 *         radius: 100,
 *         maxZoom: 18,
 *         minZoom: 5
 *     },
 *     icon: {
 *         width: 30,
 *         height: 30,
 *         mapSrc: 'path/to/icon.png'
 *     },
 *     label: {
 *         fontSize: 14,
 *         width: 90,
 *         height: 40,
 *         fillStyle: '#ffffff',
 *         background: 'website_assets/images/speed-panel.png',
 *     }
 * }));
 * // 指定聚合源数据
 * let dataSource = mapvthree.GeoJSONDataSource.fromGeoJSON(data);
 * cluster.dataSource = dataSource;
 * ```
 * @example
 * ```javascript
 * // 添加自定义聚合组件
 * cluster.addComponent(new mapvthree.Text({
 *     fontSize: 14,
 *     fillStyle: '#ffffff',
 * }));
 * // 设置聚合数据数据源属性
 * cluster.clusterDataSource.defineAttribute('text', () => {
 *     return '自定义聚合组件';
 * });
 * ```
 */
export class ClusterPoint extends PointGroup {
    /**
     * 构造函数
     * @param {Object} parameters 传入参数对象
     * @param {Object} [parameters.cluster] 聚合配置
     * @param {number} [parameters.cluster.maxZoom=18] 生成聚合数据的最大缩放级别, 默认18
     * @param {number} [parameters.cluster.minZoom=5] 生成聚合数据的最小缩放级别, 默认5
     * @param {number} [parameters.cluster.radius=50] 聚合半径, 单位px, 默认50px
     * @param {Object} [parameters.icon] 图标配置
     * @param {number} [parameters.icon.width=30] 图标宽度, 默认30px
     * @param {number} [parameters.icon.height=30] 图标高度, 默认30px
     * @param {string} [parameters.icon.mapSrc] 图标图片地址
     * @param {Object} [parameters.label] 标签配置
     * @param {string} [parameters.label.fillStyle='#ccc'] 文字颜色, 默认#ccc
     * @param {number} [parameters.label.fontSize=16] 文字大小, 默认16px
     * @param {boolean} [parameters.label.flat=false] 是否平面化显示, 默认false
    */
    constructor(parameters?: {
        cluster?: {
            maxZoom?: number | undefined;
            minZoom?: number | undefined;
            radius?: number | undefined;
        } | undefined;
        icon?: {
            width?: number | undefined;
            height?: number | undefined;
            mapSrc?: string | undefined;
        } | undefined;
        label?: {
            fillStyle?: string | undefined;
            fontSize?: number | undefined;
            flat?: boolean | undefined;
        } | undefined;
    });
    /** @private */ private _ready;
    /** @private */ private _cluster;
    /** @private */ private _clusterDataSource;
    /** @private */ private _icon;
    /** @private */ private _label;
    /** @private */ private _minUpdateInterval;
    /**
     * @private
    */
    private _lastUpdateTime;
    /**
     * @private
    */
    private _updateTimeoutHandler;
    /** @private */
    private _clusterData;
    parameters: {
        cluster?: {
            maxZoom?: number | undefined;
            minZoom?: number | undefined;
            radius?: number | undefined;
        } | undefined;
        icon?: {
            width?: number | undefined;
            height?: number | undefined;
            mapSrc?: string | undefined;
        } | undefined;
        label?: {
            fillStyle?: string | undefined;
            fontSize?: number | undefined;
            flat?: boolean | undefined;
        } | undefined;
    };
    cachedData: any;
    getChildDataSource(): GeoJSONDataSource;
    /** @protected */
    protected getEntityByIndex(index: any): {
        index: any;
        value: import("../../../index").DataItem | undefined;
        itemIndex: number;
        pairs: {};
    } | undefined;
    /** @internal */
    _updateRenderingData: () => void;
    /**
     * 更新最短的时间间隔, 最小为16ms
     * @param {number} value
     */
    set minUpdateInterval(value: number);
    /**
     * 更新最短的时间间隔, 单位ms, 默认300ms
     * @return {number}
     */
    get minUpdateInterval(): number;
    /**
     * cluster聚合点的数据源, 聚合部件的子数据源
     * @type {GeoJSONDataSource}
     * @readonly
     * @example
     * ```javascript
     * const clusterDataSource = clusterPoint.clusterDataSource;
     * clusterDataSource.defineAttribute('text');
     * ```
     */
    readonly get clusterDataSource(): GeoJSONDataSource;
    /**
     * 当前聚合后的数据
     * @type {Array}
     * @readonly
     * @example
     * ```javascript
     * const data = clusterPoint.clusterData;
     * console.log('当前聚合点数量:', data.length);
     * ```
     *
     * ```json
     * [
     *     // 非聚合数据
     *     {
     *         type: 'Feature',
     *         geometry: {
     *             coordinates: [119, 36],
     *         },
     *         properties: {
     *             count: 9,
     *         }
     *     },
     *     // 聚合数据
     *     {
     *         type: 'Feature',
     *         geometry: {
     *             coordinates: [120, 36],
     *         },
     *         properties: {
     *             cluster: true, // 是否聚合
     *             cluster_id: 1, // 聚合数据id
     *             point_count: 10, // 聚合数据量
     *         }
     *     },
     * ]
     *
     * ```
    */
    readonly get clusterData(): any[];
}
import { PointGroup } from './PointGroup';
import { GeoJSONDataSource } from '../../../threemap/dataSource/GeoJSONDataSource';
