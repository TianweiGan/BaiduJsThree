/**
 * 图标渲染对象，用于在地图上绘制图标标记。支持自定义图片、大小、颜色和动画效果。
 * 主要特性：
 * - 支持自定义图标图片
 * - 支持固定像素大小或随图缩放
 * - 支持颜色调整和透明度
 * - 支持平面贴地或面向屏幕展示
 * - 支持跳动动画效果
 *
 * @category Objects
 * @example
 * ```javascript
 * // 创建一个基础图标
 * const icon = engine.add(new mapvthree.Icon({
 *     mapSrc: 'path/to/icon.png',
 *     width: 32,
 *     height: 32,
 *     keepSize: true,
 *     vertexIcons: true
 * }));
 *
 * // 设置数据源
 * let data = mapvthree.GeoJSONDataSource.fromGeoJSON(pointData);
 * data.defineAttribute('icon', 'icon');  // 如果使用 vertexIcons
 * icon.dataSource = data;
 * ```
 * ![](media://icon.png)
 */
export class Icon extends GeoMesh {
    /**
     * 创建图标渲染对象
     * @param {Object} parameters 配置参数
     * @param {string} [parameters.mapSrc] 图标图片URL
     * @param {boolean} [parameters.vertexIcons=false] 是否通过数据携带图标URL, 默认false
     * @param {boolean} [parameters.vertexColors=false] 是否通过数据携带颜色, 默认false
     * @param {number} [parameters.width=12] 图标宽度, 默认12
     * @param {number} [parameters.height=12] 图标高度, 默认12
     * @param {Array<number>} [parameters.offset=[0,0]] 图标偏移量, 默认[0,0]
     * @param {boolean} [parameters.transparent=true] 是否启用透明, 默认true
     * @param {number} [parameters.opacity=1] 整体透明度, 默认1
     * @param {boolean} [parameters.keepSize=true] 是否保持像素大小, 默认true
     * @param {boolean} [parameters.flat=false] 是否贴地显示, 默认false
     * @param {string} [parameters.color] 图标颜色
     * @param {number} [parameters.rotateZ=0] 旋转弧度(0~2π)，仅在flat为true时生效
     * @param {boolean} [parameters.animationJump=false] 是否启用跳动动画, 默认false
     * @param {number} [parameters.jumpHeight=20] 跳动高度, 默认20
     * @param {number} [parameters.jumpSpeed=1] 跳动速度, 默认1
     */
    constructor(parameters: {
        mapSrc?: string | undefined;
        vertexIcons?: boolean | undefined;
        vertexColors?: boolean | undefined;
        width?: number | undefined;
        height?: number | undefined;
        offset?: number[] | undefined;
        transparent?: boolean | undefined;
        opacity?: number | undefined;
        keepSize?: boolean | undefined;
        flat?: boolean | undefined;
        color?: string | undefined;
        rotateZ?: number | undefined;
        animationJump?: boolean | undefined;
        jumpHeight?: number | undefined;
        jumpSpeed?: number | undefined;
    });
    /** @protected */ protected isEventEntitySupported: boolean;
    /** @private */ private _padding;
    /** @private */ private oldMapTextureRes;
    /** @protected */ protected texture: any;
    /** @protected */ protected geometry: any;
    /** @protected */ protected material: any;
    /** @protected */ protected canvas: HTMLCanvasElement;
    /** @protected */ protected ctx: CanvasRenderingContext2D | null;
    /** @protected */ protected iconUrlHash: Map<any, any>;
    /** @protected */ protected boxHash: Map<any, any>;
    /** @protected */ protected gap: number[];
    parameters: {
        mapSrc?: string | undefined;
        vertexIcons?: boolean | undefined;
        vertexColors?: boolean | undefined;
        width?: number | undefined;
        height?: number | undefined;
        offset?: number[] | undefined;
        transparent?: boolean | undefined;
        opacity?: number | undefined;
        keepSize?: boolean | undefined;
        flat?: boolean | undefined;
        color?: string | undefined;
        rotateZ?: number | undefined;
        animationJump?: boolean | undefined;
        jumpHeight?: number | undefined;
        jumpSpeed?: number | undefined;
    };
    boxes: any[];
    boxSize: any;
    /** @internal */
    getDefaultParams(): {
        width: number;
        height: number;
    };
    collisionTest(data: any): {
        width: any;
        height: any;
    };
    createTexture(): Map<any, any> | {
        texture: any;
        iconUrlHash: Map<any, any>;
    };
    /** @protected */
    protected _updateData(): Promise<void>;
    originCenter: any;
    /**
     * @internal
     * 根据数据获取整张纹理以及相应的uv
     * @param {*} data 点数据
     * @param {*} texturePropName icon字段
     * @param {*} width 图片宽
     * @param {*} height 图片高
     * @returns {object} 纹理
     */
    getTextureAndHash: (data: any, texturePropName: any, width: any, height: any, isDataChanged: any) => object;
    /** @protected */
    protected getEntityByIndex(index: any): {
        index: any;
        value: any;
        itemIndex: any;
        pairs: {};
    };
    /**
     * @internal
     * 设置图标雪碧图的内边距
     * @param {Array<number>} value 内边距数组 [x, y]
     * @example
    * ```javascript
    * const icon = new mapvthree.Icon({
    *     mapSrc: 'icon.png'
    * });
    * icon.padding = [2, 2]; // 设置2像素的内边距
    * ```
    */
    set padding(value: Array<number>);
    get padding(): Array<number>;
    getVertexPosition(index: any, target: any): any;
    getPixelSize(position: any): any;
    /** @protected */
    protected getEntityIndexByFace(faceIndex: any, pointIndex: any): any;
    _computeIntersections: any;
}
import { GeoMesh } from '../GeoMesh';
