/**
 * 有宽度的线，可设置拐角、端头，可实现虚线，可实现线动画
 * ```js
 * const line = engine.add(new mapvthree.Polyline());
 * let data = mapvthree.GeoJSONDataSource.fromGeoJSON(data);
 * line.dataSource = data;
 * ```
 */
export class Polyline extends GeoMesh {
    /**
     * 构造函数
     * @param {{
     * color?: string, vertexColors?: boolean, emissive?: string, map?: string,
     * opacity?: number, alphaTest?: number,
     * dashed?: boolean, dashArray?: number, dashOffset?: number, dashRatio?: number,
     * }} parameters 传入参数对象
     * @param {number} parameters.lineWidth 线的宽度，默认是4
     * @param {number} parameters.height 线的高度
     * @param {string} parameters.color 线的颜色
     * @param {boolean} parameters.vertexColors 是否通过数据携带颜色配置
     * @param {string} parameters.emissive 自发光的颜色
     * @param {number} parameters.opacity 线的整体透明系数，默认为1
     * @param {number} parameters.alphaTest 开启透明剔除，透明度小于该值的部分都不渲染，默认为0
     * @param {boolean} parameters.dashed 是否渲染虚线
     * @param {number} parameters.dashArray 每段虚线（实心加空心部分）的长度
     * @param {number} parameters.dashOffset 虚线起始绘制部分的偏移
     * @param {number} parameters.dashRatio 实心部分占每段长度的占比
     */
    constructor(parameters: {
        color?: string;
        vertexColors?: boolean;
        emissive?: string;
        map?: string;
        opacity?: number;
        alphaTest?: number;
        dashed?: boolean;
        dashArray?: number;
        dashOffset?: number;
        dashRatio?: number;
    });
    isEventEntitySupported: boolean;
    /** @private */
    private _resolution;
    /** @protected */ protected geometry: any;
    /** @protected */ protected material: any;
    /** 线的颜色 */ color: any;
    /** 是否通过数据携带颜色配置 */ vertexColors: any;
    /** 自发光的颜色 */ emissive: any;
    /** 纹理贴图的路径 */ map: any;
    /** 线的整体透明系数 */ opacity: any;
    /** 开启透明剔除，透明度小于该值的部分都不渲染，默认为0 */ alphaTest: any;
    /** 是否渲染虚线 */ dashed: any;
    /** 每段虚线（实心加空心部分）的长度 */ dashArray: any;
    /** 虚线起始绘制部分的偏移 */ dashOffset: any;
    /** 实心部分占每段长度的占比 */ dashRatio: any;
    parameters: {
        color?: string;
        vertexColors?: boolean;
        emissive?: string;
        map?: string;
        opacity?: number;
        alphaTest?: number;
        dashed?: boolean;
        dashArray?: number;
        dashOffset?: number;
        dashRatio?: number;
    };
    /** @internal */
    getDefaultParams(): {
        lineWidth: number;
    };
    computeViewportOrthographicTransform(viewport: any, near: any, far: any, matrix: any): any;
    computeViewportTransformation(viewport: any, near: any, far: any, matrix: any): any;
    onBeforeScenePrepareRenderHook(): void;
    _cameraNear: any;
    _cameraFar: any;
    afterGeometryUpdate(): void;
    makeGeometryOffsetPosition: (geometry: any) => void;
    set lineWidth(value: any);
    /**
     * 线的宽度
     */
    get lineWidth(): any;
}
import { GeoMesh } from '../GeoMesh';
