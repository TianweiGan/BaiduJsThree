export class FatLineGeometry extends ShadowVolumeLineGeometry {
    constructor(parameters: any);
    isFatLineGeometry: boolean;
    parameters: any;
    _granularity: any;
    _needsUpdate: boolean;
    _needsCounter: boolean;
    _height: any;
    _flags: {
        lastFlip: number;
        started: boolean;
        normal: null;
        totalDistance: number;
    };
    setData(data: any): void;
    cachedData: any;
    updateGeometryColumbus(data: any): void;
    cachedPositions: any[] | any[] | undefined;
    cachedPrevs: any[] | undefined;
    cachedNexts: any[] | undefined;
    updateGeometry3D(data: any): void;
    updateGeometry(): void;
    getFlatDirection(p1: any, p2: any): any;
    _segmentLines: (positions: any, uvs: any, lengths: any, prevAndNextLengths: any, totalLengths: any, expandAndPrevs: any, normals: any, colors: any, indices: any, last: any, cur: any, next: any, width: any, objectColor: any, prevs: any, nexts: any, index: any) => number;
    generateArc(options: any): any[] | {
        positions: any[];
        normals: any[];
        lengths: any[];
        randoms: any[];
        totalLength: number;
        prevs: any[];
        nexts: any[];
        expandAndPrevs: any[];
        prevAndNextLengths: any[];
        uvs: any[];
        indices: any;
    };
    generateCartesianArc(p0: any, p1: any, minDistance: any, ellipsoid: any, h0: any, h1: any, array: any, prevs: any, nexts: any, offset: any, normal: any, nextNormal: any, miterNormal: any, lastMiterNormal: any, miterLen: any, flip: any, normals: any, width: any, lengths: any, expandAndPrevs: any, distance: any, hasNext: any, bevelIndices: any, uvs: any, flags: any): {
        index: any;
        surfaceDistance: any;
        lastLength: number;
    };
    _extrusions: (positions: any, normals: any, uvs: any, lengths: any, prevAndNextLengths: any, totalLengths: any, expandAndPrevs: any, colors: any, point: any, prev: any, next: any, normal: any, distanceRadio: any, prevDistanceRatio: any, nextDistanceRatio: any, width: any, isPrev: any, isFirst: any, color: any, prevs: any, nexts: any) => void;
    _flipedUV(uvs: any, distance: any, flip: any, bevel: any): void;
    set needsUpdate(value: boolean);
    get needsUpdate(): boolean;
}
import { ShadowVolumeLineGeometry } from '../ShadowVolumLineGeometry';
