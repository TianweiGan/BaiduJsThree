export class ShadowVolumeLineGeometry {
    constructor(parameter: any);
    haveMiter: any;
    bottomOffser: any;
    topOffset: any;
    parameter: any;
    _needsCounter: boolean;
    createVolumeGeometry(data: any): {
        vertices: boolean | any[];
        starts2D: boolean | any[];
        offsetAndNormals2D: boolean | any[];
        startNormals2D: boolean | any[];
        endNormals2D: boolean | any[];
        widths2D: boolean | any[];
        offsetNormals: boolean | any[];
        totalLengths: any[];
        segmentCount: number;
        indices: number[];
        dirs: number[];
        lineLengths: number[];
    };
    lineToShadowVolumeMesh(points: any, width: any, bottomOffset: any, topOffset: any, totalLength?: number, lineCount?: number): {
        vertices: any[];
        indices: any[];
        normals: any[];
        starts: any[];
        offsetAndNormals: any[];
        startNormals: any[];
        endNormals: any[];
        widths: any[];
        lineCount: number;
        dir: number[];
        offsetNormal: any[];
        distanceFromStart: number;
        lengths: number[];
    };
    _volumeSegmentLines: (positiveSeq: any, reverseSeq: any, widths: any, normals: any, indices: any, last: any, cur: any, next: any, width: any, index: any, isStarted: any) => number;
    conversion(baseArray: any, n: any, offsetAndNormal2D: any): any[];
    _volumeExtrusions: (positiveSeq: any, reverseSeq: any, normals: any, widths: any, point: any, normal: any, width: any) => void;
    setData(data: any): void;
    _needsUpdate: any;
    updateGeometry(data: any): void;
    cachedPositions: boolean | any[] | undefined;
    cachedStarts2D: boolean | any[] | undefined;
    set needsUpdate(value: any);
    get needsUpdate(): any;
}
