export class MapControl3D {
    constructor(map: any);
    map: any;
    currentAction: number;
    startX: any;
    startY: any;
    startCenterX: any;
    startCenterY: any;
    startPitch: any;
    startHeading: any;
    startZoom: any;
    startZoomUnits: any;
    startAtTop: any;
    mapWidth: any;
    mapHeight: any;
    startCamera: any;
    startCenter: any;
    startNdc: any;
    startPoint: any;
    startScaleX: number;
    startScaleY: number;
    startBoundX: any;
    startBoundY: any;
    /** @private */
    private _enabled;
    enableInertia: boolean;
    minPitch: number;
    maxPitch: number;
    zoomSpeed: number;
    headingSpeed: number;
    pitchSpeed: number;
    doubleClickTimer: null;
    clickInterval: number;
    /**
     * 旋转模式
     * 0: 以屏幕中心和海平面交点为旋转中心点
     * 1: 以屏幕中心为和场景交点为旋转中心点
     * 2: 以鼠标指针位置为旋转中心点（未实现）
     */
    _rotationMode: number;
    /** @private */
    private _buttonDown;
    /** @private */
    private _primaryStartPosition;
    /** @private */
    private _primaryPosition;
    /** @private */
    private _primaryPreviousPosition;
    /** @private */
    private _positions;
    /** @private */
    private _previousPositions;
    /** @private */
    private _isPinching;
    /** @private */
    private _isTouchHolding;
    /** @private */
    private _lastPinchDist;
    /** @private */
    private _lastSeenTouchEvent;
    /** @private */
    private _whichKindOfPinch;
    /** @private */
    private _pinchConnectPosition;
    /** @private */
    private _pinchActionPosition;
    /** @private */
    private _pinchActionTimer;
    /** @private */
    private _touchHoldTimer;
    /** @private */
    private _clickPixelTolerance;
    /** @private */
    private _holdPixelTolerance;
    set enabled(enabled: any);
    _eventThrottle: EventThrottle;
    _draggingMovementAggregator: PointerMovementAggregator;
    _zoomMovementAggregator: PointerMovementAggregator;
    init: () => void;
    handlePointerDownWithThrottle: (e: any) => void;
    handleWheelWithThrottle: (e: any) => void;
    handlePointerMoveWithThrottle: (e: any) => void;
    handleMouseDraggingWithThrottle: (e: any) => void;
    handlePointerUpWithThrottle: (e: any) => void;
    _tryToTriggerEvents: () => Promise<void>;
    _triggerEvents: (eventToTriggerMap: any) => Promise<void>;
    initCursorAnchor: () => void;
    cursorAnchor: HTMLDivElement | undefined;
    showCursorAnchor: (x: any, y: any) => void;
    hideCursorAnchor: () => void;
    handleResize: (e: any) => void;
    fireTouchEvents: (e: any) => Promise<void>;
    hasMoved: boolean | undefined;
    startDistance: any;
    fireTouchMoveEvents: (e: any) => Promise<void>;
    handlePointerMove: (e: any) => Promise<void>;
    handleMouseMove: (e: any) => Promise<void>;
    handlePointerDown: (e: any) => Promise<void>;
    handleMouseDown: (e: any) => Promise<void>;
    _reactDragging: (pixelX: any, pixelY: any) => Promise<void>;
    handleMouseDragging: (e: any) => Promise<void>;
    handleCameraBeforeRender(): void;
    originCamera: any;
    originMap: {
        center: any;
        pitch: any;
        heading: any;
    } | undefined;
    handlePointerUp: (e: any) => Promise<void>;
    _startInertiaAnimation: () => void;
    _inertiaAnimationHanlder: number | undefined;
    handleMouseUp: (e: any) => Promise<void>;
    waitSecondClick: boolean | undefined;
    clearDoubleClickTimer: () => void;
    handleContextMenu: (e: any) => void;
    _reactZoom: (deltaX: any, deltaY: any, pixelX: any, pixelY: any) => Promise<void>;
    _startZoomInertiaAnimation: (pixelX: any, pixelY: any) => void;
    _zoomInertiaAnimationHandler: number | undefined;
    handleWheel: (e: any) => Promise<void>;
    handlePan: (x: any, y: any) => Promise<void>;
    handleRotate: (x: any, y: any) => Promise<void>;
    handleZoom: (zoomOptions: any) => Promise<void>;
    getPixelPosition(e: any): number[];
    currentPixelX: number | undefined;
    currentPixelY: number | undefined;
    ndcToPoint(pixel: any, camera: any, target: any): boolean;
    getNdc(px: any, py: any, target: any): void;
    makeHeadingSafe: (heading: any) => any;
    makePitchSafe: (pitch: any) => any;
    _pickPosition(mouse: any): Promise<any>;
    dispose: () => void;
}
import { EventThrottle } from '../../threemap/engine/event/EventThrottle';
import { PointerMovementAggregator } from './PointerMovementAggregator';
