/**
 * 面积测量
 * ```jsx
 * const tiles = engine.add(new mapvthree.Default3DTiles({
 *  url: tilesetUrl,
 * }));
 * tiles.addEventListener('click', e => {});
 * tiles.addEventListener('mousemove', e => {});
 * const measure = engine.add(new mapvthree.AreaMeasure(engine, {
 *   clampToGround: true,
 *   editingPolygonParameter: {
 *      color: 'red',
 *      opacity: 0.6,
 *      maxHeight: 2500,
 *   },
 *   editedPolygonParameter: {
 *      color: 'blue',
 *      opacity: 0.6,
 *      maxHeight: 2500,
 *   }
 * }))
 * ```
 */
export class AreaMeasure extends Measure {
    /**
     * @param { Object } options 绘制参数
     * @param {Object} options.editingPolygonParameter 绘制中的多边形参数，用来配置虚拟多边形的颜色等
     * @param {Object} options.borderLineParameter 边框参数，用来配置边框的颜色、线宽等
     * @param {Object} options.editedPolygonParameter 绘制完成后的多边形参数，用来配置多边形的颜色等
     * @param {boolean} options.clampToGround 绘制时是否贴地
     * @param {boolean} options.showLabel 是否展示测量信息
     */
    constructor(engine: any, options?: {
        editingPolygonParameter: Object;
        borderLineParameter: Object;
        editedPolygonParameter: Object;
        clampToGround: boolean;
        showLabel: boolean;
    });
    /** @private */ private _area;
    /** @private */ private _node;
    /** @private */ private _editor;
    /** @private */ private _infoMarker;
    /** @private */ private _infoMarkerDataSource;
    /** @private 面积的信息标注 */
    private _infoMarkerData;
    _engine: any;
    _options: {
        editingPolygonParameter: Object;
        borderLineParameter: Object;
        editedPolygonParameter: Object;
        clampToGround: boolean;
        showLabel: boolean;
    };
    _showLabel: any;
    /** @private */
    private initEditor;
    /** @private */
    private initInfoMarker;
    /**
     * 生成信息标注
     */
    createInfoMarker(feature: any): HTMLDivElement;
    /** @private */
    private _movePolygonNode;
    /** @private */
    private _moveRectNode;
    /** @private */
    private _moveCircleNode;
    /** @private */
    private _adjustNode;
    /** @private */
    private setInfoMarker;
    clearBuffer(): void;
    /**
     * 清除绘制元素
     */
    clearAll(): void;
    dispose(): void;
    /**
     * 总面积
     */
    get area(): number;
    set showLabel(value: any);
    get showLabel(): any;
}
import { Measure } from './Measure';
