/**
 * 多边形编辑器
 * ```js
 * const tile = engine.add(new mapvthree.Default3DTiles({
 *   url: tilesetUrl,
 * }))
 * tile.addEventListener('click', () => {});
 * const editor = engine.add(new mapvthree.PolygonEditor(engine, {
 *      polygonColor: '#333',
 * }));
 * // 贴地绘制
 * const editor = engine.add(new mapvthree.PolygonEditor(engine, {
 *  clampToGround: true,
 *  editingPolygonParameter: {
 *      color: 'red',
 *      opacity: 0.6,
 *      maxHeight: 2500,
 *  },
 *  editedPolygonParameter: {
 *      color: 'blue',
 *      opacity: 0.6,
 *      maxHeight: 2500,
 *  }
 * }))
 * // 1. 开启编辑自定义绘制
 * polygon.enabled = true;
 * // 2. 数据回显
 * const data = [
 *      {
 *          point: [116.51595735991326, 39.79906856078468, 0],
 *          position: [12970497.04259632, 4836786.287580897, 0],
 *          scale: 2,
 *          angle: 2.517563424078793,
 *      },
 *      ...
 *      {
 *          point: [116.51595735991326, 39.79906856078468, 0],
 *          position: [12970497.04259632, 4836786.287580897, 0],
 *          scale: 2,
 *          angle: 2.517563424078793,
 *      },
 * ];
 * polygon.data = data;
 * polygon.enabled = true;
 * ```
 */
export class PolygonEditor extends Editor {
    /**
     * @param { Object } options 绘制参数
     * @param {string} options.polygonColor 多边形颜色,默认为'rgb(200, 200, 50)'
     * @param {string} options.borderColor 多边形边框颜色,默认为'rgb(200, 50, 50)'
     * @param {Object} options.editingPolygonParameter 绘制中的多边形参数，用来配置虚拟多边形的颜色等
     * @param {Object} options.borderLineParameter 边框参数，用来配置边框的颜色、线宽等
     * @param {Object} options.editedPolygonParameter 绘制完成后的多边形参数，用来配置多边形的颜色等
     * @param {boolean} options.clampToGround 是否贴地
     */
    constructor(engine: any, options?: {
        polygonColor: string;
        borderColor: string;
        editingPolygonParameter: Object;
        borderLineParameter: Object;
        editedPolygonParameter: Object;
        clampToGround: boolean;
    });
    /** @private */ private _polygonOpacity;
    /** @private */ private _virtualOpacity;
    /** @private */
    private _polygonData;
    /** @private */
    private _strokeLineData;
    /** @private */
    private _helpersData;
    /**
     * @protected
     * 是否允许编辑
     */
    protected _enableEdit: boolean;
    /** @private */ private _engine;
    /** @private */ private _options;
    /** @private */ private _polygon;
    /** @private */ private _polygonDataSource;
    /** @private */ private _strokeLine;
    /** @private */ private _strokeLineDataSource;
    /** @private */ private _helpers;
    /** @private */ private _helpersDataSource;
    /** @private */ private _completedDataSource;
    /** @private */ private _completedElement;
    /** @private */ private _isAdd;
    /** @private */ private _selectedIndex;
    /** @private */ private _stage;
    /** @private */ private _transformIndex;
    /** @private */ private _transformBox;
    /** @private */ private _isMoving;
    /** @private */ private _vertex;
    /** @private */ private _prevPosition;
    _clampToGround: boolean;
    /** @private */
    private initPolygon;
    /** @private */
    private initStrokeLine;
    /** @private */
    private initHelpers;
    /** @private */
    private initCompletedElement;
    /** @private */
    private graphInfo;
    /** @private */
    private _handleCompleteClick;
    set vertex(value: any[]);
    get vertex(): any[];
    set stage(value: any);
    /** @internal */
    get stage(): any;
    /** @private */
    private _handleAddClick;
    /** @private */
    private _handleAddMove;
    /** @private */
    private _handleAddFinish;
    /** @private */
    private _handleNodeClick;
    /** @private */
    private _getNodeNormal;
    /**
     * @private
     * 拖拽时触发
     */
    private _handleTransformChanging;
    /**
     * @private
     * 拖拽结束后触发
     */
    private _handleTransformChanged;
    /** @private */
    private addNode;
    /** @private */
    private updateNode;
    /** @private */
    private overwriteNodes;
    /** @internal */
    clearObjects(): void;
    dispose(): void;
    set data(value: any[]);
    /** 绘制的多边形数据信息 */
    get data(): any[];
    get length(): number;
}
import { Editor } from './Editor';
