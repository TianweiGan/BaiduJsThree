/**
 * 矩形编辑器
 * ```js
 * const lineEditor = engine.add(new mapvthree.RectEditor(engine, {
 *   editingPolygonParameter: {
 *      color: 'red',
 *      opacity: 0.1,
 *   },
 *   editedPolygonParameter: {
 *      color: 'green',
 *   }
 * }));
 * ```
 * ![](media://rectEditor.png)
 */
export class RectEditor extends Editor {
    /**
     * @param { Object } options 绘制参数
     * @param {string} options.rectColor 矩形颜色,默认为'rgb(200, 200, 50)'
     * @param {Object} options.editingPolygonParameter 绘制中的矩形参数，用来配置虚拟矩形的颜色等,参考[Polygon](../classes/index.Polygon.html)
     * @param {Object} options.editedPolygonParameter 绘制完成后的矩形参数，用来配置矩形的颜色等,参考[Polygon](../classes/index.Polygon.html)
     * @param {boolean} options.clampToGround 是否贴地
     */
    constructor(engine: any, options?: {
        rectColor: string;
        editingPolygonParameter: Object;
        editedPolygonParameter: Object;
        clampToGround: boolean;
    });
    /** @private */
    private _rectData;
    /** @private */
    private _helpersData;
    /**
     * @protected
     * 是否允许编辑
     */
    protected _enableEdit: boolean;
    /** @private */ private _engine;
    /** @private */ private _options;
    /** @private */ private _rect;
    /** @private */ private _rectDataSource;
    /** @private */ private _helpers;
    /** @private */ private _helpersDataSource;
    /** @private */ private _completedDataSource;
    /** @private */ private _completedElement;
    /** @private */ private _isAdd;
    /** @private */ private _selectedIndex;
    /** @private */ private _transformIndex;
    /** @private */ private _raycaster;
    /** @private */ private _tempVector3;
    /** @private */ private _mapPlane;
    _clampToGround: boolean;
    /** @private */
    private initRect;
    /** @private */
    private initHelpers;
    /** @private */
    private initCompletedElement;
    /** @private */
    private graphInfo;
    /** @private */
    private _handleCompleteClick;
    set vertex(value: any);
    get vertex(): any;
    /** @private */
    private _handleAddClick;
    /**
     * @private
     * 得到终点，根据起点和终点计算其他的两个点
     */
    private _handleAddMove;
    /** @private */
    private _handleAddFinish;
    /** @private */
    private _handleNodeClick;
    /** @private */
    private _handleTransformChanging;
    /** @private */
    private _handleTransformChanged;
    /**
     * @private
     * 添加起点
     */
    private addNode;
    /**
     * @private
     * 除了对角点，其他点的位置都需要更新
     */
    private updateNode;
    /**
     * @private
     */
    private clearObjects;
    /** @private */
    private overwriteNodes;
    dispose(): void;
    _vertex: any;
    set data(value: any);
    /**
     * 绘制的矩形的数据信息
     */
    get data(): any;
}
import { Editor } from './Editor';
