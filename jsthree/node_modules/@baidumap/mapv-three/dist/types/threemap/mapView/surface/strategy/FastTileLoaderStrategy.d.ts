export class FastTileLoaderStrategy extends Strategy {
    isFastTileLoaderStrategy: boolean;
    /**
     * @internal
     * 每帧渲染的瓦片，存的是SurfaceTile，需要MapTile时通过SurfaceTile.dataTile获取
     */
    _renderedTiles: any[];
    /**
     * @internal
     * 每帧渲染的瓦片的Map
     * key: MapTile.key
     * value: MapTile
     * */
    _renderedTilesMap: Map<any, any>;
    /**
     * @internal
     * 主视图区域的瓦片在当前视野内加权层级信息
     */
    _viewportTilesMap: Map<any, any>;
    /**
     * @internal
     * 上次主视图区域的瓦片层级，用于判断是否需要重新计算主视图的瓦片层级信息
     */
    _lastViewportZLevel: number;
    /**
     * @internal
     * 缓冲级别，防止在临界点缩放时抖动
     */
    _hysteresis: null;
    /** @private */
    private _showDebug;
    /**
     * @internal
     * 开启限制主视野区域的瓦片层级平滑功能
     */
    _restrictViewportLevel: any;
    initDebugMeshes(): void;
    mesh: any;
    mesh1: any;
    mesh2: any;
    /**
     * 判断当前瓦片是否是指定祖先瓦片的子瓦片
     * @param {MapTile} currentTile 当前待检测瓦片
     * @param {MapTile} ancestorTile 祖先瓦片
     * @returns {boolean} 是否是子瓦片
     */
    _isAncestorTile: (currentTile: MapTile, ancestorTile: MapTile) => boolean;
    _preserveLastFrameChildrenTiles: (tile: any, renderedTiles: any) => number;
    _isTileRenderedInLastFrame: (tile: any) => boolean;
    _isTileAncestorRenderedInLastFrame: (tile: any) => true | undefined;
    _hideChildrenTiles: (renderedTiles: any, placeholderTiles: any, tile: any) => number;
    /**
     * 获取主视野区域的地理坐标范围，比 engine.map 的方式更激进
     * @returns {Box3} 地理坐标范围，坐标为投影坐标
     */
    getViewportBounds(engine: any): Box3;
    /**
     * 根据俯仰角计算NDC坐标的Y值因子，用于调整视角倾斜时的屏幕空间坐标。
     * @param {number} pitch 俯仰角度，单位为度
     * @param {number} threshold 俯仰角度的阈值，默认值为30度
     * @param {number} scaleFactor 控制主视野区域往近衰减速度，默认值为0.3
     * @returns {number} NDC坐标的Y值因子
     */
    getNdcYFactor(pitch: number, threshold?: number, scaleFactor?: number): number;
    computeTiles(engine: any, cameraPosition: any, frustum: any, renderState: any): {
        selectedTiles: any[];
        requestTilesQueue: any[][];
        placeholderTiles: any[];
    };
    /**
     * 计算主视口区域内瓦片的加权层级
     * @param {Array} tiles 主视口内的瓦片
     * @param {Map} viewportTilesMap 存储瓦片权重信息的Map
     * @returns {number} 返回加权后的目标层级
     */
    calcViewportWeightedZLevel(tiles: any[], viewportTilesMap: Map<any, any>): number;
    /**
     * 计算主视野区域内的瓦片
     * @param {Box3} projectionBounds 主视野区域的地理坐标范围
     * @param {Frustum} frustum 视锥体
     * @param {Vector3} cameraPosition 相机位置
     * @param {Array} tiles 瓦片数组
     * @param {Array} viewportTiles 主视野内的瓦片数组
     */
    _traverseViewportTiles: (projectionBounds: Box3, frustum: Frustum, cameraPosition: Vector3, tiles: any[], viewportTiles: any[]) => void;
    _computeIntersectTiles(frustum: any, cameraPosition: any, tile: any, renderedTiles: any, requestTiles: any, placeholderTiles: any, maxZLevel: any): MapTileRenderState;
    getPolygonArea(vertices: any): number;
    set showDebug(value: boolean);
    get showDebug(): boolean;
    set restrictViewportLevel(value: any);
    get restrictViewportLevel(): any;
}
import { Strategy } from './Strategy';
import { MapTileRenderState } from '../../geo/MapTileRenderState';
