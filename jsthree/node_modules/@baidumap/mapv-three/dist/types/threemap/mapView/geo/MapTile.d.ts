export const TILE_STATE_CREATED: 1;
export const TILE_STATE_LOADING: 2;
export const TILE_STATE_COMPLETED: 3;
export const TILE_STATE_FAILED: 4;
export const TILE_STATE_DISPOSED: 5;
export class MapTile {
    constructor(grid: any, z: any, x: any, y: any);
    x: any;
    y: any;
    z: any;
    compeleted: boolean;
    siblingIndex: number;
    /** @private */
    private _grid;
    /** @private */
    private _geoBoundingBox;
    /** @private */
    private _projectedCenter;
    /** @private */
    private _projectedBoundingBox;
    /** @private */
    private _targetCenter;
    /** @private */
    private _targetBoundingBox;
    /**
     * @type {number}
     * @private
     * 在目标投影下的LOD缩放比例，用于计算瓦片的LOD
     * 比如3857瓦片投影到地球后，赤道和极点的瓦片大小差异很大，需要根据缩放比例调整LOD
     */
    private _targetLODScaleRatio;
    /**
     * @type {number}
     * @private
     * 该瓦片在保持最佳视野状态下，1px能容忍的最大误差
     */
    private _targetSSESize;
    key: string;
    state: number;
    childrenKeys: any[];
    loaderConfig: any;
    updateBoundingBoxZ(zMin: any, zMax: any): void;
    set boundingBox(value: any);
    get boundingBox(): any;
    set projectedBoundingBox(value: any);
    /**
     * tile原始数据的boundingBox，数值为在原投影下的世界坐标
     */
    get projectedBoundingBox(): any;
    set geoBoundingBox(value: any);
    /**
     * tile在地球上的boundingBox，数值为地球坐标系下的经纬度
     */
    get geoBoundingBox(): any;
    get reverseY(): any;
    _reverseY: any;
    set grid(value: any);
    get grid(): any;
    set center(value: any);
    get center(): any;
    set projectedCenter(value: any);
    get projectedCenter(): any;
    set targetBoundingBox(value: any);
    /**
     * tile在目标投影下的boundingBox，数值为在目标投影下的世界坐标
     */
    get targetBoundingBox(): any;
    /**
     * tile在引擎projection下的中心点
     * targetCenter主要用于计算瓦片mesh的position
     * 在使用globeSubdivision的情况下，targetCenter是在geoBoundingBox中心点的投影
     * 在不使用globeSubdivision的情况下，targetCenter是boundingBox的中心点
     * @type {Vector3}
     */
    get targetCenter(): Vector3;
    get geoIntersectionOfTargetProjection(): any;
    _computeAvailableGeoBoundingBox(): void;
    _availableGeoBoundingBox: any;
    get availableGeoBoundingBox(): any;
    _computeTargetLODScaleRatio(): any;
    get targetLODScaleRatio(): number;
}
