export class TileManager {
    static TILE_DISPLAY_AFTER_ALL_SIBLINGS_READY: number;
    static TILE_DISPLAY_AFTER_ANY_SIBLINGS_READY: number;
    constructor(group: any, parameters?: {});
    /** @private */
    private _maxCacheSize;
    /** @private */
    private _maxDisplaySize;
    /** @private */
    private _displayTileAfterAllSiblingsReady;
    /** @private */
    private _displayParentTileWhileNotAllSiblingsReady;
    /** @private */
    private _cachedTiles;
    /** @private */
    private _delayedTiles;
    /** @private */
    private _requestingKeys;
    /** @private */
    private _delayedTileTTL;
    /** @private */
    private _tileLoadDelayTime;
    /** @private */
    private _upwardsSteps;
    /** @private */
    private _maxParallelRequests;
    /** @private */
    private _currentParallelRequests;
    tileLoader: null;
    _group: any;
    handleTileRemove: (tile: any, key: any) => void;
    /**
     * 使用指定的瓦片刷新当前视图
     * @param {*} tiles
     */
    refresh(tileTree: any, selectedTiles: any, camera: any): {
        renderedTiles: any[];
        hasDelayedTile: boolean;
        delayCount: number;
        createCount: number;
    };
    _checkLoadedParentTile: (tile: any, tileTree: any, renderedTilesMap: any) => any;
    _checkAnyChildReady: (tile: any) => true | undefined;
    _markTileChildrenSkipped: (tile: any, renderedTilesMap: any) => void;
    _scheduleChildTile: (tile: any, sourceTile: any) => Promise<void>;
    _scheduleTile: (tile: any) => Promise<void>;
    requestChildTiles: (childTiles: any) => Promise<void>;
    requestTiles: (tiles: any) => void;
    /**
     * 清理延时队列中的瓦片
     */
    _cleanDelayedTiles: () => void;
    isTileLoading: (key: any) => boolean;
    isTileLoaded: (key: any) => any;
    getCachedTile: (key: any) => any;
    clear(): void;
    dispose(): void;
    set maxDisplaySize(value: number);
    get maxDisplaySize(): number;
    set maxCacheSize(value: any);
    get maxCacheSize(): any;
    set maxCacheAge(value: any);
    get maxCacheAge(): any;
    set displayTileAfterAllSiblingsReady(value: boolean);
    get displayTileAfterAllSiblingsReady(): boolean;
    set displayParentTileWhileNotAllSiblingsReady(value: boolean);
    get displayParentTileWhileNotAllSiblingsReady(): boolean;
}
