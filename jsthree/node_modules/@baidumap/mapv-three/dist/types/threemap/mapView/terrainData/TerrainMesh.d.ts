export default TerrainMesh;
/**
 * A mesh plus related metadata for a single tile of terrain.  Instances of this type are
 * usually created from raw {@link TerrainData}.
 *
 * @alias TerrainMesh
 * @constructor
 *
 * @param {Cartesian3} center The center of the tile.  Vertex positions are specified relative to this center.
 * @param {Float32Array} vertices The vertex data, including positions, texture coordinates, and heights.
 *                       The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent
 *                       the Cartesian position of the vertex, H is the height above the ellipsoid, and
 *                       U and V are the texture coordinates.
 * @param {Uint8Array|Uint16Array|Uint32Array} indices The indices
 * describing how the vertices are connected to form triangles.
 * @param {number} indexCountWithoutSkirts The index count of the mesh not including skirts.
 * @param {number} vertexCountWithoutSkirts The vertex count of the mesh not including skirts.
 * @param {number} minimumHeight The lowest height in the tile, in meters above the ellipsoid.
 * @param {number} maximumHeight The highest height in the tile, in meters above the ellipsoid.
 * @param {BoundingSphere} boundingSphere3D A bounding sphere that completely contains the tile.
 * @param {Cartesian3} occludeePointInScaledSpace The occludee point of the tile, represented in ellipsoid-
 *                     scaled space, and used for horizon culling.  If this point is below the horizon,
 *                     the tile is considered to be entirely below the horizon.
 * @param {number} [vertexStride=6] The number of components in each vertex.
 * @param {OrientedBoundingBox} [orientedBoundingBox] A bounding box that completely contains the tile.
 * @param {TerrainEncoding} encoding Information used to decode the mesh.
 * @param {number[]} westIndicesSouthToNorth The indices of the vertices on the Western edge of the tile,
 * ordered from South to North (clockwise).
 * @param {number[]} southIndicesEastToWest The indices of the vertices on the Southern edge of the tile,
 * ordered from East to West (clockwise).
 * @param {number[]} eastIndicesNorthToSouth The indices of the vertices on the Eastern edge of the tile,
 * ordered from North to South (clockwise).
 * @param {number[]} northIndicesWestToEast The indices of the vertices on the Northern edge of the tile,
 * ordered from West to East (clockwise).
 *
 * @private
 */
declare class TerrainMesh {
    constructor(center: any, vertices: any, indices: any, indexCountWithoutSkirts: any, vertexCountWithoutSkirts: any, minimumHeight: any, maximumHeight: any, boundingSphere3D: any, occludeePointInScaledSpace: any, vertexStride: any, orientedBoundingBox: any, encoding: any, westIndicesSouthToNorth: any, southIndicesEastToWest: any, eastIndicesNorthToSouth: any, northIndicesWestToEast: any);
    /**
     * The center of the tile.  Vertex positions are specified relative to this center.
     * @type {Cartesian3}
     */
    center: Cartesian3;
    /**
     * The vertex data, including positions, texture coordinates, and heights.
     * The vertex data is in the order [X, Y, Z, H, U, V], where X, Y, and Z represent
     * the Cartesian position of the vertex, H is the height above the ellipsoid, and
     * U and V are the texture coordinates.  The vertex data may have additional attributes after those
     * mentioned above when the {@link TerrainMesh#stride} is greater than 6.
     * @type {Float32Array}
     */
    vertices: Float32Array;
    /**
     * The number of components in each vertex.  Typically this is 6 for the 6 components
     * [X, Y, Z, H, U, V], but if each vertex has additional data (such as a vertex normal), this value
     * may be higher.
     * @type {number}
     */
    stride: number;
    /**
     * The indices describing how the vertices are connected to form triangles.
     * @type {Uint8Array|Uint16Array|Uint32Array}
     */
    indices: Uint8Array | Uint16Array | Uint32Array;
    /**
     * The index count of the mesh not including skirts.
     * @type {number}
     */
    indexCountWithoutSkirts: number;
    /**
     * The vertex count of the mesh not including skirts.
     * @type {number}
     */
    vertexCountWithoutSkirts: number;
    /**
     * The lowest height in the tile, in meters above the ellipsoid.
     * @type {number}
     */
    minimumHeight: number;
    /**
     * The highest height in the tile, in meters above the ellipsoid.
     * @type {number}
     */
    maximumHeight: number;
    /**
     * A bounding sphere that completely contains the tile.
     * @type {BoundingSphere}
     */
    boundingSphere3D: BoundingSphere;
    /**
     * The occludee point of the tile, represented in ellipsoid-
     * scaled space, and used for horizon culling.  If this point is below the horizon,
     * the tile is considered to be entirely below the horizon.
     * @type {Cartesian3}
     */
    occludeePointInScaledSpace: Cartesian3;
    /**
     * A bounding box that completely contains the tile.
     * @type {OrientedBoundingBox}
     */
    orientedBoundingBox: OrientedBoundingBox;
    /**
     * Information for decoding the mesh vertices.
     * @type {TerrainEncoding}
     */
    encoding: TerrainEncoding;
    /**
     * The indices of the vertices on the Western edge of the tile, ordered from South to North (clockwise).
     * @type {number[]}
     */
    westIndicesSouthToNorth: number[];
    /**
     * The indices of the vertices on the Southern edge of the tile, ordered from East to West (clockwise).
     * @type {number[]}
     */
    southIndicesEastToWest: number[];
    /**
     * The indices of the vertices on the Eastern edge of the tile, ordered from North to South (clockwise).
     * @type {number[]}
     */
    eastIndicesNorthToSouth: number[];
    /**
     * The indices of the vertices on the Northern edge of the tile, ordered from West to East (clockwise).
     * @type {number[]}
     */
    northIndicesWestToEast: number[];
}
