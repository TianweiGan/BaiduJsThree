/**
 * 百度矢量瓦片提供者，用于加载和渲染百度地图的矢量瓦片数据。
 * 支持在线和离线两种模式，可以处理多种投影方式。
 *
 * 主要功能：
 * - 支持百度地图在线矢量瓦片加载
 * - 支持离线矢量瓦片加载
 * - 支持多种投影方式（Web墨卡托、百度墨卡托、地理坐标）
 * - 支持矢量数据的样式配置
 * - 支持POI标签的显示
 *
 * 需要使用百度地图的AK，请在{@link BaiduMapConfig}中设置。
 * @category MapView
 * @example
 * ```javascript
 * // 创建在线矢量瓦片提供者
 * const provider = new BaiduVectorTileProvider({
 *     ak: 'your_ak_here',
 *     displayOptions: {
 *         // 显示配置
 *     }
 * });
 *
 * // 创建DuGIS离线矢量瓦片提供者
 * const offlineProvider = new BaiduVectorTileProvider({
 *     isOffline: true,
 *     url: 'http://dugis-offline-server',
 * });
 * ```
 */
export class BaiduVectorTileProvider extends VectorTileProvider {
    /**
     * @param {object} options 配置选项
     * @param {string} [options.ak] 百度地图AK，在线模式必填
     * @param {boolean} [options.isOffline=false] 是否为离线dugis模式
     * @param {string} [options.url] 离线模式下的瓦片dugis服务器地址
     * @param {string} [options.staticUrl] 离线模式下的静态资源服务器地址
     * @param {string} [options.projection] 离线模式下的投影方式，默认为'mapvthree.PROJECTION_WEB_MERCATOR'
     * @param {object} [options.displayOptions] 显示配置选项
     * @param {boolean} [options.displayOptions.base=true] 是否显示基础面
     * @param {boolean} [options.displayOptions.link=true] 是否显示道路
     * @param {boolean} [options.displayOptions.building=true] 是否显示3D建筑物
     * @param {boolean} [options.displayOptions.poi=true] 是否显示POI
     * @param {boolean} [options.displayOptions.flat=true] 是否显示成压平模式
     */
    constructor(options?: {
        ak?: string | undefined;
        isOffline?: boolean | undefined;
        url?: string | undefined;
        staticUrl?: string | undefined;
        projection?: string | undefined;
        displayOptions?: {
            base?: boolean | undefined;
            link?: boolean | undefined;
            building?: boolean | undefined;
            poi?: boolean | undefined;
            flat?: boolean | undefined;
        } | undefined;
    });
    /**
     * 瓦片提供者名称
     * @readonly
     */
    readonly name: "BaiduVectorTileProvider";
    /**
     * 是否为百度地图提供者
     * @readonly
     */
    readonly isBaiduProvider: true;
    /** @private */ private _shouldRenderPlaceholder;
    /** @private */ private _isAttach;
    /** @private */ private _defaultStartLevel;
    /** @private */ private _defaultMaxLevel;
    /** @private */ private _labels;
    _displayOptions: {
        base?: boolean | undefined;
        link?: boolean | undefined;
        building?: boolean | undefined;
        poi?: boolean | undefined;
        flat?: boolean | undefined;
    } | undefined;
    _url: string | undefined;
    _styleUrl: any;
    _isOffline: boolean | undefined;
    _staticUrl: string | undefined;
    _sourceProjectionName: any;
    _isWebMercator: boolean;
    _defaultMinLevel: number;
    /**
     * 异步初始化方法
     * @protected
     */
    protected _asyncInit(): Promise<void>;
    _dataLoader: AsyncDataTileLoader | undefined;
    _loadStyle: () => Promise<void>;
    _getMapStyleFile: (style: any) => Promise<void>;
    _vctMapStyleDomain: string | undefined;
    _vctMapStyleUrl: string | undefined;
    getTileURL(z: any, x: any, y: any, tile: any): string;
    /**
     * 获取在线瓦片URL
     * @param {number} z 缩放级别
     * @param {number} x 瓦片X坐标
     * @param {number} y 瓦片Y坐标
     * @param {object} tile 瓦片对象
     * @returns {string} 瓦片URL
     * @private
     */
    private _getOnlineTileURL;
    /**
     * 获取离线瓦片URL
     * @param {number} z 缩放级别
     * @param {number} x 瓦片X坐标
     * @param {number} y 瓦片Y坐标
     * @param {object} tile 瓦片对象
     * @returns {string} 瓦片URL
     * @private
     */
    private _getOfflineTileURL;
    /**
     * 获取WebWorker选项
     * @internal
     * @returns {object} 工作者选项
     */
    getWorkerOptions(): object;
    /**
     * 获取请求选项
     * @internal
     * @param {object} tile 瓦片对象
     * @returns {object} 请求选项
     */
    getFetchOptions(tile: object): object;
    /**
     * 请求瓦片数据
     * @internal
     * @param {object} tile 瓦片对象
     * @returns {Promise<Group>} 包含瓦片数据的Group对象
     */
    doRequestTileData(tile: object): Promise<Group>;
    _calculateTolerance(surfaceTile: any, engine: any, label: any): number;
    /**
     * 添加POI标签
     * @param {object} surfaceTile 表面瓦片对象
     * @param {Engine} engine 引擎实例
     * @private
     */
    private _addTilePOI;
    _removeTilePOI(surfaceTile: any, engine: any): void;
    /**
     * @protected
     */
    protected onSurfaceTileAdded(surfaceTile: any, engine: any): void;
    /**
     * @protected
     */
    protected onSurfaceTileRemoved(surfaceTile: any, engine: any): void;
    onSurfaceTileSSEChanged(surfaceTile: any, engine: any): void;
    addAllSymbols(): void;
    removeAllSymbols(): void;
}
import { VectorTileProvider } from './VectorTileProvider';
import { AsyncDataTileLoader } from '../AsyncDataTileLoader';
