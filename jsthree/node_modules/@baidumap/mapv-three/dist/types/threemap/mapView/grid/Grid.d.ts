export class Grid {
    constructor(engine: any, sourceProjection: any, targetProjection: any);
    /** @private */
    private _minLevel;
    /** @private */
    private _maxLevel;
    /** @private */
    private _useGeoSubdivision;
    /** @private */
    private _projectBoxWithFourConrner;
    /** @private */
    private _unprojectBoxWithFourConrner;
    /** @private */
    private _shouldCheckTileBoundingRange;
    /** @private */
    private _pixelSizes;
    _engine: any;
    _sourceProjection: any;
    _targetProjection: any;
    getRootTiles(): never[];
    getRootBoundingBox(): null;
    getPixelSizeByLevel(level: any): any;
    getNextLevel(z: any): any;
    shouldCreateChildren(tile: any): boolean;
    getNextLevelTileCount(level: any, nextLevel: any): number;
    getQuadTreeLevelGap(minZ: any, maxZ: any): number;
    /**
     * 创建子瓦片集合
     *
     * @param {MapTile} tile 当前瓦片实例
     * @returns {Array<MapTile>} 返回包含所有子瓦片的数组
     */
    createTileChildren(tile: MapTile): Array<MapTile>;
    isTileInBoundingRange(tile: any): boolean;
    getTileSizeAtLevel(level: any): void;
    getTileCoordX(x: any, tileSize: any, clampToEdge?: boolean): void;
    getTileCoordY(y: any, tileSize: any, clampToEdge?: boolean): void;
    _alignTileCoord(coord: any): any;
    computeCoverageTilesCoord(tile: any, limitMinLevel?: number, limitMaxLevel?: number): number[][];
    computeTileCoverageRect(tile1: any, tile2: any): number[];
    updateTileHeights(tile: any, heights: any): void;
    getTileReverseY(tile: any): number;
    _updateLODConfig(): void;
    update(): void;
    set engine(engine: any);
    get engine(): any;
    set maxLevel(value: number);
    get maxLevel(): number;
    set minLevel(value: number);
    get minLevel(): number;
    get useGeoSubdivision(): boolean;
    get sourceProjection(): any;
    get targetProjection(): any;
    get zeroLevelPixelSize(): number;
    _zeroLevelPixelSize: number | undefined;
}
import { MapTile } from '../geo/MapTile';
