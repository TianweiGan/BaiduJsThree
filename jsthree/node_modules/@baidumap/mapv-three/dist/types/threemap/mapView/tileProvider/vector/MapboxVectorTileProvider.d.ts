export class MapboxVectorTileProvider extends VectorTileProvider {
    constructor(options?: {});
    /** @private */
    private _shouldRenderPlaceholder;
    /** @private */
    private _defaultStartLevel;
    /** @private */
    private _defaultMaxLevel;
    /** @private */
    private _defaultMaterials;
    /** @private */
    private _symbols;
    /** @private */
    private _materialManager;
    _style: any;
    _accessToken: any;
    _defaultStyle: any;
    _dispalyOptions: any;
    _options: {};
    /**
     * 异步初始化方法。
     */
    _asyncInit(): Promise<void>;
    _dataLoader: AsyncDataTileLoader | undefined;
    _loadStyle(): Promise<void>;
    _stylePath: string | undefined;
    _sourceUrl: any;
    _styleJSON: any;
    _defaultStyleJSON: any;
    _spriteData: {
        [_: string]: import("../../mapbox/sprite").SpriteDataItem;
    } | undefined;
    _spriteImage: any;
    spriteTexture: any;
    _ready: boolean | undefined;
    /**
     * @private
     * @returns {Promise}
     */
    private _getTileJson;
    /**
     * @returns {Promise}
     */
    _getStyleJSON(): Promise<any>;
    getTileURL(z: any, x: any, y: any, tile: any): any;
    getWorkerOptions(): {
        displayOptions: any;
    };
    /**
     * 获取瓦片数据并返回对应的Group对象
     * @param {*} tile
     * @returns {Group} 返回一个包含瓦片数据的Group对象
     */
    doRequestTileData(tile: any): Group;
    _hasBufferData(bufferData: any): any;
    _getBackgroundMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getFillOpaqueMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getFillPatternMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getFillTranslucentMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getLineOpaqueMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getLineTranslucentMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getLineDashedMesh(data: any, meshType: any, maxLayerIndex: any, scale: any): any;
    _getExtrusionOpaqueMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getExtrusionTranslucentMesh(data: any, meshType: any, maxLayerIndex: any): any;
    _getMaterial(type: any): any;
    _setupSymbolData(symbolData: any, group: any): void;
    _addTilePOI(surfaceTile: any, engine: any): void;
    _removeTilePOI(surfaceTile: any, engine: any): void;
    onSurfaceTileAdded(surfaceTile: any, engine: any): void;
    onSurfaceTileRemoved(surfaceTile: any, engine: any): void;
    addAllSymbols(): void;
    removeAllSymbols(): void;
    set materialManager(materialManager: null);
    get materialManager(): null;
}
import { VectorTileProvider } from './VectorTileProvider';
import { AsyncDataTileLoader } from '../AsyncDataTileLoader';
