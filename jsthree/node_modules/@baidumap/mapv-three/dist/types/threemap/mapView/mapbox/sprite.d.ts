export default class Sprite {
    /**
     * @param {string} spriteUrl
     * @param {string} [accessToken]
     */
    constructor(spriteUrl: string, accessToken?: string);
    /**
     * @private
     * @type {string}
     */
    private _spriteUrl;
    /**
     * @private
     * @type {string}
     */
    private _accessToken;
    /**
     * @private
     * @type {number}
     */
    private _channels;
    /**
     * @public
     * @returns {Promise<{data: {[_: string: SpriteDataItem]}, image: HTMLImageElement}>}
     */
    public loadSpriteData(): Promise<{
        data: {
            [_: string]: SpriteDataItem;
        };
    }>;
    /**
     * @private
     * @returns {URL}
     */
    private _getSpriteUrlObj;
    /**
     * @private
     * @returns {Promise<{[_: string: SpriteDataItem]}>}
     */
    private _loadSpriteJson;
    /**
     * @private
     * @returns {Promise<HTMLImageElement>}
     */
    private _loadSpriteImage;
    /**
     * @private
     * @param {{[_: string: SpriteDataItem]}} json
     * @param {HTMLImageElement} image
     * @returns {{[_: string: SpriteDataItem]}}
     */
    private _generateIconUv;
    /**
     * @private
     * @param {SpriteData} json
     * @param {ImageData} imageData
     * @returns {{[id: string: SpriteDataItem]}}
     */
    private _generateSpriteData;
    /**
     * @private
     * @param {ImageData} srcImg
     * @param {RGBAImage} dstImg
     * @param {{x: number, y: number}} srcPt
     * @param {{width: number, height: number}} size
     * @returns {RGBAImage}
     */
    private _copyImage;
    /**
     * @private
     * @param {ImageBitmap} imageBitmap
     * @returns {ImageData}
     */
    private _getImageData;
}
export type RGBAImage = {
    width: number;
    height: number;
    data: Uint8Array;
};
export type SpriteDataItem = {
    width: number;
    height: number;
    data: Uint8Array;
    pixelRatio: number;
    stretchX?: Array<Array<number>> | undefined;
    stretchY?: Array<Array<number>> | undefined;
    content?: number[] | undefined;
    sdf?: any | undefined;
    uvs: number[];
};
