/**
 * 地图表面一层覆盖层
 * 负责根据视野和网格计算出需要加载的瓦片，向数据层请求瓦片，并将瓦片显示到地图上
 *
 * @category Internal
 */
export class MapSurface {
    constructor(options?: {});
    name: string;
    /** @private */
    private _lodScaleFactor;
    /** @private */
    private _sseFactor;
    /** @private */
    private _minLevel;
    /** @private */
    private _maxLevel;
    /** @private */
    private _surfaceTileManager;
    /** @private */
    private _showTileBoundingBox;
    /** @private */
    private _showTileDebugLabel;
    /** @private */
    private _debugLabelIds;
    /** @private */
    private _placeholderMeshesLastFrame;
    /** @private */
    private _freezeUpdate;
    /** @private */
    private _maxRequestTilesPerFrame;
    /** @private */
    private _enableHorizonCulling;
    /** @private */
    private _selectedTilesMapLastFrame;
    /** @private */
    private _selectedTilesLastFrame;
    /** @private */
    private _showGroundWireframe;
    _id: number;
    _quadtree: TileQuadtree | null;
    _placeholder: Placeholder | null;
    _options: {};
    statistics: {
        visited: number;
        used: number;
        rendered: number;
        request: number;
        unstable: number;
    };
    _currentStatistics: {
        visited: number;
        used: number;
        rendered: number;
        request: number;
        unstable: number;
    };
    _objectGroup: any;
    _boundingBoxGroup: any;
    _groundObjectGroup: any;
    /**
     * 设置瓦片加载策略, {@link RasterSurface}默认使用HierarchicalTileLoaderStrategy,
     * {@link VectorSurface}默认使用FastTileLoaderStrategy
     */
    set strategy(strategy: any);
    /**
     * 获取瓦片加载策略
     */
    get strategy(): any;
    _getCurrentGrid(): void;
    computeDistanceToTile(tile: any, cameraPosition: any, mode: any, mapProjection: any, ellipsoid: any): any;
    clearTilesInView(): void;
    /**
     * @internal
     * 更新视图，根据相机位置和视锥体更新视图。
     * @param cameraPosition {Object} 相机位置。
     * @param frustum {Frustum} 视锥体。
     * @param renderState {Object} 渲染状态。
     */
    updateView(engine: any, cameraPosition: Object, frustum: Frustum, renderState: Object): void;
    _currentOccluder: any;
    _getDebugLabelId(surfaceTile: any): string;
    _onBeforeSceneRender(engine: any, scene: any, camera: any, renderState: any): void;
    _groundSceneRenderer: GroundSceneRenderer | undefined;
    _requestTilesInArray(tiles: any, number: any, onlyRequestGeometry?: boolean): void;
    _selectCurrentFrameRequestTiles(tiles: any, number: any): any;
    beginFrame(renderState: any): void;
    endFrame(renderState: any): void;
    _computeOccludeePoint(tile: any, occluder: any): any;
    _computeOccludeePoint2(tile: any, occluder: any): any;
    updateTileBoundingRegion(tile: any, tileProvider: any, renderState: any): void;
    screenSpaceError(tile: any): number;
    reverseScreenSpaceErrorZ(tile: any): number;
    projectBoundingBoxToNdc(tile: any): any[][];
    _computeTileVisibility(frustum: any, tile: any): any;
    _computeTileVisibility3D(frustum: any, boundingVolume: any): number;
    _naturalOrderChildTiles(tiles: any, cameraPosition: any): any[];
    _createRootTiles(): void;
    _rootTiles: any;
    /**
     * @internal
     * 显示一帧的加载日志
     */
    showLoadLogInOneFrame(): void;
    onSurfaceTileAdded(tile: any): void;
    onSurfaceTileRemoved(tile: any): void;
    onSurfaceTileSSEChanged(tile: any): void;
    dispose(): void;
    set quadMap(quadMap: any);
    get quadMap(): any;
    _quadMap: any;
    /**
     * 设置是否显示瓦片包围盒
     */
    set showTileBoundingBox(value: boolean);
    /**
     * 获取是否显示瓦片包围盒
     */
    get showTileBoundingBox(): boolean;
    /**
     * 设置是否显示瓦片调试标签
     */
    set showTileDebugLabel(value: boolean);
    /**
     * 获取是否显示瓦片调试标签
     */
    get showTileDebugLabel(): boolean;
    /**
     * 设置是否冻结瓦片更新
     */
    set freezeUpdate(value: boolean);
    /**
     * 获取是否冻结瓦片更新
     */
    get freezeUpdate(): boolean;
    set enableHorizonCulling(value: boolean);
    get enableHorizonCulling(): boolean;
    get tileManager(): null;
    /**
     * 设置是否加载兄弟瓦片
     */
    set loadSiblings(value: any);
    /**
     * 获取是否加载兄弟瓦片
     */
    get loadSiblings(): any;
    set sseFactor(value: number);
    get sseFactor(): number;
    /**
     * 设置细节层次缩放因子
     */
    set lodScaleFactor(value: number);
    /**
     * 获取细节层次缩放因子
     */
    get lodScaleFactor(): number;
    set showGroundWireframe(value: boolean);
    get showGroundWireframe(): boolean;
    _groundWireframeMaterial: any;
    _strategy: any;
    get placeholder(): Placeholder;
}
import { TileQuadtree } from '../geo/TileQuadtree';
import { Placeholder } from './Placeholder';
import { GroundSceneRenderer } from './GroundSceneRenderer';
