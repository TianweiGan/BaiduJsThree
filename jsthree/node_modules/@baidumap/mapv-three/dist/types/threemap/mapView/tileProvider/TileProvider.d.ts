export const INIT_STATE_UNINITIALIZED: 0;
export const INIT_STATE_INITIALIZING: 1;
export const INIT_STATE_INITIALIZED: 2;
export const INIT_STATE_FAILED: 3;
/**
 * 瓦片提供者，负责瓦片数据的请求和缓存 <br/>
 * 该类是所有瓦片提供者的**抽象基类，不可直接使用，需要使用子类。**
 *
 * @category Internal
 */
export class TileProvider {
    /**
     * @param {object} options 配置
     * @param {Projection} options.targetProjection 目标投影
     * @param {number} options.minLevel 最小层级
     * @param {number} options.maxLevel 最大层级
     * @param {number} options.startLevel 起始层级
     * @param {number} options.maxCacheSize 最大缓存大小
     */
    constructor(options?: {
        targetProjection: Projection;
        minLevel: number;
        maxLevel: number;
        startLevel: number;
        maxCacheSize: number;
    });
    name: string;
    /**
     * @private
    */
    private _sourceProjection;
    /**
     * @private
    */
    private _targetProjection;
    /**
     * @private
     * @type {TileQuadtree}
     * */
    private _quadtree;
    /**
     * @private
     * @type {LRUCache}
     * */
    private _cache;
    /**
     * @private
     * @type {Grid}
     * */
    private _grid;
    /**
     * @private
     * 支持的投影
     */
    private _supportedTargetProjectionNames;
    /**
     * @private
     * 是否支持所有投影
     */
    private _supportAllProjections;
    /**
     * @private
     * 是否支持当前投影
     * */
    private _compatible;
    /**
     * @private
     * @type {number}
     * */
    private _initState;
    /**
     * @private
     * 用于瓦片最大级数不够预期级数时，向上采样
     * 等于0时超过栅格图最大级数不再向上采样，会返回空瓦片
     */
    private _desiredUpperSampleLevel;
    /**
       * @private
       * 期望层级的瓦片加载过程中向上采样级数
       */
    private _loadingUpperSampleLevel;
    /**
     * @private
     * @type {number}
     * */
    private _maxCacheSize;
    /**
     * @private
     * @type {number}
     * 最大层级
     * */
    private _maxLevel;
    /**
     * @private
     * @type {number}
     * 最小层级，displayMinLevel的含义
     * */
    private _minLevel;
    /**
     * @private
     * @type {number}
     * 网格的初始层级
     * */
    private _startLevel;
    /**
     * @private
     * 是否检测瓦片是否可用，一般情况下根据level即可确定，不需要检测，
     * 像cesiumTerrain的特殊情况需要检测
     * */
    private _shouldCheckTileAvailable;
    /**
     * @private
     * 不考虑瓦片加载状态，默认瓦片的加载状态对显示无影响，一般用于debug图层
     */
    private ignoreLoadingState;
    /**
     * @private
     */
    private _requestingCount;
    /**
     * @private
     */
    private _maxParallelRequestNum;
    /**
     * @private
     * 记录请求阶段里的数量和耗时信息
     */
    private enablePeriodRequestLog;
    /**
     * @private
     */
    private _periodRequestLogCount;
    /**
     * @private
     */
    private _periodRequestLogStartTime;
    /**
     * @private
     * 是否能够上采样
     */
    private _canUpsample;
    /**
     * @private
     * 因为墨卡托投影的数据较多，故可设置_useWebMeractorProjectionAndGrid=true来取代initProjectionAndGrid
     */
    private _useWebMeractorProjectionAndGrid;
    _needFeedback: any;
    statistics: {
        loading: number;
        cached: number;
    };
    _init(): void;
    _inited: boolean | undefined;
    _initWebMercatorProjectionAndGrid(): void;
    /**
     * 初始化网格和投影，可根据需要在子类中重写
     */
    initProjectionAndGrid(): void;
    _freeResources(): void;
    beginFrame(renderState: any): void;
    _usedTilesNum: number | undefined;
    _usedTiles: {} | undefined;
    _needsClearCache: boolean | undefined;
    endFrame(renderState: any): void;
    isReady(): boolean;
    onTileDispose(tile: any): void;
    handleRemove: (tile: any, key: any) => void;
    _logRequestStart: () => void;
    _logRequestEnd: () => void;
    _markTileStateListenersNeedsUpdate: (tile: any) => void;
    _initOrUpdateTileStateListeners: (tile: any, listenrObject: any) => void;
    requestTileData(tile: any, stateListenerObject: any): Promise<void>;
    getGroundTileData(tile: any): null;
    getTile(z: any, x: any, y: any, targetTile: any, stateListenerObject: any): any;
    markTileUsed(tile: any): void;
    _tileLevelInRange(level: any): boolean;
    computeCoverageTilesCoord(targetTile: any): any;
    clearCache(): void;
    set maxCacheSize(value: number);
    get maxCacheSize(): number;
    set desiredUpperSampleLevel(value: number);
    get desiredUpperSampleLevel(): number;
    set loadingUpperSampleLevel(value: number);
    get loadingUpperSampleLevel(): number;
    get grid(): Grid;
    get compatible(): boolean;
    get projection(): any;
    /**
     * 获取源投影
     */
    get sourceProjection(): any;
    /**
     * 设置目标投影
     */
    set targetProjection(value: any);
    /**
     * 获取目标投影
     */
    get targetProjection(): any;
    get initState(): number;
    set maxLevel(value: number);
    /**
     * 获取最大等级
     */
    get maxLevel(): number;
    set minLevel(value: number);
    /**
     * 获取最小等级
     */
    get minLevel(): number;
    set maxParallelRequestNum(value: number);
    get maxParallelRequestNum(): number;
    set cacheMaxSize(value: any);
    get cacheMaxSize(): any;
}
