/**
 * 地图视图<br/>
 * 用于承载地图底图数据的容器视图，支持多种瓦片数据加载，包括地形、影像、矢量等<br/>
 * 开发者可以调用`addSurface`方法添加自定义瓦片数据加载，也可以调用`removeSurface`方法移除瓦片数据加载<br/>
 * surface包括：
 * - {@link RasterSurface}：用于加载地形、影像等瓦片数据<br/>
 * - {@link VectorSurface}：用于加载矢量数据<br/>
 * surface具体的数据由{@link TileProvider}提供，开发者可以传入自定义的{@link TileProvider}实现自定义瓦片数据加载<br/>
 *
 * @category MapView
 * @example
 * ```javascript
 * const mapView = new MapView();
 * engine.add(mapView);
 * mapView.addSurface(new RasterSurface(terrainProvider, imageryProviders));
 * ```
 */
export class MapView {
    /**
     * @param {Object} options 选项参数
     * @param {RasterSurface} options.rasterSurface - raster surface，如果提供，terrainProvider和imageryProviders无效
     * @param {TerrainProvider} options.terrainProvider - 地形提供者，如果不提供，则默认使用{@link PlaneTerrainTileProvider}
     * @param {ImageryProvider[]} options.imageryProviders - 影像提供者，如果不提供，则默认使用{@link BingImageryTileProvider}
     * @param {VectorSurface} options.vectorSurface - vector surface，如果提供，vectorProvider无效
     * @param {VectorProvider} options.vectorProvider - 矢量提供者
     * @param {Object} options.vectorSurfaceOptions - vector surface选项，将传入{@link VectorSurface.constructor}
     */
    constructor(options?: {
        rasterSurface: RasterSurface;
        terrainProvider: TerrainProvider;
        imageryProviders: ImageryProvider[];
        vectorSurface: VectorSurface;
        vectorProvider: VectorProvider;
        vectorSurfaceOptions: Object;
    });
    isQuadMap: boolean;
    /**
     * @internal
     * 是否禁止瓦片更新
     */
    _freezeUpdate: boolean;
    /**
     * @internal
     * 细节层级缩放量
     */
    _lodScaleFactor: number;
    /**
     * @internal
     * 相机远端距离百分比，据此参数可以让tile加载部分视野，可提升性能
     */
    _cameraFarRatio: number;
    /**
     * @internal
     * 相机对象
     */
    _camera: null;
    /**
     * @internal
     * 上次瓦片更新的时间
     */
    _lastUpdateTime: number;
    /**
     * @internal
     * 瓦片更新的延时时间
     */
    _delayUpdateTime: number;
    /** @internal */
    _delayUpdateTimeHandler: null;
    /**
     * @internal
     * 瓦片的限制边界，超出限制边界的瓦片不显示
     */
    _restrictedBounds: any[];
    /** @internal */
    _engine: any;
    /** @internal */
    _grid: any;
    /** @internal */
    _options: {
        rasterSurface: RasterSurface;
        terrainProvider: TerrainProvider;
        imageryProviders: ImageryProvider[];
        vectorSurface: VectorSurface;
        vectorProvider: VectorProvider;
        vectorSurfaceOptions: Object;
    };
    /** @internal */
    _surfaces: any[];
    /**
     * 添加一层surface
     * */
    addSurface(surface: any): void;
    /**
     * 添加一层地形、影像瓦片数据加载的surface
     * @param {TerrainProvider} terrainProvider - 地形提供者
     * @param {ImageryProvider[]} imageryProviders - 影像提供者
     * @param {Object} options - 选项参数
     * @returns {RasterSurface} 返回添加的surface
     */
    addRasterSurface(terrainProvider: TerrainProvider, imageryProviders: ImageryProvider[], options: Object): RasterSurface;
    /**
     * 添加一层矢量瓦片数据加载的surface
     * @param {VectorProvider} vectorProvider - 矢量提供者
     * @param {Object} options - 选项参数
     * @returns {VectorSurface} 返回添加的surface
     */
    addVectorSurface(vectorProvider: VectorProvider, options: Object): VectorSurface;
    /**
     * 移除一层surface
     * @param {Surface} surface - 要移除的surface
     */
    removeSurface(surface: Surface): void;
    setTerrainProvider(terrainProvider: any): void;
    setImageryProviders(imageryProviders: any): void;
    setImageryProvider(imageryProvider: any): void;
    setVectorProvider(vectorProvider: any, vectorSurfaceOptions: any): void;
    _vectorSurface: VectorSurface | undefined;
    getImageryProviders(): ImageryProvider[] | null;
    /**
     * @protected
     * 创建瓦片加载器
    */
    protected createTileLoader(): void;
    /**
     * @protected
     */
    protected createGrid(engine: any): void;
    /**
     * @protected
     * 添加到engine中时创建瓦片加载器和格网
     */
    protected afterAddToEngine(engine: any): void;
    _projection: any;
    _initDefaultSurfaces(): void;
    _rasterSurface: RasterSurface | undefined;
    beforeRemoveFromEngine(engine: any): void;
    /**
     * @protected
     * 每次渲染前判断瓦片加载器是否准备好及能否更新瓦片，重新获取可见瓦片并刷新视图
     * @param {Engine} engine
     * @param {Object3D} scene
     * @param {Camera} camera
     * @param {object} renderState
     * @returns
     */
    protected onBeforeScenePrepareRender(engine: Engine, scene: Object3D, camera: Camera, renderState: object): void;
    onBeforeSceneRender(engine: any, scene: any, camera: any, renderState: any): void;
    _updateSurfaces(engine: any, scene: any, camera: any, renderState: any): void;
    /**
     * @internal
     * 更新相机信息
     * @param {*} camera
     * tan(fov/2)*distance/(screenHeight/2)=pixelSize
     */
    _updateCameraInfo: (engine: any, camera: any) => void;
    _sseDenominator: number | undefined;
    _pitchRatio: any;
    getKeyByValue: (obj: any, value: any) => string | null;
    /**
     * @internal
     * 当瓦片加载完成后，若为分层地图，保存其层级信息z
     * @param {Event} e
     */
    handleTileLoaded: (e: Event) => void;
    /**
     * @protected
     */
    protected handleTileDispose: (e: any) => void;
    /**
     * @protected
     */
    protected onTileAdded(tile: any): void;
    /**
     * @protected
     */
    protected onTileRemoved(tile: any): void;
    /**
     * @protected
     */
    protected onTileDisposed(tile: any): void;
    /**
     * @internal 暂不开放
     * 添加限制边界，超出该边界的瓦片不会显示
     * @param {Array} boundArray p1, p2
     */
    addRestrictedBoundingBox: (p1: any, p2: any) => any;
    /**
     * @internal 暂不支持
     * 移除限制边界
     * @param {Vector3} bound
     */
    removeRestrictedBounds: (bound: Vector3) => void;
    /**
     * 销毁mapView
     */
    dispose(): void;
    printSurfacesStatistics(): void;
    _getCurrentCamera(): any;
    showCameraFrustum(): void;
    _lockedCamera: any;
    _cameraHelper: any;
    destroyCameraHelper(): void;
    /**
     * 设置是否允许瓦片更新
     */
    set freezeUpdate(value: boolean);
    /**
     * 是否允许瓦片更新
     */
    get freezeUpdate(): boolean;
    /**
     * 设置细节层次缩放值
     */
    set lodScaleFactor(value: number);
    /**
     * 细节层次缩放值
     */
    get lodScaleFactor(): number;
    set cameraFarRatio(value: number);
    /**
     * @internal 暂不开放
     * 相机视椎体远端面距离百分比，通过该参数可以让tile加载部分视野
     */
    get cameraFarRatio(): number;
    /**
     * 获取地形瓦片数据加载的surface
     */
    get rasterSurface(): RasterSurface | undefined;
    /**
     * 获取矢量瓦片数据加载的surface
     */
    get vectorSurface(): VectorSurface | undefined;
    /**
     * 获取所有surface
     */
    get surfaces(): any[];
}
import { RasterSurface } from '../surface/RasterSurface';
import { VectorSurface } from '../surface/VectorSurface';
