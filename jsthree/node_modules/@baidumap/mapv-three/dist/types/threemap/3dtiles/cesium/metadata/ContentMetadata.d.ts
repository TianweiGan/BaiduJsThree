export default ContentMetadata;
declare class ContentMetadata {
    constructor(options: any);
    _class: any;
    _properties: any;
    _extensions: any;
    _extras: any;
    /**
     * The class that properties conform to.
     *
     * @memberof ContentMetadata.prototype
     * @type {MetadataClass}
     * @readonly
     * @private
     */
    private readonly get class();
    /**
     * Extra user-defined properties.
     *
     * @memberof ContentMetadata.prototype
     * @type {object}
     * @readonly
     * @private
     */
    private readonly get extras();
    /**
     * An object containing extensions.
     *
     * @memberof ContentMetadata.prototype
     * @type {object}
     * @readonly
     * @private
     */
    private readonly get extensions();
    /**
     * Returns whether the content has this property.
     *
     * @param {string} propertyId The case-sensitive ID of the property.
     * @returns {boolean} Whether the content has this property.
     * @private
     */
    private hasProperty;
    /**
     * Returns whether the content has a property with the given semantic.
     *
     * @param {string} semantic The case-sensitive semantic of the property.
     * @returns {boolean} Whether the content has a property with the given semantic.
     * @private
     */
    private hasPropertyBySemantic;
    /**
     * Returns an array of property IDs.
     *
     * @param {string[]} [results] An array into which to store the results.
     * @returns {string[]} The property IDs.
     * @private
     */
    private getPropertyIds;
    /**
     * Returns a copy of the value of the property with the given ID.
     * <p>
     * If the property is normalized the normalized value is returned.
     * </p>
     *
     * @param {string} propertyId The case-sensitive ID of the property.
     * @returns {*} The value of the property or <code>undefined</code> if the content does not have this property.
     * @private
     */
    private getProperty;
    /**
     * Sets the value of the property with the given ID.
     * <p>
     * If the property is normalized a normalized value must be provided to this function.
     * </p>
     *
     * @param {string} propertyId The case-sensitive ID of the property.
     * @param {*} value The value of the property that will be copied.
     * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
     * @private
     */
    private setProperty;
    /**
     * Returns a copy of the value of the property with the given semantic.
     *
     * @param {string} semantic The case-sensitive semantic of the property.
     * @returns {*} The value of the property or <code>undefined</code> if the content does not have this semantic.
     * @private
     */
    private getPropertyBySemantic;
    /**
     * Sets the value of the property with the given semantic.
     *
     * @param {string} semantic The case-sensitive semantic of the property.
     * @param {*} value The value of the property that will be copied.
     * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
     * @private
     */
    private setPropertyBySemantic;
}
