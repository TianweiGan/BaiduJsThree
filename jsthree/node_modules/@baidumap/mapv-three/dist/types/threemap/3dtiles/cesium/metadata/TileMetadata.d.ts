export default TileMetadata;
/**
 * Metadata about a 3D Tile. This represents the tile metadata JSON (3D Tiles 1.1)
 * or the <code>3DTILES_metadata</code> extension on a single {@link Cesium3DTile}
 * <p>
 * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles
 * </p>
 *
 * @param {object} options Object with the following properties:
 * @param {object} options.tile Either the tile metadata JSON (3D Tiles 1.1), or the extension
 * JSON attached to the tile.
 * @param {MetadataClass} options.class The class that the tile metadata conforms to.
 *
 * @alias TileMetadata
 * @constructor
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change
 * without Cesium's standard deprecation policy.
 */
declare class TileMetadata {
    constructor(options: any);
    _class: any;
    _properties: any;
    _extensions: any;
    _extras: any;
    /**
   * The class that properties conform to.
   *
   * @memberof TileMetadata.prototype
   * @type {MetadataClass}
   * @readonly
   * @private
   */
    private readonly get class();
    /**
   * Extra user-defined properties.
   *
   * @memberof TileMetadata.prototype
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get extras();
    /**
   * An object containing extensions.
   *
   * @memberof TileMetadata.prototype
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get extensions();
    /**
   * Returns whether the tile has this property.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {boolean} Whether the tile has this property.
   * @private
   */
    private hasProperty;
    /**
   * Returns whether the tile has a property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {boolean} Whether the tile has a property with the given semantic.
   * @private
   */
    private hasPropertyBySemantic;
    /**
   * Returns an array of property IDs.
   *
   * @param {string[]} [results] An array into which to store the results.
   * @returns {string[]} The property IDs.
   * @private
   */
    private getPropertyIds;
    /**
   * Returns a copy of the value of the property with the given ID.
   * <p>
   * If the property is normalized the normalized value is returned.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.
   * @private
   */
    private getProperty;
    /**
   * Sets the value of the property with the given ID.
   * <p>
   * If the property is normalized a normalized value must be provided to this function.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setProperty;
    /**
   * Returns a copy of the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.
   * @private
   */
    private getPropertyBySemantic;
    /**
   * Sets the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setPropertyBySemantic;
}
