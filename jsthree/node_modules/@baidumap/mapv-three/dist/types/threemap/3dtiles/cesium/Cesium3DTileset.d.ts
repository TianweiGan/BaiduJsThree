export function hasExtension(json: any, extensionName: any): boolean;
export namespace Cesium3DTileRefine {
    let ADD: number;
    let REPLACE: number;
}
export class Cesium3DTileset {
    static RAYCAST_NONE: number;
    static RAYCAST_DEFAULT: number;
    static RAYCAST_BVH: number;
    static supportedExtensions: {
        '3DTILES_metadata': boolean;
        '3DTILES_implicit_tiling': boolean;
        '3DTILES_multiple_contents': boolean;
    };
    static checkSupportedExtensions: (extensionsRequired: any) => void;
    static fromAssetId(assetId: any, options: any): Promise<Cesium3DTileset>;
    static fromUrl(url: any, options: any): Cesium3DTileset;
    static fromUrlAsync(url: any, options: any): Promise<Cesium3DTileset>;
    static loadJson(tilesetUrl: any): Promise<any>;
    constructor(options: any);
    isEventEntitySupported: boolean;
    is3DTiles: boolean;
    _needsRefreshAllLoadedTiles: boolean;
    _freezeUpdate: boolean;
    _forceUnlit: boolean;
    plugins: any[];
    preferLeaves: any;
    dynamicScreenSpaceError: any;
    _updatedVisibilityFrame: number;
    dynamicScreenSpaceErrorDensity: any;
    dynamicScreenSpaceErrorFactor: any;
    dynamicScreenSpaceErrorHeightFalloff: any;
    foveatedScreenSpaceError: any;
    _foveatedConeSize: any;
    _foveatedMinimumScreenSpaceErrorRelaxation: any;
    foveatedInterpolationCallback: any;
    loadSiblings: any;
    dynamicScreenSpaceHeightScale: any;
    _dynamicScreenSpaceErrorComputedDensity: number;
    _cullWithChildrenBounds: any;
    _url: any;
    _basePath: any;
    _root: Cesium3DTile | undefined;
    _cache: Cesium3DTilesetCache;
    _processingQueue: any[];
    _selectedTiles: any[];
    _selectedTilesToStyle: any[];
    _emptyTiles: any[];
    _requestedTiles: any[];
    _requestedTilesInFlight: any[];
    _maximumScreenSpaceError: any;
    _screenSpaceError: any;
    cullRequestsWhileMoving: any;
    _cullRequestsWhileMoving: boolean;
    cullRequestsWhileMovingMultiplier: any;
    progressiveResolutionHeightFraction: any;
    _cacheBytes: any;
    _prevSelectedTiles: any[];
    _maximumCacheOverflowBytes: any;
    _statistics: Cesium3DTilesetStatistics;
    _statisticsLast: Cesium3DTilesetStatistics;
    _maximumPriority: {
        foveatedFactor: number;
        depth: number;
        distance: number;
        reverseScreenSpaceError: number;
    };
    _minimumPriority: {
        foveatedFactor: number;
        depth: number;
        distance: number;
        reverseScreenSpaceError: number;
    };
    _modelMatrix: any;
    optimizeRaycast: any;
    _raycastMethod: number;
    _overridenRaycast: (raycaster: any, intersects: any) => void;
    _camera: any;
    /**
     * Optimization option. Don't request tiles that will likely be unused
     * when they come back because of the camera's movement. This optimization only applies to stationary tilesets.
     *
     * @private
     * @type {boolean}
     * @default true
     */
    private _manager;
    _loaders: any;
    _gltfLoader: import("../../../index").GLTFLoader | undefined;
    set forceUnlit(value: boolean);
    get forceUnlit(): boolean;
    group: any;
    _elementsManager: ElementsManager;
    _instancedElementManager: TileInstancedElementManager;
    _editableElementManager: EditableElementManager;
    _displayBoxBounds: any;
    _displayRegionBounds: any;
    set debug(value: any);
    get debug(): any;
    getBounds(): any;
    isEntityVisible(entity: any): boolean;
    _initEventListener(): void;
    handleLoadTileset(): void;
    handleLoadTile(e: any): void;
    handleDisposeTile(e: any): void;
    handleTileVisibleChanged(e: any): void;
    updateCustomLoaders(): void;
    afterAddToEngine(engine: any): void;
    _engine: any;
    setCamera(camera: any): void;
    hasCamera(): boolean;
    deleteCamera(): void;
    getCamera(): any;
    handleBeforeRender: (engine: any) => void;
    getEntityByIntersection(intersection: any): {
        _content: any;
        _tile: any;
        _tileset: any;
        _face: any;
        _faceIndex: any;
        _batchId: number;
    } | null;
    updateInfo(): void;
    _cameraInfo: any;
    prePassesUpdate(renderState: any): void;
    parseBatchTableAttribute: (content: any, property: any) => void;
    _refreshTileInfo: (tile: any) => void;
    traversalLoadedTile: (callback: any) => void;
    forEachLoadedModel(callback: any): void;
    update(renderState: any): void;
    trimLoadedTiles(): void;
    postPassesUpdate(renderState: any): void;
    _styleApplied: boolean | undefined;
    beforeRemoveFromEngine(engine: any): void;
    dispose(): void;
    disposePlugins(): void;
    resetQueue(): void;
    getTraversal(): typeof Cesium3DTilesetSkipTraversal;
    isDestroyed(): boolean;
    setTilesetProperties(tilesetJson: any, resource: any, options: any): Promise<void>;
    _metadataExtension: Cesium3DTilesetMetadata | undefined;
    _geometricError: any;
    _scaledGeometricError: any;
    _asset: any;
    _extras: any;
    _gltfUpMatrix: any;
    _properties: any;
    _extensionsUsed: any;
    _extensions: any;
    _modelUpAxis: any;
    _modelForwardAxis: any;
    getBoundingBox(target: any): boolean;
    loadTileset(resource: any, tilesetJson: any, parentTile: any): Cesium3DTile;
    _allTilesAdditive: any;
    registerPlugin(plugin: any): any;
    raycast(raycaster: any, intersects: any): void;
    set raycastMethod(value: number);
    get raycastMethod(): number;
    get root(): Cesium3DTile | undefined;
    get modelMatrix(): any;
    get screenSpaceError(): any;
    set cacheBytes(value: any);
    get cacheBytes(): any;
    set maximumCacheOverflowBytes(value: any);
    get maximumCacheOverflowBytes(): any;
    get gltfUpMatrix(): any;
    get metadataExtension(): Cesium3DTilesetMetadata | undefined;
    get schema(): any;
    get metadata(): import("./metadata/TilesetMetadata").default | undefined;
    set foveatedConeSize(value: any);
    get foveatedConeSize(): any;
    get totalMemoryUsageInBytes(): number;
    get statistics(): Cesium3DTilesetStatistics;
    set foveatedMinimumScreenSpaceErrorRelaxation(value: any);
    get foveatedMinimumScreenSpaceErrorRelaxation(): any;
    set maximumScreenSpaceError(value: any);
    get maximumScreenSpaceError(): any;
    _debug: any;
    _debugTilesPlugin: DebugTilesPlugin | undefined;
    get debugTilesPlugin(): DebugTilesPlugin | undefined;
    set displayBoxBounds(value: any);
    get displayBoxBounds(): any;
    set displayRegionBounds(value: any);
    get displayRegionBounds(): any;
    set displaySphereBounds(value: any);
    get displaySphereBounds(): any;
    _displaySphereBounds: any;
    set freezeUpdate(freezeUpdate: boolean);
    get freezeUpdate(): boolean;
    set materialManager(materialManager: any);
    get materialManager(): any;
    _materialManager: any;
    set castShadow(value: any);
    get castShadow(): any;
    _castShadow: any;
    set receiveShadow(value: any);
    get receiveShadow(): any;
    _receiveShadow: any;
    get instancedElementManager(): TileInstancedElementManager;
    get editableElementManager(): EditableElementManager;
    get elementsManager(): ElementsManager;
}
import Cesium3DTile from './Cesium3DTile';
import Cesium3DTilesetCache from './Cesium3DTilesetCache';
import { Cesium3DTilesetStatistics } from './Cesium3DTilesetStatistics';
import { ElementsManager } from '../elements/ElementsManager';
import { TileInstancedElementManager } from '../elements/TileInstancedElementManager';
import { EditableElementManager } from '../elements/EditableElementManager';
import Cesium3DTilesetSkipTraversal from './traversal/Cesium3DTilesetSkipTraversal';
import Cesium3DTilesetMetadata from './Cesium3DTilesetMetadata';
import DebugTilesPlugin from './plugins/DebugTilesPlugin';
