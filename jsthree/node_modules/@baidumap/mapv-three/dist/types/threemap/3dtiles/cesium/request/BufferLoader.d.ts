export default BufferLoader;
/**
 * Loads an embedded or external buffer.
 * <p>
 * Implements the {@link ResourceLoader} interface.
 * </p>
 *
 * @alias BufferLoader
 * @constructor
 * @augments ResourceLoader
 *
 * @param {object} options Object with the following properties:
 * @param {Uint8Array} [options.typedArray] The typed array containing the embedded buffer contents.
 * Mutually exclusive with options.resource.
 * @param {Resource} [options.resource] The {@link Resource} pointing to the external buffer.
 * Mutually exclusive with options.typedArray.
 * @param {string} [options.cacheKey] The cache key of the resource.
 *
 * @exception {DeveloperError} One of options.typedArray and options.resource must be defined.
 *
 * @private
 */
declare class BufferLoader extends ResourceLoader {
    /**
   * Exposed for testing
   * @private
   */
    private static _fetchArrayBuffer;
    constructor(options: any);
    _typedArray: any;
    _resource: any;
    _cacheKey: any;
    _state: number;
    _promise: any;
    /**
   * The cache key of the resource.
   *
   * @memberof BufferLoader.prototype
   *
   * @type {string}
   * @readonly
   * @private
   */
    private readonly get cacheKey();
    /**
   * The typed array containing the embedded buffer contents.
   *
   * @memberof BufferLoader.prototype
   *
   * @type {Uint8Array}
   * @readonly
   * @private
   */
    private readonly get typedArray();
    /**
   * Loads the resource.
   * @returns {Promise<BufferLoader>} A promise which resolves to the loader when the resource loading is completed.
   * @private
   */
    private load;
    loadExternalBuffer(): any;
}
import ResourceLoader from './ResourceLoader.js';
