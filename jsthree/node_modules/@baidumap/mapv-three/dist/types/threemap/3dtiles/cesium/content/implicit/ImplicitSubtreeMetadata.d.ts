export default ImplicitSubtreeMetadata;
declare class ImplicitSubtreeMetadata {
    constructor(options: any);
    _class: any;
    _properties: any;
    _extras: any;
    _extensions: any;
    get class(): any;
    get extras(): any;
    get extensions(): any;
    /**
   * Returns whether the subtree has this property.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {boolean} Whether the subtree has this property.
   * @private
   */
    private hasProperty;
    /**
   * Returns whether the subtree has a property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {boolean} Whether the subtree has a property with the given semantic.
   * @private
   */
    private hasPropertyBySemantic;
    /**
   * Returns an array of property IDs.
   *
   * @param {string[]} [results] An array into which to store the results.
   * @returns {string[]} The property IDs.
   * @private
   */
    private getPropertyIds;
    /**
   * Returns a copy of the value of the property with the given ID.
   * <p>
   * If the property is normalized the normalized value is returned.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the subtree does not have this property.
   * @private
   */
    private getProperty;
    /**
   * Sets the value of the property with the given ID.
   * <p>
   * If the property is normalized a normalized value must be provided to this function.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setProperty;
    /**
   * Returns a copy of the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the subtree does not have this semantic.
   * @private
   */
    private getPropertyBySemantic;
    /**
   * Sets the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setPropertyBySemantic;
}
