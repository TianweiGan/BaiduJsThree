/**
 * Reads a string from a Uint8Array.
 *
 * @function
 *
 * @param {Uint8Array} uint8Array The Uint8Array to read from.
 * @param {number} [byteOffset=0] The byte offset to start reading from.
 * @param {number} [byteLength] The byte length to read. If byteLength is omitted the remainder of the buffer is read.
 * @returns {string} The string.
 *
 * @private
 */
export function getStringFromTypedArray(uint8Array: Uint8Array, byteOffset?: number, byteLength?: number): string;
export namespace getStringFromTypedArray {
    export function decodeWithTextDecoder(view: any): string;
    export function decodeWithFromCharCode(view: any): string;
    import decode = decodeWithFromCharCode;
    export { decode };
}
export function getMagic(uint8Array: any, byteOffset: any): string;
export function getJsonFromTypedArray(uint8Array: any, byteOffset: any, byteLength: any): any;
export default Request;
/**
 * Stores information for making a request. In general this does not need to be constructed directly.
 *
 * @alias Request
 * @constructor
 * @param {object} [options] An object with the following properties:
 * @param {string} [options.url] The url to request.
 * @param {Request.RequestCallback} [options.requestFunction] The function that makes the actual data request.
 * @param {Request.CancelCallback} [options.cancelFunction] The function that is called when the request is cancelled.
 * @param {Request.PriorityCallback} [options.priorityFunction] The function that is called to update
 * the request's priority, which occurs once per frame.
 * @param {number} [options.priority=0.0] The initial priority of the request.
 * @param {boolean} [options.throttle=false] Whether to throttle and prioritize the request.
 * If false, the request will be sent immediately. If true, the request will be throttled and sent based on priority.
 * @param {boolean} [options.throttleByServer=false] Whether to throttle the request by server.
 * @param {RequestType} [options.type=RequestType.OTHER] The type of request.
 * @param {string} [options.serverKey] A key used to identify the server that a request is going to.
 */
declare class Request {
    constructor(options?: {});
    /**
     * The URL to request.
     *
     * @type {string}
     */
    url: string;
    /**
     * The function that makes the actual data request.
     *
     * @type {Request.RequestCallback}
     */
    requestFunction: Request.RequestCallback;
    /**
     * The function that is called when the request is cancelled.
     *
     * @type {Request.CancelCallback}
     */
    cancelFunction: Request.CancelCallback;
    /**
     * The function that is called to update the request's priority, which occurs once per frame.
     *
     * @type {Request.PriorityCallback}
     */
    priorityFunction: Request.PriorityCallback;
    /**
     * Priority is a unit-less value where lower values represent higher priority.
     * For world-based objects, this is usually the distance from the camera.
     * A request that does not have a priority function defaults to a priority of 0.
     *
     * If priorityFunction is defined, this value is updated every frame with the result of that call.
     *
     * @type {number}
     * @default 0.0
     */
    priority: number;
    /**
     * Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the
     * request will be throttled and sent based on priority.
     *
     * @type {boolean}
     * @readonly
     *
     * @default false
     */
    readonly throttle: boolean;
    /**
     * Whether to throttle the request by server. Browsers typically support about 6-8 parallel connections
     * for HTTP/1 servers, and an unlimited amount of connections for HTTP/2 servers. Setting this value
     * to <code>true</code> is preferable for requests going through HTTP/1 servers.
     *
     * @type {boolean}
     * @readonly
     *
     * @default false
     */
    readonly throttleByServer: boolean;
    /**
     * A key used to identify the server that a request is going to.
     * It is derived from the url's authority and scheme.
     *
     * @type {string}
     *
     * @private
     */
    private serverKey;
    /**
     * The current state of the request.
     *
     * @type {RequestState}
     * @readonly
     */
    readonly state: Readonly<{
        UNISSUED: number;
        ISSUED: number;
        ACTIVE: number;
        RECEIVED: number;
        CANCELLED: number;
        FAILED: number;
    }>;
    /**
     * The requests's deferred promise.
     *
     * @type {object}
     *
     * @private
     */
    private deferred;
    /**
     * Whether the request was explicitly cancelled.
     *
     * @type {boolean}
     *
     * @private
     */
    private cancelled;
    /**
     * Mark the request as cancelled.
     *
     * @private
     */
    private cancel;
    /**
     * Duplicates a Request instance.
     *
     * @param {Request} [result] The object onto which to store the result.
     *
     * @returns {Request} The modified result parameter or a new Resource instance if one was not provided.
     */
    clone(result?: Request): Request;
}
