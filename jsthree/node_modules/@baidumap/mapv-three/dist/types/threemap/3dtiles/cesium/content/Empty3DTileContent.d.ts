export default Empty3DTileContent;
/**
 * Represents empty content for tiles in a
 * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset that
 * do not have content, e.g., because they are used to optimize hierarchical culling.
 * <p>
 * Implements the {@link Cesium3DTileContent} interface.
 * </p>
 *
 * @alias Empty3DTileContent
 * @constructor
 *
 * @private
 */
declare function Empty3DTileContent(tileset: any, tile: any): void;
declare class Empty3DTileContent {
    /**
     * Represents empty content for tiles in a
     * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification|3D Tiles} tileset that
     * do not have content, e.g., because they are used to optimize hierarchical culling.
     * <p>
     * Implements the {@link Cesium3DTileContent} interface.
     * </p>
     *
     * @alias Empty3DTileContent
     * @constructor
     *
     * @private
     */
    private constructor();
    _tileset: any;
    _tile: any;
    featurePropertiesDirty: boolean;
    /**
     * Part of the {@link Cesium3DTileContent} interface.  <code>Empty3DTileContent</code>
     * always returns <code>false</code> since a tile of this type does not have any features.
     */
    hasProperty(batchId: any, name: any): boolean;
    /**
     * Part of the {@link Cesium3DTileContent} interface.  <code>Empty3DTileContent</code>
     * always returns <code>undefined</code> since a tile of this type does not have any features.
     */
    getFeature(batchId: any): undefined;
    applyDebugSettings(enabled: any, color: any): void;
    applyStyle(style: any): void;
    update(tileset: any, frameState: any): void;
    pick(ray: any, frameState: any, result: any): undefined;
    isDestroyed(): boolean;
    destroy(): undefined;
}
