export class OBB {
    constructor(box?: any, transform?: any);
    box: any;
    absoluteBox: any;
    transform: any;
    inverseTransform: any;
    points: any[];
    planes: any[];
    /**
     * Clamps the given point within the bounds of this OBB
     * @param {Vector3} point
     * @param {Vector3} result
     * @returns {Vector3}
     */
    clampPoint(point: Vector3, result: Vector3): Vector3;
    /**
     * Returns the distance from any edge of this OBB to the specified point.
     * If the point lies inside of this box, the distance will be 0.
     * @param {Vector3} point
     * @returns {number}
     */
    distanceToPoint(point: Vector3): number;
    containsPoint(point: any): any;
    intersectsRay(ray: any): any;
    intersectRay(ray: any, target: any): any;
    update(): void;
    updatePlanes(): void;
    intersectsFrustum(frustum: any): boolean;
}
