export default class ImplicitSubtree {
    static fromSubtreeJson(resource: any, json: any, subtreeView: any, implicitTileset: any, implicitCoordinates: any): Promise<ImplicitSubtree>;
    constructor(resource: any, implicitTileset: any, implicitCoordinates: any);
    _resource: any;
    _subtreeJson: any;
    _bufferLoader: any;
    _tileAvailability: any;
    _contentAvailabilityBitstreams: any[];
    _childSubtreeAvailability: any;
    _implicitCoordinates: any;
    _subtreeLevels: any;
    _subdivisionScheme: any;
    _branchingFactor: any;
    _metadata: any;
    _tileMetadataTable: any;
    _tilePropertyTableJson: any;
    _contentMetadataTables: any[];
    _contentPropertyTableJsons: any[];
    _tileJumpBuffer: any;
    _contentJumpBuffers: any[];
    _ready: boolean;
    /**
   * Returns true once all necessary availability buffers
   * are loaded.
   *
   * @type {boolean}
   * @readonly
   * @private
   */
    private readonly get ready();
    /**
   * When subtree metadata is present (3D Tiles 1.1), this property stores an {@link ImplicitSubtreeMetadata} instance
   *
   * @type {ImplicitSubtreeMetadata}
   * @readonly
   * @private
   */
    private readonly get metadata();
    /**
   * When tile metadata is present (3D Tiles 1.1) or the <code>3DTILES_metadata</code> extension is used,
   * this property stores a {@link MetadataTable} instance for the tiles in the subtree.
   *
   * @type {MetadataTable}
   * @readonly
   * @private
   */
    private readonly get tileMetadataTable();
    /**
   * When tile metadata is present (3D Tiles 1.1) or the <code>3DTILES_metadata</code> extension is used,
   * this property stores the JSON from the extension. This is used by {@link TileMetadata}
   * to get the extras and extensions for the tiles in the subtree.
   *
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get tilePropertyTableJson();
    /**
   * When content metadata is present (3D Tiles 1.1), this property stores
   * an array of {@link MetadataTable} instances for the contents in the subtree.
   *
   * @type {Array}
   * @readonly
   * @private
   */
    private readonly get contentMetadataTables();
    /**
   * When content metadata is present (3D Tiles 1.1), this property
   * stores an array of the JSONs from the extension. This is used to get the extras
   * and extensions for the contents in the subtree.
   *
   * @type {Array}
   * @readonly
   * @private
   */
    private readonly get contentPropertyTableJsons();
    /**
   * Gets the implicit tile coordinates for the root of the subtree.
   *
   * @type {ImplicitTileCoordinates}
   * @readonly
   * @private
   */
    private readonly get implicitCoordinates();
    tileIsAvailableAtIndex(index: any): any;
    tileIsAvailableAtCoordinates(implicitCoordinates: any): any;
    contentIsAvailableAtIndex(index: any, contentIndex: any): any;
    contentIsAvailableAtCoordinates(implicitCoordinates: any, contentIndex: any): any;
    /**
     * Check if a child subtree is available at an index of the child subtree availability bitstream
     *
     * @param {number} index The index of the desired child subtree
     * @returns {boolean} The value of the i-th bit
     * @private
     */
    private childSubtreeIsAvailableAtIndex;
    /**
     * Check if a specific child subtree is available at an implicit tile coordinate
     *
     * @param {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a child subtree
     * @returns {boolean} The value of the i-th bit
     * @private
     */
    private childSubtreeIsAvailableAtCoordinates;
    /**
     * Get the index of the first node at the given level within this subtree.
     * e.g. for a quadtree:
     * <ul>
     * <li>Level 0 starts at index 0</li>
     * <li>Level 1 starts at index 1</li>
     * <li>Level 2 starts at index 5</li>
     * </ul>
     *
     * @param {number} level The 0-indexed level number relative to the root of the subtree
     * @returns {number} The first index at the desired level
     * @private
     */
    private getLevelOffset;
    /**
     * Get the morton index of a tile's parent. This is equivalent to
     * chopping off the last 2 (quadtree) or 3 (octree) bits of the morton
     * index.
     *
     * @param {number} childIndex The morton index of the child tile relative to its parent
     * @returns {number} The index of the child's parent node
     * @private
     */
    private getParentMortonIndex;
    getTileIndex(implicitCoordinates: any): any;
    /**
     * Given the implicit tiling coordinates for a child subtree, get the index within the
     * subtree's child subtree availability bitstream.
     * @param {ImplicitTileCoordinates} implicitCoordinates The global coordinates of a child subtree
     * @return {number} The child subtree's index within the subtree's child subtree availability bitstream.
     * @private
     */
    private getChildSubtreeIndex;
    getTileMetadataView(implicitCoordinates: any): ImplicitMetadataView | undefined;
    getContentMetadataView(implicitCoordinates: any, contentIndex: any): ImplicitMetadataView | undefined;
    isDestroyed(): boolean;
    destroy(): undefined;
}
import ImplicitMetadataView from './ImplicitMetadataView';
