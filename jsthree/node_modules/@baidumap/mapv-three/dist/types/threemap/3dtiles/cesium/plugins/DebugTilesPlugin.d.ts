export function getIndexedRandomColor(index: any): any;
export const NONE: 0;
export const SCREEN_ERROR: 1;
export const GEOMETRIC_ERROR: 2;
export const DISTANCE: 3;
export const DEPTH: 4;
export const RELATIVE_DEPTH: 5;
export const IS_LEAF: 6;
export const RANDOM_COLOR: 7;
export const RANDOM_NODE_COLOR: 8;
export const CUSTOM_COLOR: 9;
export const LOAD_ORDER: 10;
export default DebugTilesPlugin;
declare class DebugTilesPlugin {
    constructor(options: any);
    name: string;
    tiles: any;
    extremeDebugDepth: number;
    extremeDebugError: number;
    boxGroup: any;
    sphereGroup: any;
    regionGroup: any;
    displayBoxBounds: any;
    displaySphereBounds: any;
    displayRegionBounds: any;
    colorMode: any;
    maxDebugDepth: any;
    maxDebugDistance: any;
    maxDebugError: any;
    customColorCallback: any;
    getDebugColor: (value: any, target: any) => void;
    init(tileset: any): void;
    tileset: any;
    _onLoadTileSetCB: ((data: any) => void) | undefined;
    _onLoadTileCB: (({ scene, tile }: {
        scene: any;
        tile: any;
    }) => void) | undefined;
    _onDisposeTileCB: (({ tile }: {
        tile: any;
    }) => void) | undefined;
    _onUpdateAfterCB: (() => void) | undefined;
    _onTileVisibilityChangeCB: (({ scene, tile, visible }: {
        scene: any;
        tile: any;
        visible: any;
    }) => void) | undefined;
    _onLoadTile(tile: any): void;
    _onDisposeTile(tile: any): void;
    _initExtremes(value: any): void;
    _onUpdateAfter(): void;
    _onTileVisibilityChange(tile: any, visible: any): void;
    dispose(): void;
}
