export default ImplicitMetadataView;
/**
 * This class represents a single entity in the <code>MetadataTable</code> owned
 * by an implicit subtree. The entity is specified by the entityId.
 * <p>
 * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles
 * </p>
 *
 * @param {MetadataTable} options.metadataTable The metadata table.
 * @param {MetadataClass} options.class The class that the metadata conforms to.
 * @param {number} options.entityId The ID of the entity the metadata belongs to.
 * @param {object} options.propertyTableJson The JSON that contains the property table of the entity.
 *
 * @alias ImplicitMetadataView
 * @constructor
 *
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final
 * and is subject to change without Cesium's standard deprecation policy.
 */
declare class ImplicitMetadataView {
    constructor(options: any);
    _class: any;
    _metadataTable: any;
    _entityId: any;
    _extensions: any;
    _extras: any;
    /**
   * The class that properties conform to.
   *
   * @memberof ImplicitMetadataView.prototype
   * @type {MetadataClass}
   * @readonly
   */
    readonly get class(): MetadataClass;
    /**
   * Extra user-defined properties.
   *
   * @memberof ImplicitMetadataView.prototype
   * @type {object}
   * @readonly
   */
    readonly get extras(): object;
    /**
   * An object containing extensions.
   *
   * @memberof ImplicitMetadataView.prototype
   * @type {object}
   * @readonly
   */
    readonly get extensions(): object;
    /**
   * Returns whether the metadata contains this property.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {boolean} Whether the tile has this property.
   * @private
   */
    private hasProperty;
    /**
   * Returns whether the metadata contains a property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {boolean} Whether the tile has a property with the given semantic.
   * @private
   */
    private hasPropertyBySemantic;
    /**
   * Returns an array of property IDs in the metadata table.
   *
   * @param {string[]} [results] An array into which to store the results.
   * @returns {string[]} The property IDs.
   * @private
   */
    private getPropertyIds;
    /**
   * Returns a copy of the value of the property with the given ID.
   * <p>
   * If the property is normalized the normalized value is returned.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this property.
   * @private
   */
    private getProperty;
    /**
   * Sets the value of the property with the given ID in the metadata table.
   * <p>
   * If the property is normalized a normalized value must be provided to this function.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setProperty;
    /**
   * Returns a copy of the value of the property with the given semantic in the metadata table.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the tile does not have this semantic.
   * @private
   */
    private getPropertyBySemantic;
    /**
   * Sets the value of the property with the given semantic in the metadata table.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setPropertyBySemantic;
}
