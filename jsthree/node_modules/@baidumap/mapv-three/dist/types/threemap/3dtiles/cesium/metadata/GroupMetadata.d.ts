export default GroupMetadata;
/**
 * Metadata about a group of {@link Cesium3DTileContent}
 * <p>
 * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles
 * </p>
 *
 * @param {object} options Object with the following properties:
 * @param {string} options.id The ID of the group.
 * @param {object} options.group The group JSON object.
 * @param {MetadataClass} options.class The class that group metadata conforms to.
 *
 * @alias GroupMetadata
 * @class
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final and is
 * subject to change without Cesium's standard deprecation policy.
 */
declare class GroupMetadata {
    constructor(options?: {});
    _id: any;
    _class: any;
    _properties: any;
    _extras: any;
    _extensions: any;
    /**
   * The class that properties conform to.
   *
   * @type {MetadataClass}
   * @readonly
   * @private
   */
    private readonly get class();
    /**
   * The ID of the group.
   *
   * @type {string}
   * @readonly
   * @private
   */
    private readonly get id();
    /**
   * Extra user-defined properties.
   *
   * @type {*}
   * @readonly
   * @private
   */
    private readonly get extras();
    /**
   * An object containing extensions.
   *
   * @type {object}
   * @readonly
   * @private
   */
    private readonly get extensions();
    /**
   * Returns whether the group has this property.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {boolean} Whether the group has this property.
   * @private
   */
    private hasProperty;
    /**
   * Returns whether the group has a property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {boolean} Whether the group has a property with the given semantic.
   * @private
   */
    private hasPropertyBySemantic;
    /**
   * Returns an array of property IDs.
   *
   * @param {string[]} [results] An array into which to store the results.
   * @returns {string[]} The property IDs.
   * @private
   */
    private getPropertyIds;
    /**
   * Returns a copy of the value of the property with the given ID.
   * <p>
   * If the property is normalized the normalized value is returned.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the group does not have this property.
   * @private
   */
    private getProperty;
    /**
   * Sets the value of the property with the given ID.
   * <p>
   * If the property is normalized a normalized value must be provided to this function.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setProperty;
    /**
   * Returns a copy of the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @returns {*} The value of the property or <code>undefined</code> if the group does not have this semantic.
   * @private
   */
    private getPropertyBySemantic;
    /**
   * Sets the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {*} value The value of the property that will be copied.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private setPropertyBySemantic;
}
