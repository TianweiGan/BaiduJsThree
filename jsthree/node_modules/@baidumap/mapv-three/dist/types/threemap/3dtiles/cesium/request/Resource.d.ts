export default Resource;
declare class Resource {
    static createIfNeeded(resource: any): any;
    static fetchArrayBuffer(options: any): any;
    constructor(options: any);
    _url: any;
    _templateValues: any;
    _queryParameters: any;
    headers: any;
    request: any;
    proxy: any;
    retryCallback: any;
    retryAttempts: any;
    _retryCount: number;
    parseUrl(url: any, merge: any, preserveQuery: any, baseUrl: any): void;
    clone(result: any): any;
    setQueryParameters(params: any, useAsDefault: any): void;
    getDerivedResource(options: any): any;
    fetchJson(): any;
    fetchArrayBuffer(): any;
    fetch(options: any): any;
    retryOnError(error: any): Promise<any>;
    _makeRequest(options: any): any;
    getUrlComponent(query: any, proxy: any): any;
    getBaseUri(includeQuery: any): string;
    set url(value: any);
    get url(): any;
    get queryParameters(): any;
    get extension(): any;
}
declare namespace Resource {
    namespace _Implementations {
        function loadWithXhr(url: any, responseType: any, method: any, data: any, headers: any, deferred: any, overrideMimeType: any): XMLHttpRequest | undefined;
    }
}
