export default MortonOrder;
declare namespace MortonOrder {
    /**
     * Computes the Morton index from 2D coordinates. This is equivalent to interleaving their bits.
     * The inputs must be 16-bit unsigned integers (resulting in 32-bit Morton index)
     * due to 32-bit bitwise operator limitation in JavaScript.
     *
     * @param {number} x The X coordinate in the range [0, (2^16)-1].
     * @param {number} y The Y coordinate in the range [0, (2^16)-1].
     * @returns {number} The Morton index.
     * @private
     */
    function encode2D(x: number, y: number): number;
    /**
     * Computes the 2D coordinates from a Morton index. This is equivalent to deinterleaving their bits.
     * The input must be a 32-bit unsigned integer (resulting in 16 bits per coordinate)
     * due to 32-bit bitwise operator limitation in JavaScript.
     *
     * @param {number} mortonIndex The Morton index in the range [0, (2^32)-1].
     * @param {number[]} [result] The array onto which to store the result.
     * @returns {number[]} An array containing the 2D coordinates correspoding to the Morton index.
     * @private
     */
    function decode2D(mortonIndex: number, result?: number[]): number[];
    /**
     * Computes the Morton index from 3D coordinates. This is equivalent to interleaving their bits.
     * The inputs must be 10-bit unsigned integers (resulting in 30-bit Morton index)
     * due to 32-bit bitwise operator limitation in JavaScript.
     *
     * @param {number} x The X coordinate in the range [0, (2^10)-1].
     * @param {number} y The Y coordinate in the range [0, (2^10)-1].
     * @param {number} z The Z coordinate in the range [0, (2^10)-1].
     * @returns {number} The Morton index.
     * @private
     */
    function encode3D(x: number, y: number, z: number): number;
    /**
     * Computes the 3D coordinates from a Morton index. This is equivalent to deinterleaving their bits.
     * The input must be a 30-bit unsigned integer (resulting in 10 bits per coordinate)
     * due to 32-bit bitwise operator limitation in JavaScript.
     *
     * @param {number} mortonIndex The Morton index in the range [0, (2^30)-1].
     * @param {number[]} [result] The array onto which to store the result.
     * @returns {number[]} An array containing the 3D coordinates corresponding to the Morton index.
     * @private
     */
    function decode3D(mortonIndex: number, result?: number[]): number[];
}
