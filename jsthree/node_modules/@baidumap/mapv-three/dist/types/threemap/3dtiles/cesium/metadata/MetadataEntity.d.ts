export default MetadataEntity;
/**
 * An entity containing metadata.
 * <p>
 * This type describes an interface and is not intended to be instantiated directly.
 * </p>
 * <p>
 * See the {@link https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_metadata|3DTILES_metadata Extension} for 3D Tiles
 * </p>
 *
 * @alias MetadataEntity
 * @class
 *
 * @private
 * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change
 * without Cesium's standard deprecation policy.
 */
declare class MetadataEntity {
    /**
   * Returns whether the entity has this property.
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @returns {boolean} Whether the entity has this property.
   * @private
   */
    private static hasProperty;
    /**
   * Returns whether the entity has a property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @returns {boolean} Whether the entity has a property with the given semantic.
   * @private
   */
    private static hasPropertyBySemantic;
    /**
   * Returns an array of property IDs.
   *
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @param {string[]} [results] An array into which to store the results.
   * @returns {string[]} The property IDs.
   * @private
   */
    private static getPropertyIds;
    /**
   * Returns a copy of the value of the property with the given ID.
   * <p>
   * If the property is normalized the normalized value is returned.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @returns {*} The value of the property or <code>undefined</code> if the entity does not have this property.
   * @private
   */
    private static getProperty;
    /**
   * Sets the value of the property with the given ID.
   * <p>
   * If the property is normalized a normalized value must be provided to this function.
   * </p>
   *
   * @param {string} propertyId The case-sensitive ID of the property.
   * @param {*} value The value of the property that will be copied.
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private static setProperty;
    /**
   * Returns a copy of the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @returns {*} The value of the property or <code>undefined</code> if the entity does not have this property.
   * @private
   */
    private static getPropertyBySemantic;
    /**
   * Sets the value of the property with the given semantic.
   *
   * @param {string} semantic The case-sensitive semantic of the property.
   * @param {*} value The value of the property that will be copied.
   * @param {object} properties The dictionary containing properties.
   * @param {MetadataClass} classDefinition The class.
   * @returns {boolean} <code>true</code> if the property was set, <code>false</code> otherwise.
   * @private
   */
    private static setPropertyBySemantic;
}
