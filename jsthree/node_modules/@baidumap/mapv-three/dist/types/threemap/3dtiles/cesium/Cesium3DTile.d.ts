export default Cesium3DTile;
declare class Cesium3DTile {
    constructor(tileset: any, baseResource: any, header: any, parent: any);
    _tileset: any;
    _header: any;
    hasTilesetContent: boolean;
    hasImplicitContent: boolean;
    hasImplicitContentMetadata: boolean;
    _updatedVisibilityFrame: number;
    _contentHeader: any;
    /**
     * The local transform of this tile.
     * @type {Matrix4}
     */
    transform: Matrix4;
    computedTransform: any;
    metadata: import("./metadata/TileMetadata").default | undefined;
    geometricError: any;
    _geometricError: any;
    _parent: any;
    _content: Empty3DTileContent | undefined;
    _contentResource: any;
    _contentState: number;
    hasEmptyContent: boolean;
    hasMultipleContents: boolean;
    refine: any;
    children: any[];
    parent: any;
    _screenSpaceError: number;
    _depthToCamera: number;
    _centerZDepth: number;
    _depth: number;
    _refines: boolean;
    priorityDeferred: boolean;
    _visible: boolean;
    _inRequestVolume: boolean;
    contentExpired: boolean;
    _isInRequestVolume: boolean;
    _priority: number;
    _priorityHolder: this;
    _foveatedFactor: number;
    boundingVolume: TileBoundingVolume;
    updatePriority(): void;
    updateContent(content: any): void;
    /**
     *  Processes the tile's content, e.g., create WebGL resources, to move from the PROCESSING to READY state.
     */
    process(tileset: any): void;
    _selectedFrame: number | undefined;
    lastStyleTime: number | undefined;
    update(tileset: any): void;
    cancelRequests(): void;
    unloadContent(): void;
    requestContent(): any;
    visibility(): void;
    computeVisibility(boundingVolume: any, engine: any): void;
    intersectBoundingVolume(boundingVolume: any, frustum: any): void;
    updateVisibility(renderState: any): void;
    _distanceToCamera: number | undefined;
    _screenSpaceErrorProgressiveResolution: number | undefined;
    _priorityProgressiveResolution: boolean | undefined;
    updateTransform(): void;
    distanceToTile(): number;
    distanceToTileCenter(renderState: any): any;
    getScreenSpaceError(useParentGeometricError: any, progressiveResolutionHeightFraction: any): number;
    getDistance(): number;
    isDestroyed(): boolean;
    get contentReady(): boolean;
    get contentAvailable(): boolean;
    get hasRenderableContent(): boolean;
    get isVisible(): boolean;
    get tileset(): any;
    get hasUnloadedRenderableContent(): boolean;
    get contentUnLoaded(): boolean;
    get content(): Empty3DTileContent | undefined;
    get cached(): Empty3DTileContent | undefined;
    get __visible(): boolean;
    get boundingVolumeCenter(): any;
}
import Empty3DTileContent from './content/Empty3DTileContent';
import { TileBoundingVolume } from './boundingVolume/TileBoundingVolume';
