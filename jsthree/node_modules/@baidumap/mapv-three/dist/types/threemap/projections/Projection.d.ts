/**
 * 地图投影的基类，定义了投影坐标系统的基本接口
 *
 * 投影类负责在地理坐标(经纬度)和投影坐标(米、像素等)之间进行转换。
 * 所有的具体投影类都继承自这个基类，并实现其定义的接口方法。
 *
 * 主要功能：
 * - 坐标正向投影与反向投影
 * - 边界框转换
 * - 投影平面法线计算
 *
 * @category Internal
 */
export class Projection {
    /**
     * 标识该对象是投影类
     * @type {boolean}
     * @readonly
     * */
    readonly isProjection: boolean;
    /**
     * 表示该投影是否是地理投影(经纬度为基础的投影)
     * @type {boolean}
     * @readonly
     */
    readonly isGeo: boolean;
    /**
     * 表示该投影坐标延续方向是否和世界坐标方向是平行的
     * 即投影后的坐标不会出现曲线、曲面的情况
     * 这些投影在绘制背景面（Rectangle类型）等元素时，可以使用更高效的简化绘制方式
     * @type {boolean}
     * @readonly
     */
    readonly isAxisAligned: boolean;
    /**
     * 将地理坐标(经纬度)转换为投影坐标
     * @param {Vector3} input 输入的地理坐标
     * @param {Vector3} [output] 可选的输出向量，如不提供则创建新的Vector3
     * @returns {Vector3} 转换后的投影坐标
     */
    projectCoordinate(input: Vector3, output?: Vector3): Vector3;
    /**
     * 将投影坐标转换为地理坐标(经纬度)
     * @param {Vector3} input 输入的投影坐标
     * @param {Vector3} [output] 可选的输出向量，如不提供则创建新的Vector3
     * @returns {Vector3} 转换后的地理坐标
     */
    unprojectCoordinate(input: Vector3, output?: Vector3): Vector3;
    /**
     * 将地理边界框转换为投影坐标系边界框
     * @param {Box3} geoBox 地理坐标系中的边界框
     * @param {Box3} [projectedBox] 可选的输出边界框，如不提供则创建新的Box3
     * @returns {Box3} 投影坐标系中的边界框
     */
    geoBoxToProjectedBox(geoBox: Box3, projectedBox?: Box3): Box3;
    /**
     * 获取地理表面在指定坐标点的法线向量
     * @param {Vector3} input 输入的地理坐标
     * @param {Vector3} [output] 可选的输出向量，如不提供则创建新的Vector3
     * @returns {Vector3} 法线向量
     */
    getGeodeticSurfaceNormal(input: Vector3, output?: Vector3): Vector3;
    /**
     * 获取投影表面在指定坐标点的法线向量
     * @param {Vector3} input 输入的投影坐标
     * @param {Vector3} [output] 可选的输出向量，如不提供则创建新的Vector3
     * @returns {Vector3} 法线向量
     */
    getProjectedSurfaceNormal(input: Vector3, output?: Vector3): Vector3;
    /**
     * 将投影坐标系边界框转换为地理边界框
     * @param {Box3} projectedBox 投影坐标系中的边界框
     * @param {Box3} [geoBox] 可选的输出边界框，如不提供则创建新的Box3
     * @returns {Box3} 地理坐标系中的边界框
     */
    projectedBoxToGeoBox(projectedBox: Box3, geoBox?: Box3): Box3;
    /**
     * 判断两个投影是否相等
     * @param {Projection} projection 要比较的投影对象
     * @returns {boolean} 如果两个投影相等则返回true
     */
    equals(projection: Projection): boolean;
    /**
     * 获取当前投影的世界边界框
     * @returns {Box3} 投影的世界边界框
     */
    getWorldBoundingBox(): Box3;
    /**
     * 将本地坐标系转换为固定坐标系
     * @param {Vector3} origin 本地坐标系的原点
     * @param {Matrix4} [fixedFrame] 可选的输出矩阵，如不提供则创建新的Matrix4
     * @returns {Matrix4} 转换后的固定坐标系矩阵
     */
    localFrameToFixedFrame(origin: Vector3, fixedFrame?: Matrix4): Matrix4;
}
