/**
 * 一组裁剪集合{@link ClippingPlaneCollection}，用于支持多区域裁剪
 */
export class MultiClippingPlaneCollection {
    constructor(engine: any, options?: {});
    /** @private */
    private _multiCollections;
    /** @private */
    private _dataArrayBuffer;
    /** @private */
    private _lengthArrayBuffer;
    /** @private */
    private _dirty;
    /** @private */
    private _multiClippingPlanesTexture;
    /** @private */
    private _lengthTexture;
    /** @private */
    private _maxCollectionLength;
    /** @private */
    private _totalPlanesCount;
    /** @private */
    private _owner;
    /** @private */
    private _unionClipping;
    /** @private */
    private _enabled;
    _engine: any;
    _options: {
        edgeColor: string;
        edgeWidth: number;
    };
    set edgeColor(value: any);
    get edgeColor(): any;
    set edgeWidth(value: any);
    get edgeWidth(): any;
    set unionClipping(value: any);
    /**
     * 设置为true，裁剪外部
     */
    get unionClipping(): any;
    _modelMatrix: any;
    getDefaultOptions(): {
        edgeColor: string;
        edgeWidth: number;
    };
    add(collection: any): void;
    get(index: any): any;
    contains(collection: any): boolean;
    remove(collection: any): boolean;
    removeAll(): void;
    /**
     * 更新纹理（只做float type的纹理）
     */
    update(): void;
    destroy(): void;
    get length(): number;
    get totalPlanesCount(): number;
    get texture(): null;
    get maxCollectionLength(): number;
    get lengthTexture(): null;
    _edgeWidth: any;
    _edgeColor: any;
    get edgeStyle(): any;
    get dirty(): boolean;
    set enabled(value: any);
    get enabled(): any;
    get modelMatrix(): any;
    /**
     * modelViewMatrix的逆转置矩阵，用于将平面转换到视空间
     */
    get clippingPlanesMatrix(): any;
}
