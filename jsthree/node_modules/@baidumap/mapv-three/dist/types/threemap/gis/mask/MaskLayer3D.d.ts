export class MaskLayer3D {
    constructor(options: any);
    /** @private */
    private _maskElements;
    /** @private */
    private _enabled;
    /** @private */
    private _maskArea;
    /** @private */
    private _maskPoint;
    /** @private */
    private _maskRadius;
    /** @private */
    private _maskWidth;
    /** @private */
    private _maskHeight;
    /** @private */
    private _shaderVersion;
    /** @private */
    private _type;
    _options: any;
    _inside: any;
    afterAddToEngine(engine: any): void;
    _engine: any;
    /**
     * 当满足条件condition时，遍历object并执行callback
     */
    traverseWithCondition(object: any, callback: any): void;
    traverseTile: (tile: any, tileMesh?: any[]) => any[] | undefined;
    _updateUniforms(material: any): void;
    _updateUniformsInternal(uniforms: any, material: any): void;
    update: (object: any) => void;
    addAndUpdateUniforms: (object: any) => void;
    updateMaterial(material: any): void;
    updateMapTile: (data: any) => void;
    clipMask: () => void;
    set maskArea(value: any[]);
    get maskArea(): any[];
    set maskPoint(value: any[]);
    /**
     * 当type为circle时为中心点
     * 当type为rect时为左下顶点
     */
    get maskPoint(): any[];
    set maskRadius(value: number);
    get maskRadius(): number;
    set maskWidth(value: number);
    get maskWidth(): number;
    set maskHeight(value: number);
    get maskHeight(): number;
    set maskElements(value: any[]);
    get maskElements(): any[];
    set type(value: string);
    get type(): string;
    set enabled(value: boolean);
    get enabled(): boolean;
}
