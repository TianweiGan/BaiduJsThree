/**
 * 引擎核心入口，用来初始化渲染引擎。
 * 内部核心系统包括：
 * - {@link EngineMap} 地图系统
 * - {@link EngineRendering} 渲染系统
 * - {@link EngineEvent} 事件系统
 * - {@link EngineWidgets} UI控件系统
 * - {@link EngineSelection} 选择器系统
 *
 * @category Core
 * @example
 * ```javascript
 * const engine = new Engine(container, options);
 * ```
 */
export class Engine {
    /**
     *
     * @param {HTMLElement} container 容器对象
     * @param {object} options 配置选项
     * @param {object} options.rendering 渲染选项，传入{@link EngineRendering.constructor}的参数
     * @param {object} options.map 地图选项，传入 {@link EngineMap.constructor}的参数
     * @param {object} options.event 事件选项，传入{@link EngineEvent.constructor}的参数
     * @param {object} options.selection 选择器选项，传入{@link EngineSelection.constructor}的参数
     * @param {object} options.widgets 控件选项，传入{@link EngineWidgets.constructor}的参数
     */
    constructor(container: HTMLElement, options?: {
        rendering: object;
        map: object;
        event: object;
        selection: object;
        widgets: object;
    });
    /** @internal */ _container: HTMLElement;
    /** @internal */ _event: EngineEvent;
    /** @internal */ _map: EngineMap;
    /** @internal */ _rendering: EngineRendering;
    /** @internal */ _selection: EngineSelection;
    /** @internal */ _widgets: EngineWidgets;
    isEngine: boolean;
    /**
     * 将object放到渲染场景中
     * @param {Object3D} object threejs或者mapvthree的object对象
     * @returns {Object3D} 返回添加的object对象
     * @example
     * ```javascript
     * const object = new THREE.Mesh();
     * engine.add(object);
     * ```
     * @example
     * ```javascript
     * engine.add(new mapvthree.SimplePoint());
     * ```
     */
    add(object: Object3D): Object3D;
    /**
     * 将object从渲染场景中移除
     * @param {Object3D} object threejs或者mapvthree的object对象
     */
    remove(object: Object3D): void;
    /**
     * 请求一次引擎渲染，此方法会让引擎在下一帧进行一次渲染
     */
    requestRender(): void;
    /**
     * 添加callback函数到函数列表中，每次渲染更新之前执行。
     * 此函数的调用时机发生在渲染循环的开始阶段，所有真实渲染操作均还未执行，物体的所有属性均和通过API设置的一致。
     * @param {Function} callback
     * @example
     * ```javascript
     * engine.addPrepareRenderListener(() => {
     *     console.log('prepare render');
     * });
     * ```
     */
    addPrepareRenderListener(callback: Function): void;
    /**
     * 添加callback函数到函数列表中，每次渲染前时执行。
     * 此时引擎已经将内部的状态更新到最新状态，所有物体的属性均和渲染一致。比如，自动相机偏移已经完成，物体的transform可能已经变为相对于偏移后的相机的transform。
     * @param {Function} callback
     * @example
     * ```javascript
     * engine.addBeforeRenderListener(() => {
     *    console.log('before render');
     * });
     * ```
     */
    addBeforeRenderListener(callback: Function): void;
    /**
     * 从函数列表中移除callback函数，在渲染更新时不再执行
     * @param {Function} callback
     */
    removeBeforeRenderListener(callback: Function): void;
    /**
     * 从函数列表中移除callback函数，在渲染更新之前不再执行
     */
    removePrepareRenderListener(callback: any): void;
    /**
     * 如果对象上有onBeforeScenePrepareRender，记录object对象，每次渲染更新之前执行object上的onBeforeScenePrepareRender函数
     * @param {Object3D} object
     * @private 暂时不对外开放
     */
    private addBeforePrepareRenderObject;
    /**
     * 从记录对象的列表中移除object
     * @param {Object3D} object
     * @private 暂时不对外开放
     */
    private removeBeforePrepareRenderObject;
    /**
     * 如果对象上有onBeforeSceneRender，记录object对象，每次渲染更新之前执行object上的onBeforeSceneRender函数
     * @param {Object3D} object
     * @private 暂时不对外开放，后续会移除
     */
    private addBeforeRenderObject;
    /**
     * 从记录对象的列表中移除object
     * @param {Object3D} object
     * @private 暂时不对外开放，后续会移除
     */
    private removeBeforeRenderObject;
    /**
     * 锁定相机视野
     * @private
     * // TODO: 暂时不对外开放，考虑移到engine.map中
     */
    private lockCamera;
    /**
     * 解锁相机视野
     *  @private
     * // TODO: 暂时不对外开放，考虑移到engine.map中
     */
    private unlockCamera;
    /**
     * 容器对象
     * @type {HTMLElement}
     */
    get container(): HTMLElement;
    /**
     * map对象
     */
    get map(): EngineMap;
    /**
     * rendering对象
     */
    get rendering(): EngineRendering;
    /**
     * UI控件对象
     */
    get widgets(): EngineWidgets;
    /**
     * renderer对象，实际为rendering.renderer的代理对象，此处仅为方便使用
     * @type {WebGLRenderer}
     */
    get renderer(): WebGLRenderer;
    /**
     * 场景对象，实际为rendering.scene的代理对象，此处仅为方便使用
     * @type {Scene}
     */
    get scene(): Scene;
    /**
     * 相机对象，实际为rendering.camera的代理对象，此处仅为方便使用
     * @type {Camera}
     */
    get camera(): Camera;
    /**
     * 事件对象
     */
    get event(): EngineEvent;
    /**
     * 物体选择器
     */
    get selection(): EngineSelection;
    /**
     * 释放全部资源，之后引擎实例不再可用
    */
    dispose(): void;
    /**
     * open版jsapi埋点数据统计
     * @private
    */
    private trackingRequest;
}
import { EngineEvent } from './engine/Event';
import { EngineMap } from './engine/Map';
import { EngineRendering } from './engine/Rendering';
import { EngineSelection } from './engine/Selection';
import { EngineWidgets } from './engine/Widgets';
