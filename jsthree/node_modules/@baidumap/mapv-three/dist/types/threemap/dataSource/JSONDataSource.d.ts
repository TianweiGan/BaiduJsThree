/**
 * JSON格式数据的数据源，支持加载标准JSON对象或通过URL加载远程数据
 *
 * JSONDataSource适用于处理结构化的JSON数据，可以通过自定义解析器处理各种JSON格式。
 * 它提供了灵活的配置选项，允许定义：
 * - 坐标字段名（默认为'coordinates'）
 * - 自定义坐标解析函数
 * - 自定义特征解析函数
 *
 * 支持从多种来源加载数据：
 * - 从URL加载
 * - 直接传入JSON对象
 *
 * @category DataSource
 * @example
 * ```javascript
 * // 示例1: 从URL加载JSON数据
 * const dataSource = await JSONDataSource.fromURL('path/to/data.json');
 *
 * // 示例2: 从JSON对象创建
 * const jsonData = [
 *   { coordinates: 'POINT(116.39 39.9)', name: '北京', value: 100 },
 *   { coordinates: 'POINT(121.47 31.23)', name: '上海', value: 90 }
 * ];
 * const dataSource = JSONDataSource.fromJSON(jsonData);
 *
 * // 示例3: 自定义坐标字段和解析函数
 * const dataSource = new JSONDataSource({
 *   coordinatesKey: 'geometry',
 *   parseCoordinates: (item) => {
 *     return {
 *       type: 'Point',
 *       coordinates: [item.lon, item.lat]
 *     };
 *   }
 * });
 * ```
 */
export class JSONDataSource extends DataSource {
    /**
     * 从URL异步加载JSON数据
     * @param {string} url 数据的URL路径
     * @param {object} [options] 配置选项，传递给{@link JSONDataSource}构造函数
     * @returns {Promise<JSONDataSource>} 包含数据源实例的Promise
     * @example
     * ```javascript
     * const dataSource = await JSONDataSource.fromURL('path/to/data.json');
     * console.log(`加载了${dataSource.size}个数据项`);
     * ```
     */
    static fromURL: (url: string, options?: object) => Promise<JSONDataSource>;
    /**
     * @internal
     * @deprecated 已废弃，请使用{@link JSONDataSource.fromURL}
     * @param {string} url 数据的URL路径
     * @param {object} [options] 配置选项
     * @returns {Promise<JSONDataSource>} 数据源实例
     */
    static fromUrl: (url: string, options?: object) => Promise<JSONDataSource>;
    /**
     * 从JSON对象创建数据源实例
     * @param {object|Array} object JSON数据对象或数组
     * @param {object} [options] 配置选项，传递给{@link JSONDataSource}构造函数
     * @returns {JSONDataSource} 新创建的数据源实例
     * @example
     * ```javascript
     * const jsonData = [
     *   { coordinates: 'POINT(116.39 39.9)', name: '北京' },
     *   { coordinates: 'POINT(121.47 31.23)', name: '上海' }
     * ];
     * const dataSource = JSONDataSource.fromJSON(jsonData);
     * ```
     */
    static fromJSON: (object: object | any[], options?: object) => JSONDataSource;
    /**
     * 创建JSONDataSource实例
     * @param {object} [options={}] 配置选项
     * @param {string} [options.coordinatesKey='coordinates'] 指定JSON中表示坐标的字段名，默认是'coordinates'
     * @param {Function} [options.parseCoordinates] 自定义坐标解析函数，参数为数据项，返回几何对象
     * @param {Function} [options.parseFeature] 自定义特征解析函数，参数为数据项，返回DataItem实例
     * @example
     * ```javascript
     * // 自定义坐标字段和解析方法
     * const dataSource = new JSONDataSource({
     *   coordinatesKey: 'loc',
     *   parseCoordinates: (item) => {
     *     const [lng, lat] = item.loc.split(',');
     *     return {
     *       type: 'Point',
     *       coordinates: [parseFloat(lng), parseFloat(lat)]
     *     };
     *   }
     * });
     * ```
     */
    constructor(options?: {
        coordinatesKey?: string | undefined;
        parseCoordinates?: Function | undefined;
        parseFeature?: Function | undefined;
    });
    /** @private 坐标字段的键名 */
    private _coordinatesKey;
    /**
     * @private
     * 解析coordinates的方法
     */
    private _parseCoordinates;
    /**
     * @private
     * 解析feature的方法
     */
    private _parseFeature;
    type: string;
    /**
     * 将输入数据转换为数组形式
     * @internal
     * @param {object|Array} data 输入数据
     * @returns {Array} 转换后的数组
     */
    _convertObjectDataToJSONData(data: object | any[]): any[];
    /**
     * 解析JSON对象到DataItem数组
     * @internal
     * @param {object|Array} data JSON数据对象
     * @returns {DataItem[]} DataItem数组
     */
    _parseObjectDataToDataItems(data: object | any[]): DataItem[];
    /**
     * 设置坐标字段的键名
     * @param {string} value 新的键名
     * @example
     * ```javascript
     * dataSource.coordinatesKey = 'geometryField';
     * ```
     */
    set coordinatesKey(value: string);
    /**
     * 获取坐标字段的键名
     * @type {string}
     */
    get coordinatesKey(): string;
    /**
     * 设置坐标解析函数
     * @param {Function} value 解析函数，参数为数据项，返回几何对象
     * @example
     * ```javascript
     * dataSource.parseCoordinates = (item) => {
     *   return {
     *     type: 'Point',
     *     coordinates: [item.lon, item.lat]
     *   };
     * };
     * ```
     */
    set parseCoordinates(value: Function);
    /**
     * 获取坐标解析函数
     * @type {Function|undefined}
     */
    get parseCoordinates(): Function | undefined;
    /**
     * 设置特征解析函数
     * @param {Function} value 解析函数，参数为数据项，返回DataItem实例
     * @example
     * ```javascript
     * dataSource.parseFeature = (item) => {
     *   return new DataItem({
     *     geometry: {
     *       type: 'Point',
     *       coordinates: [item.lon, item.lat]
     *     },
     *     properties: {
     *       name: item.name,
     *       value: item.value
     *     }
     *   });
     * };
     * ```
     */
    set parseFeature(value: Function);
    /**
     * 获取特征解析函数
     * @type {Function|undefined}
     */
    get parseFeature(): Function | undefined;
}
import { DataSource } from './DataSource';
import { DataItem } from './DataItem';
