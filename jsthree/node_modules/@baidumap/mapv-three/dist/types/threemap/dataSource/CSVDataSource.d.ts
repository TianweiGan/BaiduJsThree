/**
 * CSV格式数据的数据源，支持加载标准CSV文件或通过URL加载远程数据
 *
 * CSVDataSource继承自{@link JSONDataSource}，专门用于处理CSV格式的数据。
 * CSV数据会被解析为JSON对象数组，每行CSV数据对应一个对象，列名作为对象属性名。
 *
 * 支持两种方式创建数据源：
 * - 从CSV字符串创建
 * - 从URL异步加载
 *
 * @category DataSource
 * @example
 * ```javascript
 * // 示例1: 从CSV字符串创建
 * const csvString = `lat,lng,name,value
 * 39.9,116.39,北京,100
 * 31.23,121.47,上海,90
 * 23.13,113.26,广州,80`;
 * const dataSource = CSVDataSource.fromCSVString(csvString);
 *
 * // 示例2: 从URL加载
 * const dataSource = await CSVDataSource.fromURL('path/to/data.csv');
 * ```
 */
export class CSVDataSource extends JSONDataSource {
    /**
     * 从URL异步加载CSV数据
     * @param {string} url 数据的URL路径
     * @param {object} [options] 配置选项，传递给{@link JSONDataSource}构造函数
     * @returns {Promise<CSVDataSource>} 包含数据源实例的Promise
     * @example
     * ```javascript
     * const dataSource = await CSVDataSource.fromURL('path/to/data.csv');
     * console.log(`加载了${dataSource.size}个数据项`);
     * ```
     */
    static fromURL: (url: string, options?: object) => Promise<CSVDataSource>;
    /**
     * @internal
     * @deprecated 已废弃，请使用{@link CSVDataSource.fromURL}
     * @param {string} url 数据的URL路径
     * @param {object} [options] 配置选项
     * @returns {Promise<CSVDataSource>} 数据源实例
     */
    static fromUrl: (url: string, options?: object) => Promise<CSVDataSource>;
    /**
     * 从CSV字符串创建数据源实例
     * @param {string} csvString CSV格式的字符串
     * @param {object} [options] 配置选项，传递给{@link JSONDataSource}构造函数
     * @returns {CSVDataSource} 新创建的数据源实例
     * @example
     * ```javascript
     * const csvString = `lat,lng,name,value
     * 39.9,116.39,北京,100
     * 31.23,121.47,上海,90`;
     * const dataSource = CSVDataSource.fromCSVString(csvString);
     * ```
     */
    static fromCSVString: (csvString: string, options?: object) => CSVDataSource;
    /**
     * 创建CSVDataSource实例
     * @param {object} [options] 配置选项，传递给{@link JSONDataSource}构造函数
     */
    constructor(options?: object);
    /**
     * 将响应流转换为文本
     * @internal
     * @param {Response} rs 请求响应对象
     * @returns {Promise<string>} 解析后的文本内容
     */
    _convertStreamingDataToObjectData(rs: Response): Promise<string>;
    /**
     * 将CSV字符串转换为JSON对象数组
     * @internal
     * @param {string} dataString CSV格式字符串
     * @returns {Array<object>} 解析后的JSON对象数组
     */
    _convertObjectDataToJSONData(dataString: string): Array<object>;
}
import { JSONDataSource } from './JSONDataSource';
