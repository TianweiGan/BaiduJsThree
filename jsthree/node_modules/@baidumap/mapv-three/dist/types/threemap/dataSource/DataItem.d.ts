/**
 * 数据元素类，表示单个可渲染的数据项
 *
 * DataItem是数据源中的基本单元，用于存储和管理单个地理要素的数据。
 * 它支持多种几何类型（点、线、面）及其multi-*变体，并能处理不同投影之间的坐标转换。
 *
 * 每个DataItem包含：
 * - 几何数据：坐标信息
 * - 属性数据：与几何关联的业务数据
 * - 投影信息：坐标的参考系统
 *
 * @category DataSource
 * @example
 * ```javascript
 * // 创建一个点要素
 * const point = new DataItem({
 *   type: 'Feature',
 *   geometry: {
 *     type: 'Point',
 *     coordinates: [116.39, 39.9]
 *   },
 *   properties: {
 *     name: '北京',
 *     value: 100
 *   }
 * });
 *
 * // 创建一个线要素
 * const line = new DataItem({
 *   type: 'Feature',
 *   geometry: {
 *     type: 'LineString',
 *     coordinates: [
 *       [116.39, 39.9],
 *       [121.47, 31.23]
 *     ]
 *   },
 *   properties: {
 *     name: '北京-上海',
 *     value: 500
 *   }
 * });
 * ```
 */
export class DataItem {
    /**
     * 创建数据元素实例
     * @param {Object|Array<number>|Vector3} feature 几何信息
     *   - Object: GeoJSON格式的Feature数据
     *   - Array<number>: 点坐标数组，如[lng, lat]或[lng, lat, alt]
     *   - Vector3: Three.js的三维向量
     * @param {object} [extraAttributes={}] 附加属性对象
     *   - 特殊属性'id'：用于标识数据元素
     *   - 特殊属性'crs'：源投影信息
     * @param {boolean} [forceProjected=false] 是否强制视为已投影坐标
     * @example
     * ```javascript
     * // 从GeoJSON特征创建
     * const item = new DataItem({
     *   type: 'Feature',
     *   geometry: {
     *     type: 'Point',
     *     coordinates: [116.39, 39.9]
     *   },
     *   properties: { name: '北京' }
     * });
     *
     * // 从坐标数组创建点
     * const point = new DataItem([116.39, 39.9]);
     *
     * // 从Three.js向量创建
     * const vector = new THREE.Vector3(116.39, 39.9, 0);
     * const vectorPoint = new DataItem(vector);
     * ```
     */
    constructor(feature: Object | Array<number> | Vector3, extraAttributes?: object, forceProjected?: boolean);
    /** @private 原始坐标 */
    private _originalCoordinates;
    /** @private 属性数据 */
    private _attributes;
    /** @private 要素ID */
    private _id;
    /** @private 源投影名称 */
    private _sourceProjectionName;
    /** @private 经纬度坐标 */
    private _coordinates;
    /** @private 不同投影下的坐标缓存 */
    private _projectedCoordinates;
    /** @private 几何类型 */
    private _type;
    /** @private 是否为多要素类型 */
    private _isMulti;
    /** @private 多要素时的要素数量 */
    private _size;
    /** @private 数据是否有效 */
    private _isValid;
    /**
     * 获取指定投影下的坐标
     * @param {object} projection 投影对象
     * @param {number} [index=0] 多要素时的索引
     * @returns {Array} 投影后的坐标
     * @example
     * ```javascript
     * // 获取Web墨卡托投影下的坐标
     * const projection = getProjection('EPSG:3857');
     * const coords = dataItem.getProjectedCoordinates(projection);
     *
     * // 对于MultiLineString，获取第2条线的坐标
     * const lineCoords = dataItem.getProjectedCoordinates(projection, 1);
     * ```
     */
    getProjectedCoordinates(projection: object, index?: number): any[];
    /**
     * 将数据转换为GeoJSON格式
     * @returns {object} GeoJSON Feature对象
     * @example
     * ```javascript
     * const geojson = dataItem.toGeoJSON();
     * console.log(geojson.geometry.type); // 'Point'等
     * console.log(geojson.properties); // 属性对象
     * ```
     */
    toGeoJSON(): object;
    /**
     * 设置数据项的坐标
     * @param {Array} coordinates 新的坐标数组
     * @param {object} [projection] 坐标所属的投影
     * @example
     * ```javascript
     * // 更新点的位置
     * dataItem.setCoordinates([118.28, 40.22]);
     *
     * // 设置已投影的坐标
     * const projection = getProjection('EPSG:3857');
     * dataItem.setCoordinates([12620000, 4830000], projection);
     * ```
     */
    setCoordinates(coordinates: any[], projection?: object): void;
    /**
     * 设置数据项的单个属性
     * @param {string} key 属性名
     * @param {*} value 属性值
     * @example
     * ```javascript
     * dataItem.setAttribute('name', '北京');
     * dataItem.setAttribute('value', 100);
     * ```
     */
    setAttribute(key: string, value: any): void;
    /**
     * 设置数据项的多个属性
     * @param {object} attributes 属性对象
     * @example
     * ```javascript
     * dataItem.setAttributes({
     *   name: '北京',
     *   value: 100,
     *   color: [255, 0, 0]
     * });
     * ```
     */
    setAttributes(attributes: object): void;
    /**
     * 获取数据项的所有属性
     * @type {object}
     */
    get attributes(): object;
    /**
     * 设置数据项的ID，只能设置一次
     * @param {string|number} value 新的ID值
     */
    set id(value: string | number);
    /**
     * 获取数据项的ID
     * @type {string|number}
     */
    get id(): string | number;
    /**
     * 获取数据项的经纬度坐标
     * @type {Array}
     */
    get coordinates(): any[];
    /**
     * 获取数据项的源投影名称
     * @type {string}
     */
    get sourceProjectionName(): string;
    /**
     * 获取数据项的几何类型
     * @type {number}
     * @see {@link GEOMETRY_TYPE_POINT}, {@link GEOMETRY_TYPE_LINE}, {@link GEOMETRY_TYPE_POLYGON}
     */
    get type(): number;
    /**
     * 是否为多要素类型（MultiPoint, MultiLineString, MultiPolygon）
     * @type {boolean}
     */
    get isMulti(): boolean;
    /**
     * 多要素时的要素数量，单要素时为1
     * @type {number}
     */
    get size(): number;
    /**
     * 数据项是否有效
     * @type {boolean}
     */
    get isValid(): boolean;
}
