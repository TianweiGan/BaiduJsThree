/**
 * 空白天空，仅提供基本的天空和光照系统，包含日光、环境光和太阳位置控制，不包含天空背景的渲染。
 * 可以通过设置时间来改变光照方向和强度，模拟一天中不同时间的光照效果。
 *
 * 如果想要使用背景效果更好的天空，可以使用{@link DefaultSky}或者{@link DynamicSky}
 *
 * @category Natural
 * @example
 * ```javascript
 * // 创建空白天空
 * const sky = engine.add(new mapvthree.EmptySky());
 *
 * // 设置时间为中午12点
 * sky.time = 3600 * 12;
 * ```
 */
export class EmptySky {
    /**
     * 创建一个空白天空实例
     * 初始化光照系统，包括太阳光源和环境
     * @param {object} options
     * @param {number} options.time 初始时间， 单位秒。例如：3600 * 15.5代表15点30分
     */
    constructor(options?: {
        time: number;
    });
    /**
     * 标识为EmptySky对象
     * @type {boolean}
     * @readonly
     */
    readonly isEmptySky: boolean;
    /** @private */ private _addDefaultEnvMap;
    /** @private */ private _time;
    /** @private */ private _timeRatio;
    /** @private */ private _startTimestamp;
    /** @private */ private _timeAnimation;
    /** @private */ private _timeAnimationSpeed;
    /** @private */ private _skyLightIntensity;
    /** @private */ private _sunLightIntensity;
    /** @private */ private _skyLightAttenuationRatio;
    /** @private */ private _sunIntensityBias;
    /** @private */ private _sunIntensityScale;
    /** @private */ private _envLightIntensity;
    /** @private */ private _weather;
    /** @private */ private _timeChangedListeners;
    /** @private */ private _sunDirection;
    /** @private */ private _localSunDirection;
    /** @private */ private _sunLightColorDay;
    /** @private */ private _sunLightColorSunset;
    /** @private */ private _sunLightColorCurrent;
    /** @private */ private _sunRadian;
    /** @private */ private _skyLightColorDay;
    /** @private */ private _skyLightColorNight;
    /** @private */ private _groundLightColorDay;
    /** @private */ private _groundLightColorNight;
    /** @private */ private _lightNeedsUpdate;
    /** @private */ private _sunNeedsUpdate;
    /** @private */
    private _affectWorld;
    sunLight: any;
    skyLight: any;
    renderOrder: number;
    _sunLightGradientColorLerp: GradientColorLerp;
    /**
     * 设置环境光强度
     * @type {number}
     * @internal
     */
    set envLightIntensity(value: number);
    /**
     * 环境光强度
     * @type {number}
     * @internal
     */
    get envLightIntensity(): number;
    /**
     * 添加到引擎后的初始化
     * @protected
     * @param {Engine} engine 引擎实例
     */
    protected afterAddToEngine(engine: Engine): void;
    engine: any;
    /**
     * 设置时间，更新太阳光源位置与光照强度，单位是秒<br />
     * 通常可以设置成小时*3600，比如 12 * 3600 表示中午12点
     * @type {number}
     * @example
     * ```javascript
     * // 设置时间为早上8点
     * sky.time = 3600 * 8;
     *
     * // 设置时间为下午6点
     * sky.time = 3600 * 18;
     * ```
     */
    set time(time: number);
    /**
     * 获取当前设置的时间
     * @type {number}
     */
    get time(): number;
    /**
     * 从引擎移除前的清理
     * @protected
     * @param {Engine} engine 引擎实例
     */
    protected beforeRemoveFromEngine(engine: Engine): void;
    /**
     * 更新时间
     * @protected
     */
    protected tickTime(): void;
    /**
     * 每次渲染时，更新时间和光照
     * @protected
     */
    protected onBeforeScenePrepareRender(): void;
    _timeChanged: boolean | undefined;
    /**
     * 根据太阳光的高度来更新太阳光和天空光的光照强度和颜色
     * @protected
     */
    protected updateLight(): void;
    /**
     * 更新太阳阴影
     * @protected
     */
    protected updateSunLightShadowCamera: () => void;
    /**
     * 添加时间变化后需要执行的监听函数listener
     * @param {Function} listener
     */
    addTimeChangedListener(listener: Function): void;
    /**
     * 从时间变化后需要执行的监听函数的列表中移除listener
     * @param {Function} listener
     */
    removeTimeChangedListener(listener: Function): void;
    /**
     * 时间变化后的回调函数
     * @param {number} time 时间，单位ms
     * @internal
     */
    onTimeChanged(time: number): void;
    /**
     * 天气变化后的回调函数
     * @param {string} weather 天气
     * @internal
     */
    onWeatherChanged(weather: string): void;
    /**
     * 释放资源
     */
    dispose(): void;
    /**
     * 设置当前天气
     * @type {string}
     * @internal
     */
    set weather(weather: string);
    /**
     * 获取当前天气设置
     * @type {string}
     * @internal
     */
    get weather(): string;
    /**
     * 设置是否自动更新时间
     * @type {boolean}
     * @internal
     * @example
     * ```javascript
     * // 启用自动时间更新
     * sky.timeAnimation = true;
     *
     * // 禁用自动时间更新
     * sky.timeAnimation = false;
     * ```
     */
    set timeAnimation(timeAnimation: boolean);
    get timeAnimation(): boolean;
    /**
     * 自动更新时间的速度，代表1毫秒等于实际的多少秒
     * @type {number}
     * @internal
     * @example
     * ```javascript
     * // 设置1毫秒等于实际1秒
     * sky.timeAnimationSpeed = 1;
     *
     * // 设置1毫秒等于实际0.5秒
     * sky.timeAnimationSpeed = 0.5;
     * ```
     */
    set timeAnimationSpeed(timeAnimationSpeed: number);
    get timeAnimationSpeed(): number;
    /**
     * 太阳光的强度偏移，在计算太阳光强度时添加该偏移量的大小
     * @type {number}
     * @internal
     * @example
     * ```javascript
     * // 增加太阳光强度
     * sky.sunIntensityBias = 0.5;
     *
     * // 减少太阳光强度
     * sky.sunIntensityBias = -0.5;
     * ```
     */
    set sunIntensityBias(value: number);
    get sunIntensityBias(): number;
    /**
     * 太阳光强度的缩放值
     * @type {number}
     * @internal
     * @example
     * ```javascript
     * // 增加太阳光强度
     * sky.sunIntensityScale = 1.2;
     *
     * // 减少太阳光强度
     * sky.sunIntensityScale = 0.8;
     * ```
     */
    set sunIntensityScale(value: number);
    get sunIntensityScale(): number;
    /**
     * 太阳光强度
     * @type {number}
     * @internal
     * @example
     * ```javascript
     * // 设置强光照
     * sky.sunLightIntensity = 5.5;
     *
     * // 设置弱光照
     * sky.sunLightIntensity = 2.0;
     * ```
     */
    set sunLightIntensity(value: number);
    get sunLightIntensity(): number;
    /**
     * 天光强度
     * @type {number}
     * @internal
     * @example
     * ```javascript
     * // 设置强环境光
     * sky.skyLightIntensity = 0.5;
     *
     * // 设置弱环境光
     * sky.skyLightIntensity = 0.1;
     * ```
     */
    set skyLightIntensity(value: number);
    get skyLightIntensity(): number;
    /**
     * 天空光衰减比，该值用于定义天空光最小的衰减值
     * @type {number}
     * @internal
     * @example
     * ```javascript
     * // 设置较大的衰减比
     * sky.skyLightAttenuationRatio = 0.5;
     *
     * // 设置较小的衰减比
     * sky.skyLightAttenuationRatio = 0.1;
     * ```
     */
    set skyLightAttenuationRatio(value: number);
    get skyLightAttenuationRatio(): number;
    /**
     * 太阳光的位置
     * @type {Vector3}
     * @internal
     */
    get sunDirection(): Vector3;
    /**
     * 太阳光的位置
     * @type {Vector3}
     * @internal
     */
    get localSunDirection(): Vector3;
    /**
     * 天空颜色是否影响场景颜色
     * @type {boolean}
     * @internal
     */
    get affectWorld(): boolean;
}
import { GradientColorLerp } from '../../util/GradientColorLerp';
