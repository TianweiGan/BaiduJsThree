/**
 * 动态天气系统，提供多种天气效果模拟，包括晴天、多云、雪、雨和雾等，并支持天气效果之间的平滑过渡。
 * 会调整光照强度、云密度、雾密度以及各种视觉效果来模拟不同的天气状态。
 * 需要基于 {@link DynamicSky} 使用。
 *
 * 支持的天气类型包括：
 * - `clear`: 晴天
 * - `partlyCloudy`: 局部多云
 * - `cloudy`: 多云
 * - `overcast`: 阴天
 * - `foggy`: 雾天
 * - `rainy`: 雨天
 * - `snowy`: 雪天
 *
 * @category Natural
 * @example
 * ```javascript
 * // 创建动态天气系统
 * const weather = engine.add(new mapvthree.DynamicWeather(sky));
 *
 * // 设置为下雪天气
 * weather.weather = 'snowy';
 *
 * // 设置天气过渡时间（毫秒）
 * weather.transitionDuration = 2000;
 * ```
 */
export class DynamicWeather {
    /**
     * 创建一个动态天气实例
     * @param {DynamicSky} sky 关联的动态天空实例
     */
    constructor(sky: DynamicSky);
    /** @private */ private _engine;
    /** @private */ private _sky;
    /** @private */ private _snow;
    /** @private */ private _rain;
    /** @private */ private _weather;
    /** @private */ private _currentConverageTextureType;
    /** @private */ private _tCoverageIntensity;
    /** @private */ private _skyGroundColorBlue;
    /** @private */ private _skyGroundColorGray;
    /** @private */ private _weatherChangedListeners;
    /** @private */
    private _sunLightScale;
    /** @private */
    private _skyLightScale;
    /**
     * 天气变化过渡的持续时间(毫秒)
     * @type {number}
     * @example
     * ```javascript
     * // 设置天气过渡时间为2秒
     * weather.transitionDuration = 2000;
     * ```
     */
    transitionDuration: number;
    /** @private */
    private _transitionStartTime;
    /** @private */
    private _transitionStartState;
    /** @private */
    private _transitionEndState;
    /** @private */
    private _inTransition;
    /** @private */
    private _modifyCount;
    /**
     * 设置天气类型
     * @type {string}
     * @example
     * ```javascript
     * // 设置为晴天
     * weather.weather = 'clear';
     *
     * // 设置为雨天
     * weather.weather = 'rainy';
     * ```
     */
    set weather(weather: string);
    /**
     * 获取当前天气类型
     * @type {string}
     * @example
     * ```javascript
     * // 获取当前天气
     * const currentWeather = weather.weather;
     * ```
     */
    get weather(): string;
    /**
     * 添加到引擎后的初始化
     * @param {Engine} engine 引擎实例
     * @protected
     */
    protected afterAddToEngine(engine: Engine): void;
    /**
     * 从引擎移除前的清理
     * @param {Engine} engine 引擎实例
     * @protected
     */
    protected beforeRemoveFromEngine: (engine: Engine) => void;
    /**
     * 渲染前更新天气效果
     * @internal
     * @param {Engine} engine 引擎实例
     */
    handleBeforeRender: (engine: Engine) => void;
    /**
     * 获取天气覆盖纹理
     * @internal
     * @param {string} type 天气类型
     * @returns {Texture} 天气覆盖纹理
     */
    getCoverageTexture(type: string): Texture;
    /**
     * 根据天气类型更新天气效果
     * @internal
     * @param {string} weather 天气类型
     */
    updateWeather(weather: string): void;
    /**
     * 设置覆盖纹理
     * @type {Texture}
     * @internal
     */
    set tCoverageIntensity(value: Texture);
    /**
     * 获取覆盖纹理
     * @type {Texture}
     * @internal
     */
    get tCoverageIntensity(): Texture;
    /**
     * 更新天气过渡状态
     * @param {number} ratio 过渡进度比例(0-1)
     * @private
     */
    private _updateWeatherTransitionState;
    /**
     * 添加天气变化监听器
     * @param {Function} listener 监听器函数
     * @example
     * ```javascript
     * // 添加天气变化监听
     * weather.addWeatherChangedListener((weatherType) => {
     *     console.log('天气变为:', weatherType);
     * });
     * ```
     */
    addWeatherChangedListener(listener: Function): void;
    /**
     * 移除天气变化监听器
     * @param {Function} listener 监听器函数
     */
    removeWeatherChangedListener(listener: Function): void;
    /**
     * 设置太阳光强度
     * @type {number}
     * @internal
     */
    set sunLightIntensity(value: number);
    /**
     * 获取太阳光强度
     * @type {number}
     * @internal
     */
    get sunLightIntensity(): number;
    /**
     * 设置云层强度
     * @type {number}
     * @internal
     */
    set cloudIntensity(value: number);
    /**
     * 获取云层强度
     * @type {number}
     * @internal
     */
    get cloudIntensity(): number;
    /**
     * 设置天空光强度
     * @type {number}
     * @internal
     */
    set skyLightIntensity(value: number);
    /**
     * 获取天空光强度
     * @type {number}
     * @internal
     */
    get skyLightIntensity(): number;
    /**
     * 设置地面颜色
     * @type {Color}
     * @internal
     */
    set groundColor(value: Color);
    /**
     * 获取地面颜色
     * @type {Color}
     * @internal
     */
    get groundColor(): Color;
    /**
     * 设置灰度混合因子
     * @type {number}
     * @internal
     */
    set mixGrayFactor(value: number);
    /**
     * 获取灰度混合因子
     * @type {number}
     * @internal
     */
    get mixGrayFactor(): number;
    /**
     * 设置覆盖强度
     * @type {number}
     * @internal
     */
    set coverageIntensity(value: number);
    /**
     * 获取覆盖强度
     * @type {number}
     * @internal
     */
    get coverageIntensity(): number;
    /**
     * 设置反射增强纹理
     * @type {Texture}
     * @internal
     */
    set tRelectionEnhancement(value: Texture);
    /**
     * 获取反射增强纹理
     * @type {Texture}
     * @internal
     */
    get tRelectionEnhancement(): Texture;
    /**
     * 设置雾密度
     * @type {number}
     * @internal
     */
    set fogDensity(value: number);
    /**
     * 获取雾密度
     * @type {number}
     * @internal
     */
    get fogDensity(): number;
    /**
     * 设置天空光缩放比例
     * @type {number}
     * @internal
     */
    set skyLightScale(value: number);
    /**
     * 获取天空光缩放比例
     * @type {number}
     * @internal
     */
    get skyLightScale(): number;
    /**
     * 设置太阳光缩放比例
     * @type {number}
     * @internal
     */
    set sunLightScale(value: number);
    /**
     * 获取太阳光缩放比例
     * @type {number}
     * @internal
     */
    get sunLightScale(): number;
}
