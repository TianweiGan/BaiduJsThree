/**
 * 动态天空继承自 {@link EmptySky}，提供高级的大气层渲染、光照变化和云层效果，可以根据时间自动变化光照和天空外观。
 * 支持体积云、大气散射以及环境反射烘培，为3D场景提供真实感的天空和照明效果。
 *
 * @category Natural
 * @example
 * ```javascript
 * // 创建动态天空
 * const sky = engine.add(new mapvthree.DynamicSky());
 *
 * // 设置时间为下午5:30
 * sky.time = 3600 * 17.5;
 * ```
 */
export class DynamicSky extends EmptySky {
    /**
     * 标识为DynamicSky对象
     * @type {boolean}
     * @readonly
     */
    readonly isDynamicSky: boolean;
    /** @private */ private _rtFlipCount;
    /** @private */ private _skyNeedsCapture;
    /** @private */ private _skyNeedsUpdate;
    /** @private */ private _staticEnvMapNeedsUpdate;
    /** @private */ private _realtimeCapture;
    /** @private */ private _envMapType;
    /** @private */ private _PMREMGenerator;
    /** @private */ private _cloud;
    /** @private */ private _envRenderTarget1;
    /** @private */ private _envRenderTarget2;
    /** @private */ private _skyAtmosphere;
    /** @private */ private _lastCameraZ;
    /**
     * 天空名称
     * @type {string}
     * @readonly
     */
    readonly name: string;
    /**
     * 是否启用动态云层
     * @type {boolean}
     * @internal
     */
    dynamicCloud: boolean;
    /**
     * 环境贴图捕获位置,地球模式下根据相机位置计算
     * @type {string}
     * @private
     */
    private _envCaptureLocationKey;
    _upDirection: any;
    _engine: any;
    /**
     * 初始化环境和大气效果
     * @internal
     */
    initEnv(): void;
    _postPass: SkyAtmospherePass | undefined;
    _cloudAmbientBottomColorGradient: GradientColorLerp | undefined;
    _cloudSunIntensityGradient: GradientColorLerp | undefined;
    /**
     * 设置云层效果
     * @private
     */
    private _setupClouds;
    _volumetricCloudsPass: VolumetricCloudsPass | undefined;
    /**
     * 更新实时环境贴图
     * @private
     */
    private updateRealtimeEnvironment;
    _cubeRenderTarget: any;
    _cubeCamera: any;
    _envRT: any;
    _hasCaptureSky: boolean | undefined;
    _lastViewHeight: any;
    /**
     * 更新云层效果
     * @private
     */
    private _updateClouds;
    /**
     * 获取纹理资源
     * @internal
     * @returns {Object} 纹理对象列表
     */
    getTextures(): Object;
    /**
     * 释放环境贴图资源
     * @param {number} type 环境贴图类型
     * @private
     */
    private disposeEnvRenderTarget;
    /**
     * 设置是否使用体积云效果
     * @type {boolean}
     * @internal
     */
    set useVolumetricClouds(value: boolean);
    /**
     * 获取是否使用体积云效果
     * @type {boolean}
     * @internal
     */
    get useVolumetricClouds(): boolean;
    /**
     * 天空颜色是否影响场景颜色
     * @type {boolean}
     * @internal
     */
    set affectWorld(value: boolean);
    /**
     * 天空颜色是否影响场景颜色
     * @type {boolean}
     * @internal
     */
    get affectWorld(): boolean;
    /**
     * 设置云层密度
     * @type {number}
     * @internal
     */
    set cloudIntensity(cloudIntensity: number);
    /**
     * 获取云层密度
     * @type {number}
     * @internal
     */
    get cloudIntensity(): number;
    /**
     * 设置灰度混合因子
     * @type {number}
     * @internal
     */
    set mixGrayFactor(value: number);
    /**
     * 获取灰度混合因子
     * @type {number}
     * @internal
     */
    get mixGrayFactor(): number;
    /**
     * 设置是否实时捕获环境
     * @type {boolean}
     * @internal
     */
    set realtimeCapture(value: boolean);
    /**
     * 获取是否实时捕获环境
     * @type {boolean}
     * @internal
     */
    get realtimeCapture(): boolean;
    /**
     * 获取大气层对象
     * @type {SkyAtmosphere}
     * @internal
     */
    get skyAtmosphere(): SkyAtmosphere;
    /**
     * 设置是否裁剪地下部分
     * @type {boolean}
     * @internal
     */
    set clipUnderground(value: boolean);
    /**
     * 获取是否裁剪地下部分
     * @type {boolean}
     * @internal
     */
    get clipUnderground(): boolean;
    /**
     * 设置是否启用后处理通道
     * @type {boolean}
     * @internal
     */
    set enablePostPass(value: boolean);
    /**
     * 获取是否启用后处理通道
     * @type {boolean}
     * @internal
     */
    get enablePostPass(): boolean;
    /**
     * 设置是否启用体积云效果
     * @type {boolean}
     * @internal
     */
    set enableVolumetricClouds(value: boolean);
    /**
     * 获取是否启用体积云效果
     * @type {boolean}
     * @internal
     */
    get enableVolumetricClouds(): boolean;
    /**
     * 设置云层覆盖率
     * @type {number}
     * @internal
     */
    set cloudCoverage(value: number);
    /**
     * 云层覆盖率，范围0-1
     * @type {number}
     * @internal
     */
    get cloudCoverage(): number;
    /**
     * 设置云层密度
     * @type {number}
     * @internal
     */
    set cloudDensity(value: number);
    /**
     * 云层密度，范围0-1
     * @type {number}
     * @internal
     */
    get cloudDensity(): number;
    /**
     * 设置云层移动速度
     * @type {number}
     * @internal
     */
    set cloudSpeed(value: number);
    /**
     * 云层移动速度
     * @type {number}
     * @internal
     */
    get cloudSpeed(): number;
    /**
     * 设置云层形状基础缩放
     * @type {number}
     * @internal
     */
    set cloudShapeBaseScale(value: number);
    /**
     * 获取云层形状基础缩放
     * @type {number}
     * @internal
     */
    get cloudShapeBaseScale(): number;
    /**
     * 设置云层形状细节缩放
     * @type {number}
     * @internal
     */
    set cloudShapeDetailScale(value: number);
    /**
     * 获取云层形状细节缩放
     * @type {number}
     * @internal
     */
    get cloudShapeDetailScale(): number;
    /**
     * 设置云层渲染步进数
     * @type {number}
     * @internal
     */
    set cloudMarchSteps(value: number);
    /**
     * 获取云层渲染步进数
     * @type {number}
     * @internal
     */
    get cloudMarchSteps(): number;
    /**
     * 设置云层自阴影步进数
     * @type {number}
     * @internal
     */
    set cloudSelfShadowSteps(value: number);
    /**
     * 获取云层自阴影步进数
     * @type {number}
     * @internal
     */
    get cloudSelfShadowSteps(): number;
    /**
     * 获取向上方向
     * @type {Vector3}
     * @internal
     */
    get upDirection(): Vector3;
}
import { EmptySky } from './EmptySky';
import { SkyAtmospherePass } from '../engine/rendering/postprocessing/SkyAtmospherePass';
import { GradientColorLerp } from '../../util/GradientColorLerp';
import { VolumetricCloudsPass } from '../engine/rendering/postprocessing/VolumetricCloudsPass';
import { SkyAtmosphere } from '../../threejs/objects/natural/SkyAtmosphere';
