/**
 * 动态天空，根据时间有不同的光照效果，不能用于BMapGL，如果需要和百度地图叠加使用，请用[[EmptySky]] <br />
 * 需要放到[[Engine]]中生效，继承自[[EmptySky]]
 * ```javascript
 * let sky = engine.add(new mapvthree.DynamicSky());
 * sky.time = 3600 * 17.5;
 * ```
 * ![](media://dynamic_sky.png)
 */
export class DynamicSky extends EmptySky {
    /** @private */
    private constructor();
    isDynamicSky: boolean;
    /** @private */ private _rtFlipCount;
    /** @private */ private _envMapNeedsUpdate;
    /** @private */ private _staticEnvMapNeedsUpdate;
    /** @private */ private _realtimeCapture;
    /** @private */ private _envMapType;
    /** @private */ private _PMREMGenerator;
    /** @private */ private _envCubeRenderTarget1;
    /** @private */ private _envCubeRenderTarget2;
    /** @private */ private _envRenderTarget1;
    /** @private */ private _envRenderTarget2;
    /** @private */ private _lensflare;
    sky: Sky;
    /** @protected */
    protected afterAddToEngine(engine: any): void;
    cloudCubeTexture: any;
    nightMap: any;
    weatherMap: any;
    /**
     * @internal
     * 初始化天空，包括天空的动态材质和比例
     */
    initEnv(): void;
    envSky: any;
    /** @internal */
    updateRealtimeEnvironment: () => void;
    cubeCamera1: any;
    cubeCamera2: any;
    /**
     * @internal
     * 随着天气变化，改变天空光和云雾
     */
    onWeatherChanged(weather: any): void;
    set cloudIntensity(cloudIntensity: any);
    /**
     * 云的浓度，值为0-1之间，值越大浓度越高
     */
    get cloudIntensity(): any;
    getTextures(): any[];
    set rayleighFactor(rayleighFactor: any);
    /**
     * 瑞利比
     */
    get rayleighFactor(): any;
    set mieFactor(mieFactor: any);
    /**
     * 散射因子
     */
    get mieFactor(): any;
    set miePhase(miePhase: any);
    get miePhase(): any;
    set groundColor(groundColor: any);
    /**
     * 地面颜色
     */
    get groundColor(): any;
    set realtimeCapture(value: boolean);
    get realtimeCapture(): boolean;
    set envMapType(envMapType: number);
    get envMapType(): number;
    set clipUnderground(value: any);
    get clipUnderground(): any;
    set shaderIndex(value: number);
    get shaderIndex(): number;
    beforeRemoveFromEngine(engine: any): void;
    /** @protected */
    protected disposeEnvRenderTarget: (type: any) => void;
}
import { EmptySky } from './EmptySky';
import { Sky } from '../../threejs/objects/natural/Sky';
