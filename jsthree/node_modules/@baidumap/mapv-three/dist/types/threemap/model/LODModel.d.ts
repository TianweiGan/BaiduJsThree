/**
 * LOD(Level of Detail)模型类，用于加载和管理不同细节层级的3D模型。
 * 根据相机距离自动切换不同精度的模型，优化渲染性能。
 *
 * @category Model
 * @extends Object3D
 * @example
 * ```javascript
 * const lodModel = new LODModel({
 *     hysteresis: 0.1,
 *     levels: [
 *         { distance: 100, file: 'models/high.glb' },
 *         { distance: 500, file: 'models/medium.glb' },
 *         { distance: 1000, file: 'models/low.glb' }
 *     ]
 * });
 * engine.add(lodModel);
 * ```
 *
 * @example
 * ```javascript
* // 监听单个模型加载完成事件
* lodModel.addEventListener('loaded', (event) => {
*     console.log('模型加载完成:', event.value);
* });
*
* // 监听所有层级加载完成事件
* lodModel.addEventListener('complete', (event) => {
*     console.log('所有层级加载完成');
* });
 * ```
*/
export class LODModel {
    /**
     * LOD模型构造函数
     * @param {Object} parameters 配置参数
     * @param {number} parameters.hysteresis 缩进与拉远的缓冲参数，防止在临界点缩放时抖动，范围 0~1, 默认 0.1
     * @param {Array} parameters.levels levels 层级数据 [{distance: 1000, hysteresis: 0.1, file: 'a/b/c.glb'}]
     */
    constructor(parameters: {
        hysteresis: number;
        levels: any[];
    });
    /** @private */
    private _hysteresis;
    /** @private */
    private _levels;
    /** @private */
    private _currentLevel;
    /** @private */
    private _currentModel;
    /** @private */
    private _loader;
    /**
     * 设置缩进与拉远的缓冲参数，防止在临界点缩放时抖动
     * @type {number}
     * @example
    * ```javascript
    * lodModel.hysteresis = 0.2; // 设置20%的缓冲区间
    * ```
    */
    set hysteresis(value: number);
    /**
     * 获取缩进与拉远的缓冲参数
     * @return {number}
     */
    get hysteresis(): number;
    /**
     * 设置LOD层级配置数组
     * @type {Array<Object>}
     * @example
     * ```javascript
     * lodModel.levels = [
     *     { distance: 100, file: 'high.glb' },
     *     { distance: 500, file: 'medium.glb' },
     *     { distance: 1000, file: 'low.glb' }
     * ];
     * ```
    */
    set levels(levels: Array<Object>);
    /**
     * 获取LOD层级配置数组
     * @return {Array<Object>}
     */
    get levels(): Array<Object>;
    afterAddToEngine(engine: any): void;
    _engine: any;
    _modelMeshSingleton: PromisedSingleton | undefined;
    beforeRemoveFromEngine(engine: any): void;
    /**
     * @internal
     */
    _generateModelMesh: (key: any) => Promise<any>;
    /**
     * 添加一个LOD层级
     * @param {string} file 模型文件路径
     * @param {number} distance 切换距离
     * @param {number} hysteresis 该层级的缓冲参数
     * @returns {LODModel} 返回this
     * @example
    * ```javascript
    * lodModel.addLevel('models/detail.glb', 200, 0.1)
    *         .addLevel('models/simple.glb', 800, 0.1);
    * ```
    */
    addLevel(file: string, distance?: number, hysteresis?: number): LODModel;
    /**
     * 移除指定文件的LOD层级
     * @param {string} file 要移除的模型文件路径
     * @returns {LODModel} 返回this以支持链式调用
     * @example
     * ```javascript
     * lodModel.removeLevel('models/detail.glb');
     * ```
    */
    removeLevel(file: string): LODModel;
    /**
     * 获取当前层级
     * @return {number} 当前层级
     */
    getCurrentLevel(): number;
    /**
     * 获取当前模型
     * @return {Promise<Object3D>} 当前模型
     */
    getCurrentModel(): Promise<Object3D>;
    /**
     * 获取指定层级的模型
     * @param {number} level 层级索引
     * @return {Promise<Object3D>} 模型
     */
    getModel(level: number): Promise<Object3D>;
    update: () => Promise<void>;
    handleLoaded(model: any): void;
    dispose(): void;
    /**
     * 获取模型是否初始化
     * @return {boolean}
     */
    get isInit(): boolean;
    destroyModel(): void;
    /**
     * 设置模型变换参数
     * @type {Object}
     * @example
     * ```javascript
     * lodModel.transform = {
     *     translate: [100, 0, 100],
     *     rotation: [0, Math.PI/2, 0],
     *     scale: 2
     * };
     * ```
    */
    set transform(value: Object);
    /**
     * 获取模型变换参数
     * @return {Object}
    */
    get transform(): Object;
}
import { PromisedSingleton } from '../../util/PromisedSingleton';
