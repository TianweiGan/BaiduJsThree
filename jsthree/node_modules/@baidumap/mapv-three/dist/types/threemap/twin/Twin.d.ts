export class Twin {
    static METHOD_SCHEDULE: string;
    static METHOD_TRIGGER: string;
    /**
     * 内置写实风格的颜色配色
     */
    static REALISTIC_TEMPLATE_COLOR: {
        white: string;
        black: string;
        gray: string;
        blue: string;
        red: string;
        green: string;
        brown: string;
        yellow: string;
        orange: string;
        purple: string;
        cyanl: string;
        pink: string;
    };
    /**
     * 内置写实风格模型
     */
    static REALISTIC_TEMPLATE_MODEL: {
        MAN: string;
        WOMAN: string;
        BICYCLE: string;
        TRICYCLE: string;
        MOTORCYCLE: string;
        ELECTRICBICYCLE: string;
        CAR: string;
        BUS: string;
        SUV: string;
        MPV: string;
        TAXI: string;
        TOUR: string;
        TRUCK: string;
        AMBULANCE: string;
        BIGTRUCK: string;
        DANGEROUS: string;
        FIRETRUCK: string;
        LARGETRUCK: string;
        MINIBUS: string;
        POLICECAR: string;
        SMALLBUS: string;
        SMALLTRUCK: string;
        WATERCAR: string;
        TRAFFICCONE: string;
    };
    /**
     * 内置极简风格模型
     */
    static MINIMALIST_TEMPLATE_MODEL: {
        MAN: string;
        WOMAN: string;
        BICYCLE: string;
        TRICYCLE: string;
        MOTORCYCLE: string;
        ELECTRICBICYCLE: string;
        CAR: string;
        BUS: string;
        SUV: string;
        MPV: string;
        TAXI: string;
        TOUR: string;
        TRUCK: string;
        AMBULANCE: string;
        BIGTRUCK: string;
        DANGEROUS: string;
        FIRETRUCK: string;
        LARGETRUCK: string;
        MINIBUS: string;
        POLICECAR: string;
        SMALLBUS: string;
        SMALLTRUCK: string;
        WATERCAR: string;
        TRAFFICCONE: string;
        MAN_ANIMATE: string;
        WOMAN_ANIMATE: string;
        BICYCLE_ANIMATE: string;
    };
    /**
     * 后端服务type字段的对应模型
     * https://ku.baidu-int.com/knowledge/HFVrC7hq1Q/CIkDF2HdNp/BGGav_8G2q/fCH0YBPu8UD-7Q
     */
    static SERVICE_TEMPLATE_MODEL: {
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        17: string;
        18: string;
        19: string;
        20: string;
        21: string;
        22: string;
        23: string;
        24: string;
        25: string;
        26: string;
        27: string;
    };
    /**
     * 构造函数，用于创建Twin
     * @param {{modelConfig?: { [modelType: number]: string },
     *   delay?: number, objectAttributes?: { [key: string]: string },
     *   objectAttributes?: object,
     *   extraDir?: number,objects: Array
     * }} options 配置选项
     * @param {{ [modelType: number]: string }} options.modelConfig  - 模型配置, key为modelType，value为模型地址
     * @param {number} options.delay - 数据刷新的时间间隔，默认为2000毫秒
     * @param {{ [key: string]: string }} options.objectAttributes - 播放器所需数据，对应key值
     * @param {Array<Object3D>} options.objects - 车辆额外伴随物体
     * @param {number} options.extraDir - 模型额外角度
     * @param {number} options.keepSize - 模型是否保持大小不变
     * @param {number} options.maxScale - 模型是否保持大小不变
     */
    constructor(options?: {
        modelConfig?: {
            [modelType: number]: string;
        };
        delay?: number;
        objectAttributes?: {
            [key: string]: string;
        };
        objectAttributes?: object;
        extraDir?: number;
        objects: any[];
    });
    /** @private */ private engine;
    /** @private */ private _dataProvider;
    /** @private */ private _delay;
    /** @private */ private _entityManager;
    /** @private */ private _isPause;
    /** @private */ private _isStarted;
    /** @private */ private _objectTracker;
    /** @private */ private _pauseTime;
    /** @private */ private _trackInfo;
    /** @private */ private _objectMap;
    /** @private */ private _visibleMap;
    /** @private */ private _objectVisibleMap;
    /** @private */ private _disposed;
    /** @private */ private options;
    /** @private 模型额外角度 */ private _extraDir;
    /**
     * @private
     * modelType和model的映射关系
     */
    private _modelConfig;
    /**
     * @private
     * 模型是否完成加载
     */
    private _modelLoaded;
    /**
     * @private
     * modelType和每帧entity返回buffers的映射
     */
    private _buffers;
    /**
     * @private
     * modelType和模型实例的映射
     */
    private _instances;
    /**
     * 有动画的模型实例的映射
     * @private
     */
    private _animationInstances;
    /**
     * @private
     * 除模型外的孪生虚拟实体
     */
    private _objects;
    /**
     * @private
     * 除模型外的孪生虚拟实体的 dataSource 的 attribute 映射
     */
    private _objectAttributes;
    isEventEntitySupported: boolean;
    /** @private */
    private set modelConfig(value);
    /** @private */
    private get modelConfig();
    /**
     * @protected
     */
    protected afterAddToEngine(engine: any): void;
    /** @private */
    private set objects(value);
    /** @private */
    private get objects();
    onBeforeSceneRender(engine: any, scene: any, camera: any, renderState: any): void;
    onBeforeScenePrepareRender(engine: any, scene: any, camera: any, renderState: any): void;
    push(data: any): void;
    pause(): void;
    start(): void;
    reset(): void;
    /**
     * @private
     */
    private handleBeforeRender;
    /**
     * 过滤缓冲区数据
     * @private
     * @param {Object} modelIndexMap - 模型索引映射表
     * @param {number} model - 模型编号
     * @returns {Object} - 包含模型数据的对象，包括id、translation、rotation、scale、modelType和color等属性
     */
    private _filterBuffer;
    /** @private */
    private loadModelAsync;
    modelClear(): void;
    disposeMesh(mesh: any): void;
    disposeScene(scene: any): void;
    objectsClear(): void;
    /** @private */
    private getCurrentBuffers;
    /**
     * 设置车辆颜色
     * @param {*} id 车辆ID
     * @param {*} color 色值
     */
    setColorById(id: any, color: any): void;
    /**
     * @protected
     */
    protected _track(): void;
    /**
     * 追踪车辆
     * @param {*} id 车辆ID
     * @param {Object} option 配置
     * @param {number} option.radius 距离
     * @param {number} option.pitch 俯仰角
     * @param {number} option.height 高度
     * @param {number} option.inside 是否车内视角
     */
    trackById(id: any, option?: {
        radius: number;
        pitch: number;
        height: number;
        inside: number;
    }): any;
    /**
     * 清除追踪
     */
    clearTrack(): void;
    dispose(): void;
    instanceClick: (e: any) => void;
    getModelInstance(modelType: any): any;
    getTwinIdOnModel(model: any): any;
    getTwinModelTypeOnModel(model: any): any;
    /**
     * 克隆多个对象
     * @private
     * @returns {Array} 克隆后的对象数组
     */
    private cloneObjects;
    /**
     * 根据模型类型设置可见性
     *
     * @param modelType 模型类型
     * @param status 可见性状态
     */
    setVisibleByType(modelType: any, status: any): void;
    /**
     * 根据模型类型设置附加物可见性
     *
     * @param modelType 模型类型
     * @param status 可见性状态
     */
    setObjectVisibleByType(modelType: any, status: any): void;
    getEntityByIntersection(intersection: any): any;
    /** @private */
    private get dataProvider();
    /** @private */
    private get entityManager();
    /** @private */
    private set objectAttributes(value);
    /** @private */
    private get objectAttributes();
    get models(): {};
}
