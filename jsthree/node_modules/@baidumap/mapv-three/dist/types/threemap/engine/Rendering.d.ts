/**
 * 渲染管理器<br/>
 * 该类会随{@link Engine}的初始化自动实例化，不需要开发者手动执行初始化，通过`engine.rendering`访问，
 * 与渲染相关的配置和控制都在此类中实现
 *
 * @category Internal
 * @example
 * ```javascript
 * engine.rendering.features.bloom.enabled = true;
 * engine.rendering.enableAnimationLoop = true;
 * engine.rendering.animationLoopFrameTime = 16;
 * ```
 */
export class EngineRendering {
    /**
     * @param {Engine} engine
     * @param {object} overrideOptions
     * @param {object} overrideOptions.contextParameters webgl context参数,大部分由引擎内部设置，开发者不需要关心
     * @param {boolean} overrideOptions.contextParameters.preserveDrawingBuffer 是否保留绘图缓冲区, 默认false,开启截图时需要设置为true
     * @param {number} overrideOptions.pixelRatio 像素缩放, 默认window.devicePixelRatio
     * @param {object} overrideOptions.features 渲染特性配置
     * @param {object} overrideOptions.features.antialias 抗锯齿配置
     * @param {boolean} overrideOptions.features.antialias.enabled 是否开启抗锯齿, 默认true
     * @param {string} overrideOptions.features.antialias.method 抗锯齿方法, 默认'smaa'
     * @param {object} overrideOptions.features.bloom 泛光配置
     * @param {boolean} overrideOptions.features.bloom.enabled 是否开启泛光, 默认false
     * @param {number} overrideOptions.features.bloom.strength 泛光强度, 默认0.1
     * @param {number} overrideOptions.features.bloom.threshold 泛光阈值, 默认1
     * @param {number} overrideOptions.features.bloom.radius 泛光半径, 默认0
     * @param {boolean} overrideOptions.enableAnimationLoop 是否开启动画循环, 默认false
     * @param {number} overrideOptions.animationLoopFrameTime 动画循环帧时间, 默认16
     */
    constructor(engine: Engine, overrideOptions?: {
        contextParameters: {
            preserveDrawingBuffer: boolean;
        };
        pixelRatio: number;
        features: {
            antialias: {
                enabled: boolean;
                method: string;
            };
            bloom: {
                enabled: boolean;
                strength: number;
                threshold: number;
                radius: number;
            };
        };
        enableAnimationLoop: boolean;
        animationLoopFrameTime: number;
    });
    /** @private */ private _engine;
    /** @private */ private _outputEncoding;
    /** @private */ private _enableAnimationLoop;
    /** @private */ private _animationLoopFrameTime;
    /** @private */ private _uniforms;
    /** @private */ private _main;
    /** @private */ private _bloom;
    /** @private */ private _ssr;
    /** @private */ private _composition;
    /** @private */ private _label;
    /** @private */ private _renderState;
    /** @private */ private _camera;
    /** @private */ private _canvas;
    /** @private */ private _context;
    /** @private */ private _renderer;
    /** @private */ private _scene;
    /** @private */ private _weather;
    /** @private */ private _useMRT;
    /** @private */ private _isUseMRTChanged;
    /** @private */ private _freezeUpdate;
    /** @private */ private _isRunning;
    /** @private */ private _needsRenderImmediately;
    /** @private */ private _needsRenderNext;
    /** @private */ private _beforeRenderListeners;
    /** @private */ private _prepareRenderListeners;
    /** @private */ private _startTime;
    /** @private */ private _pixelRatio;
    /** @private */ private _resolution;
    /** @private */ private _sky;
    /** @private */ private _debugShaderType;
    /** @private */ private _beforeScenePrepareRenderObjects;
    /** @private */ private _beforeSceneRenderObjects;
    /** @private */ private _onRenderModeChangedObjects;
    /** @private */ private _useClip;
    /** @private */
    private _wireframe;
    /** @private */
    private _debugMaterial;
    /** @private */
    private _debugMode;
    /** @private 是否自动偏移相机和场景，以使worldMatrix偏移值较小 */
    private _autoOffsetRelativeCenter;
    /** @private 是否自动计算相机近远裁剪面 */
    private _clampCameraNearFar;
    /** @private */
    private _options;
    /** @private */
    private lastRenderTime;
    /** @private */
    private _contextParameters;
    /** @private */
    private _needsReCreateRenderer;
    /** @private */
    private _frameDuration;
    /** @private
    *
    */
    private _useHighPrecisionBuffer;
    _useXR: any;
    _stats: RenderingStats;
    _picking: Picking;
    _collision: RenderingCollision;
    _animation: RenderingAnimation;
    _xr: RenderingXr;
    _taskScheduler: RenderingMicroTaskScheduler;
    /**
     * @internal
     */
    getInitialConfig(overrideConfig: any): Object;
    /**
     * @internal
     * 初始化函数，创建canvas、camera、scene等对象，获得渲染器renderer
     */
    init(): void;
    uiScene: any;
    objectsScene: any;
    environmentScene: any;
    /**
     * @internal
     */
    _createRenderer(): void;
    /** @internal */
    handleShaderBeforeResolve: (vertexShader: any, fragmentShader: any, parameters: any) => {
        vertexShader: any;
        fragmentShader: any;
    };
    /** @internal */
    handleShaderBeforeCompile: (vertexShader: any, fragmentShader: any, parameters: any) => {
        vertexShader: any;
        fragmentShader: any;
    };
    /** @internal */
    handleMaterialBeforeCompile: (material: any, shader: any) => void;
    /** @internal */
    convertMrtSupportedFragment: (fragmentShader: any) => any;
    /** @internal */
    convertNMrtSupportedFragment: (fragmentShader: any, shaderID: any) => any;
    /**
     * @internal 由engine.addPrepareRenderListener调用
     * 添加callback函数到函数列表中，每次渲染更新时执行
     * @param {Function} callback
     */
    addBeforeRenderListener(callback: Function): void;
    /**
     * @internal 由engine.removeBeforeRenderListener调用
     * 从函数列表中移除callback函数，在渲染更新时不再执行
     * @param {Function} callback
     */
    removeBeforeRenderListener(callback: Function): void;
    /**
     * @internal 由engine.addPrepareRenderListener调用
     * 添加callback函数到函数列表，在object.onBeforeScenePrepareRender执行之后执行
     * @param {Function} callback
     */
    addPrepareRenderListener(callback: Function): void;
    /**
     * @internal 由engine.removePrepareRenderListener调用
     * 从函数列表中移除callback函数，在渲染更新时不再执行
     * @param {Function} callback
     */
    removePrepareRenderListener(callback: Function): void;
    /**
     * @internal 由engine.add调用
     * 添加scene到渲染场景中
     * @param {Object3D} scene scene为一个Object3D对象
     * @returns {Object3D}
     */
    add(scene: Object3D): Object3D;
    set sky(value: null);
    /**
     * 天空实例。
     * 如果场景中有天空，则返回天空实例，否则返回null
     */
    get sky(): null;
    set weather(value: any);
    /**
     * 天气实例。
     * 如果场景中有天气，则返回天气实例，否则返回null
     */
    get weather(): any;
    /**
     * @internal 由engine.remove调用
     * 将scene从渲染场景中移除
     * @param {Object3D} scene scene为一个Object3D对象
     */
    remove(scene: Object3D): void;
    /**
     * @internal
     * 如果对象上有onBeforeScenePrepareRender，记录object对象，每次渲染更新之前执行object上的onBeforeScenePrepareRender函数
     * @param {Object3D} object
     */
    addBeforePrepareRenderObject(object: Object3D): void;
    /**
     * @internal
     * 从记录对象的列表中移除object
     * @param {Object3D} object
     */
    removeBeforePrepareRenderObject(object: Object3D): void;
    /**
     * @internal
     * 如果对象上有onBeforeSceneRender，记录object对象，每次渲染更新之前执行object上的onBeforeSceneRender函数
     * @param {Object3D} object
     */
    addBeforeRenderObject(object: Object3D): void;
    /**
     * @internal
     * 从记录对象的列表中移除object
     * @param {Object3D} object
     */
    removeBeforeRenderObject(object: Object3D): void;
    /** @internal */
    addOnRenderModeChangeObject(object: any): void;
    /** @internal */
    removeOnRenderModeChangeObject(object: any): void;
    /**
     * @internal
     * 开启循环渲染，在每一次raf都会请求重新渲染更新场景
     */
    startRenderLoop(): void;
    /**
     * @internal
     * 停止循环渲染
     */
    stopRenderLoop(): void;
    /**
     * @internal
     * 更新地图相机
     */
    updateCamera(): void;
    /**
     * @internal 由engine.requestRender调用
     * 请求一次渲染更新
     */
    requestRender(): void;
    /**
     * @internal
     * 渲染场景
     * @param {number} time
     */
    renderScene(time: number): void;
    _useMRTChanged: boolean | undefined;
    /**
     * @internal
     * 计算相机近远裁剪面
     */
    _computeCameraNearFar(): void;
    _computeObjectNearFar(object: any, camera: any, frustum: any, nearFar: any, nearFarObjects: any): void;
    /** @internal */
    _beginFrame(): void;
    /** @internal */
    _endFrame(): void;
    /**
     * @internal
     * 判断是否需要渲染更新，当需要重新渲染时进行一次更新操作
     * @returns
     */
    render: () => void;
    /**
     * @internal
     * 更新webgl context参数
     * @param {object} parameters
     */
    updateContextParameters(parameters: object): void;
    /**
     * @internal
     * 设置分辨率
     * @param {Vector2} resolution
     */
    setResolution(resolution: Vector2): void;
    /**
     * @internal
     * 根据当前地图中心点获取缩放比例
     */
    scaleZAtCurrentPosition: () => void;
    /**
     *  @internal
     * 显示当前视图视锥体，供调试
     */
    showCurrentViewFrustum: () => void;
    _currentViewCamera: any;
    _currentViewCameraHelper: any;
    /**
     * @internal
     * 移除当前视图视锥体
     */
    removeCurrentViewFrustum: () => void;
    /**
     * 释放场景中的资源，停止渲染更新操作。 由engine.dispose调用
     */
    dispose(): void;
    /**
     * @internal
     * 获取引擎实例
     */
    get engine(): Engine;
    /**
     * 获取当前webgl context参数
     */
    get contextParameters(): {
        alpha: boolean;
        stencil: boolean;
        antialias: boolean;
        powerPreference: string;
        preserveDrawingBuffer: boolean;
        premultipliedAlpha: boolean;
    };
    /** @internal */
    set debugShaderType(value: number);
    /** @internal */
    get debugShaderType(): number;
    /** @internal */
    get isUseMRTChanged(): boolean | undefined;
    /** @internal */
    set useMrt(value: boolean);
    /** @internal */
    get useMrt(): boolean;
    /**
     * @internal
     * 设置mrt实例
     */
    set useMRT(value: boolean);
    /**
     * @internal
     * mrt实例
     */
    get useMRT(): boolean;
    /**
     * @internal
     * 获取main实例
     */
    get main(): RenderingMainNew;
    /**
     * @internal
     * 阴影实例
     */
    get shadow(): import("./rendering/features/Shadow").FeatureShadow;
    /**
     * @internal
     * Bloom实例，用于模拟泛光效果
     */
    get bloom(): import("./rendering/features/Bloom").FeatureBloom;
    /**
     * @internal
     * ssr实例，用于开启屏幕空间反射来优化展示效果
     */
    get ssr(): {};
    /**
     * @internal
     * 合成实例，用于合成场景
     */
    get composition(): {};
    /**
     * @internal
     * 雾实例
     */
    get fog(): {};
    /**
     * @internal
     * 后处理实例
     */
    get postprocessing(): {};
    /**
     * 标签实例
     */
    get label(): RenderingLabel;
    /**
     * @internal
     * 颜色调整，可以调整亮度、饱和度、对比度等值
     */
    get colorAdjustment(): import("./rendering/features/ColorAdjustment").FeatureColorAdjustment;
    /**
     * 用来保存渲染状态，如视图矩阵、相机的世界坐标等信息
     */
    get renderState(): RenderState;
    /**
     * @deprecated
     * @internal
     * 获取拾取实例
     */
    get pick(): Picking;
    /**
     * 获取拾取器实例
     */
    get picking(): Picking;
    /**
     * 获取渲染统计实例
     */
    get stats(): RenderingStats;
    /**
     * @internal
     * 全局碰撞检测管理
     */
    get collision(): RenderingCollision;
    /**
     * 动画管理器
     */
    get animation(): RenderingAnimation;
    /**
     * @internal
     * WebXR管理
     */
    get xr(): RenderingXr;
    get taskScheduler(): RenderingMicroTaskScheduler;
    set enableAnimationLoop(value: any);
    /**
     * 是否开启循环渲染
     */
    get enableAnimationLoop(): any;
    /**
     * 设置循环渲染的事件间隔
     * @param {number} value
     */
    set animationLoopFrameTime(value: number);
    /**
     * 循环渲染的事件间隔，默认为16ms
     */
    get animationLoopFrameTime(): number;
    /**
     * @internal
     * 设置渲染场景分辨率
     */
    set resolution(value: any);
    /**
     * 渲染场景分辨率
     */
    get resolution(): any;
    /**
     * 设置设备像素比
     * @param {number} value
     */
    set pixelRatio(value: number);
    /**
     * 设备像素比，默认为window.devicePixelRatio
     */
    get pixelRatio(): number;
    /**
     * @internal 无效
     * 设置渲染器的输出编码
     */
    set outputEncoding(value: any);
    /**
     * @internal 无效
     * 渲染器的输出编码，默认为sRGBEncoding
     */
    get outputEncoding(): any;
    /**
     * @internal
     * 绘图对象canvas实例
     */
    get canvas(): any;
    /**
     * 渲染器对象
     */
    get renderer(): any;
    /**
     * 相机对象
     */
    get camera(): any;
    /**
     * 场景对象
     */
    get scene(): any;
    /**
     * @internal
     * 全局uniforms对象，其包括time、elapsedTime、pixelRatio、zoomUnits、resolution
     */
    get uniforms(): {
        time: {
            value: number;
        };
        elapsedTime: {
            value: number;
        };
        pixelRatio: {
            value: number;
        };
        zoomUnits: {
            value: number;
        };
        resolution: {
            value: any;
        };
    };
    /**
     * @internal 无效
     * 在debug模式下，是否开启线框模式
     */
    set wireframe(value: boolean);
    /**
     * @internal 无效
     * 在debug模式下，是否开启线框模式
     */
    get wireframe(): boolean;
    /**
     * 渲染器的debug模式，可以设置为DEBUG_MODE_NONE、DEBUG_MODE_MESH、DEBUG_MODE_MATERIAL、DEBUG_MODE_OBJECT
     */
    set debugMode(value: number);
    /**
     * 渲染器的debug模式
     * @returns {number}
     */
    get debugMode(): number;
    /**
     * 设置是否自动偏移相机和场景，以使worldMatrix偏移量较小
     */
    set autoOffsetRelativeCenter(value: boolean);
    /**
     * 是否自动偏移相机和场景，以使worldMatrix偏移量较小
     */
    get autoOffsetRelativeCenter(): boolean;
    /**
     * 设置是否禁止更新
     */
    set freezeUpdate(freezeUpdate: boolean);
    /**
     * 是否禁止更新
     */
    get freezeUpdate(): boolean;
    /**
     * 设置是否使用高质量的渲染缓冲区
     * @param {boolean} value
     */
    set useHighPrecisionBuffer(value: boolean);
    /**
     * 是否使用高质量的渲染缓冲区，默认false。
     * 该参数会影响到渲染的性能和质量，开启后会使用高质量的渲染缓冲区，关闭后会使用低质量的渲染缓冲区。
     * 有的渲染特性需要开启该参数才能正常工作，如泛光、反射等。这些内置的渲染特性会自动开启该参数。
     * 当您在未使用高级渲染特性，但需要使用高质量的渲染缓冲区提升画面质量时，可以手动开启该参数。
     */
    get useHighPrecisionBuffer(): boolean;
    /**
     * @internal
     * 设置是否自动计算相机近远裁剪面
     */
    set clampCameraNearFar(value: boolean);
    /**
     * @internal 实验特性，需要适配各种场景
     * 是否自动计算相机近远裁剪面
     */
    get clampCameraNearFar(): boolean;
}
import { RenderingStats } from './rendering/Stats';
import { Picking } from './rendering/Picking';
import { RenderingCollision } from './rendering/Collision';
import { RenderingAnimation } from './rendering/Animation';
import { RenderingXr } from './rendering/Xr';
import { RenderingMicroTaskScheduler } from './rendering/MicroTaskScheduler';
import { RenderingMainNew } from './rendering/MainNew';
import { RenderingLabel } from './rendering/Label';
import { RenderState } from './rendering/RenderState';
