export class CesiumMath {
    static EPSILON1: number;
    static EPSILON2: number;
    static EPSILON3: number;
    static EPSILON4: number;
    static EPSILON5: number;
    static EPSILON6: number;
    static EPSILON7: number;
    static EPSILON8: number;
    static EPSILON9: number;
    static EPSILON10: number;
    static EPSILON11: number;
    static EPSILON12: number;
    static EPSILON13: number;
    static EPSILON14: number;
    static EPSILON15: number;
    static EPSILON16: number;
    static EPSILON17: number;
    static EPSILON18: number;
    static EPSILON19: number;
    static EPSILON20: number;
    static EPSILON21: number;
    static PI: number;
    static ONE_OVER_PI: number;
    static PI_OVER_TWO: number;
    static PI_OVER_THREE: number;
    static PI_OVER_FOUR: number;
    static PI_OVER_SIX: number;
    static THREE_PI_OVER_TWO: number;
    static TWO_PI: number;
    static ONE_OVER_TWO_PI: number;
    static RADIANS_PER_DEGREE: number;
    static equalsEpsilon(left: any, right: any, relativeEpsilon: any, absoluteEpsilon: any): boolean;
    static toRadians(deg: any): any;
    static clamp(value: any, min: any, max: any): any;
    static acosClamped(value: any): number;
    static asinClamped(value: any): number;
    static sign(value: any): number;
    static zeroToTwoPi(angle: any): any;
    static mod(m: any, n: any): any;
    static chordLength(angle: any, radius: any): number;
    /**
     * Produces an angle in the range -Pi <= angle <= Pi which is equivalent to the provided angle.
     *
     * @param {number} angle in radians
     * @returns {number} The angle in the range [<code>-CesiumMath.PI</code>, <code>CesiumMath.PI</code>].
     */
    static negativePiToPi(angle: number): number;
    static normalize(value: any, rangeMinimum: any, rangeMaximum: any): any;
}
