/**
 * 地图管理器<br/>
 * 该类会随{@link Engine}的初始化自动实例化，不需要开发者手动执行初始化调用，通过`engine.map`访问
 *
 * @category Internal
 * @example
 * ```javascript
 * engine.map.setCenter(center);
 * engine.map.setZoom(14);
 * ```
 */
export class EngineMap {
    /**
     * @param {Engine} engine 引擎实例
     * @param {object} options 参数选项，默认为空对象
     * @param {TileProvder} options.provider 初始状态的底图Provider，该Provider决定初始化时显示什么样的地图。当不设置时，默认初始化百度矢量地图。
     * 初始化时，引擎默认根据`provider`自动创建一层底图，当需要进行复杂设置（如加载地形、实现多底图层叠等）时，可设置为`null`禁用初始化行为，通过{@link MapView}稍后设置。
     * @param {string} options.projection 目标投影。默认为EPSG:3857,即Web墨卡托投影。
     * 可选投影包括：
     * - `EPSG:4326`：WGS84坐标系，经纬度形式。
     * - `EPSG:3857`：Web墨卡托投影，单位为米。别名包括`EPSG:900913`。
     * - `EPSG:4978`：ECEF坐标系，单位为米。别名包括`ECEF`、`GLOBE`。
     * @param {number[]|Vector2} options.center 初始视野中心点，经纬度形式。
     * @param {number} options.heading 初始视野旋转角度，以正北向为起始，逆时针方向递增。单位为角度。
     * @param {number} options.pitch 初始视野俯仰角，俯视为0，平时地平线为90。单位为角度。
     * @param {number} options.range 初始视野相机相对屏幕中心点对应的地面坐标的距离。单位为米。
     */
    constructor(engine: Engine, options?: {
        provider: TileProvder;
        projection: string;
        center: number[] | Vector2;
        heading: number;
        pitch: number;
        range: number;
    });
    /** @private */ private _engine;
    /** @private */ private _map;
    /** @private */ private _container;
    /** @private */ private _mapType;
    _options: {
        provider: TileProvder;
        projection: string;
        center: number[] | Vector2;
        heading: number;
        pitch: number;
        range: number;
    };
    isGlobe: boolean | undefined;
    _projection: any;
    /** @internal */
    init(): void;
    /** @internal */
    afterInit(): void;
    _mapView: any;
    /** @internal */
    handleViewChange: () => void;
    /** @internal */
    handleResolutionChange: (resolution: any) => void;
    /**
     * 设置地图中心点
     * @param {Array<number>} center 中心点坐标
     */
    setCenter(center: Array<number>): void;
    /**
     * 设置地图缩放级别
     * @param {number} zoom 缩放级别
     */
    setZoom(zoom: number): void;
    /**
     * 设置地图选转角度
     * @param {number} heading 选转角度
     */
    setHeading(heading: number): void;
    /**
     * 设置地图倾斜角度
     * @param {number} pitch 倾斜角度
     */
    setPitch(pitch: number): void;
    /**
     * 设置地图视野距离地面的距离
     * @param {number} range 距离
     */
    setRange(range: number): void;
    /**
     * 设置地图可拖动视野区域
     * @param {Array} bounds 区域的坐标，左下、右上的做标数组[sw, ne]
     */
    setBounds(bounds: any[]): void;
    /**
     * @internal
     * // TODO: rename
     * 锁定地图拖拽
     * @param {*} status 状态
     */
    lockDrag(status: any): void;
    /**
     * 设置3d地图最远视距
     * @param {number} range 距离
     */
    setMaxRange(range: number): void;
    /**
     * 设置地图视野
     * @param {Array | Vector3} target 目标视野中心点
     * @param {Object} offset 视野角度，包括 heading、pitch，其中3d支持range、2d支持zoom
     * @param {number} offset.heading 视野旋转角度，以正北向为起始，逆时针方向递增。单位为角度。
     * @param {number} offset.pitch 视野俯仰角，俯视为0，平时地平线为90。单位为角度。
     * @param {number} offset.range 视野距离地面的距离。单位为米。
     */
    lookAt(target: any[] | Vector3, offset?: {
        heading: number;
        pitch: number;
        range: number;
    }): void;
    /**
     * @internal
     * @deprecated
     * 获取地图的视野区域，和getBounds是重复
     * @returns {Box3}
     */
    getBoundingBox(): Box3;
    /**
     * 获取地图当前中心点
     * @returns {number[]}
     */
    getCenter(): number[];
    /**
     * 获取地图当前视线方向距离地面的距离
     * @returns {number}
     */
    getRange(): number;
    /**
     * @internal zoom相关概念先不对外暴露
     * 获取地图当前缩放级别
     * @returns {number}
     */
    getZoom(): number;
    /**
     * @internal zoom相关概念先不对外暴露
     * 获取地图当前缩放级别下，1像素对应多少墨卡托单位
     * @returns {number}
     */
    getZoomUnits(): number;
    /**
     * @internal zoom相关概念先不对外暴露
     * 根据传入zoomUnits值计算合适的缩放级别
     * @param {number} zoomUnits
     * @returns {number}
     */
    getZoomByZoomUnits(zoomUnits: number): number;
    /**
     * @internal zoom相关概念先不对外暴露
     * 根据传入缩放级别计算合适的ZoomUnits值
     * @param {number} zoom
     * @returns {number}
     */
    getZoomUnitsByZoom(zoom: number): number;
    /**
     * 获取地图当前旋转角度
     * @returns {number}
     */
    getHeading(): number;
    flyTo(target: any, offset?: {}): any;
    /**
     * 获取地图当前倾斜角度
     * @returns {number}
     */
    getPitch(): number;
    /**
     * 获取地图当前中心点的投影坐标
     * @returns {number[]}
     */
    getProjectionCenter(): number[];
    /**
     * @internal
     * @deprecated
     * 获取地图当前相机到地面的距离,和range是一个意思
     * @param {boolean} forceUpdate
     * @returns {number}
     */
    getCameraDistance(forceUpdate: boolean): number;
    /**
     * 获取地图当前可视范围边界坐标，返回Box3对象，坐标为投影坐标格式
     * @returns {Box3}
     */
    getBounds(): Box3;
    getProjectionBounds(): any;
    /**
     * 获取地图当前容器的长度和宽度
     * @returns {Vector2}
     */
    getResolution(): Vector2;
    /**
     * 按照当前投影方式，将输入坐标转为投影坐标
     * @param {Array<number>} input 输入坐标
     * @param {Array<number>} output 输出坐标
     * @returns {number[]}
     */
    projectArrayCoordinate(input: Array<number>, output: Array<number>): number[];
    /**
     * 按照当前投影方式，将输入坐标转为地理坐标
     * @param {Array<number>} input
     * @param {Array<number>} output
     * @returns {number[]}
     */
    unprojectArrayCoordinate(input: Array<number>, output: Array<number>): number[];
    /**
     * @internal
     * @deprecated
     * @param {Array<number>} input
     * @param {Array<number>} output
     * @returns {number[]}
     */
    projectPointArr(input: Array<number>, output: Array<number>): number[];
    /**
     * @internal
     * @deprecated
     * @param {Array<number>} input
     * @param {Array<number>} output
     * @returns {number[]}
     */
    unprojectPointArr(input: Array<number>, output: Array<number>): number[];
    /**
     * 将地理坐标转换为投影坐标
     * @param {Vector3} input
     * @param {Vector3} output
     * @returns {Vector3}
     */
    projectCoordinate(input: Vector3, output: Vector3): Vector3;
    /**
     * 将投影坐标转换为地理坐标
     * @param {Vector3} input
     * @param {Vector3} output
     * @returns {Vector3}
     */
    unprojectCoordinate(input: Vector3, output: Vector3): Vector3;
    /**
     * 转换坐标数组
     * @param {*} coordinates
     * @returns {number[]}
     */
    projectArrayCoordinates(coordinates: any): number[];
    /**
     * 开启地图控制，允许用户拖动、平移、旋转等操作
     */
    enableControl(): void;
    /**
     * 禁用地图控制
     */
    disableControl(): void;
    /**
     * @internal
     * 更新地图相机
     */
    updateCamera(): void;
    /**
     * 不对
     * @internal
     * @deprecated
     * 获取地图当前缩放比例
     * @param {Array<number>} point
     * @returns {number}
     */
    getScaleAt(point: Array<number>): number;
    /**
     * 视野推进放大
     */
    zoomIn(): void;
    /**
     * 视野拉远缩小
     */
    zoomOut(): void;
    /**
     * 将地图缩放至object范围
     * @param {Object3D} object
     * @param {Object} options
     * @param {number} options.range 视野距离地面的距离。单位为米。
     */
    zoomTo(object: Object3D, options?: {
        range: number;
    }): void;
    /**
     * 获取地图当前视图高度
     * @returns {number}
     */
    getViewHeight(): number;
    /**
     * 获取地图当前相机位置,经纬度坐标和高度
     * @param {Object3D} target
     * @returns {Vector3}
     */
    getCameraLocation(target: Object3D): Vector3;
    /**
     * 根据传入的坐标数组，设置地图视野
     * @param {Array} points 坐标数组
     * @param {Object} options 偏移参数
     * @param {number} options.range 视野距离地面的距离。单位为米。
     */
    setViewport(points: any[], options?: {
        range: number;
    }): void;
    /**
     * @internal
     */
    bindCanvas(): void;
    /**
     * @internal
     */
    releaseCanvas(): void;
    /**
     * @internal
     * 根据传入的像素坐标，获取对应位置的地面世界坐标
     * @param {Array<number>} pixel
     * @returns {Vector3}
     */
    pickSeaLevelWorldPosition(pixel: Array<number>): Vector3;
    /**
     * 销毁地图实例，移除其绑定事件
     */
    dispose(): void;
    /**
     * @internal
     * 设置分辨率改变时的回调函数
     */
    set onResolutionChanged(value: any);
    /**
     * @internal
     * 获取地图当前投影方式名称
     */
    get projectionName(): any;
    /**
     * @internal
     * 获取地图实例
     */
    get map(): any;
    /**
     * @internal
     * 获取地图类型
     */
    get mapType(): string | undefined;
    /**
     * 获取map的dom容器
     */
    get container(): any;
    set fov(fov: any);
    /**
     * 获取地图视野开角
     */
    get fov(): any;
    /**
     * 获取地图近裁面距离
     */
    get near(): any;
    /**
     * 获取地图远裁面距离
     */
    get far(): any;
    set projection(value: any);
    /**
     * 获取投影方式
     */
    get projection(): any;
    /**
     * 获取初始化时创建的默认地图视图
     */
    get mapView(): any;
}
