export class StaticMatrix3 {
    static fromQuaternion(quaternion: any, result: any): any;
    static getColumn(matrix: any, index: any, result: any): any;
    static multiplyByVector(matrix: any, v: any, result: any): any;
    static multiplyByScale(matrix: any, scale: any, result: any): any;
    static transpose(m: any, result: any): any;
    static fromScale(scale: any, result: any): any;
    static multiply(a: any, b: any, result: any): any;
    static clone(matrix: any, result: any): any;
    /**
     * Computes a new matrix that replaces the specified column in the provided matrix
     * with the provided Cartesian3 instance.
     *
     * @param {Matrix3} matrix The matrix to use.
     * @param {number} index The zero-based index of the column to set.
     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified column.
     * @param {Matrix3} result The object onto which to store the result.
     * @returns {Matrix3} The modified result parameter.
     *
     * @exception {DeveloperError} index must be 0, 1, or 2.
     */
    static setColumn(matrix: Matrix3, index: number, cartesian: Cartesian3, result: Matrix3): Matrix3;
}
export namespace StaticMatrix3 {
    let ZERO: any;
    let COLUMN0ROW0: number;
    let COLUMN0ROW1: number;
    let COLUMN0ROW2: number;
    let COLUMN1ROW0: number;
    let COLUMN1ROW1: number;
    let COLUMN1ROW2: number;
    let COLUMN2ROW0: number;
    let COLUMN2ROW1: number;
    let COLUMN2ROW2: number;
}
