export class RenderingMicroTaskScheduler {
    constructor(rendering: any);
    /**
     * 保存最近几帧的时间，用于计算平均帧时间
     * @type {number[]}
     * @private
     */
    private _frameDurationList;
    /**
     * 最大任务数量，
     * 超过这个数量的任务将直接执行
     */
    _maxTaskCount: number;
    /**
     * 存储任务队列
     * @type {Array<{task: Function, priority: number}>}
     */
    _taskQueue: Array<{
        task: Function;
        priority: number;
    }>;
    _rendering: any;
    beginFrame(): void;
    _frameStartTime: number | undefined;
    _lastFrameStartTime: number | undefined;
    endFrame(): void;
    /**
     * 添加一个微任务
     * @param {Function} task - 返回 Promise 的任务函数
     * @param {number} priority - 任务优先级（默认为 0，值越大优先级越高）
     */
    addTask(taskFunc: any, priority?: number): MicroTask;
    set maxTaskCount(value: number);
    get maxTaskCount(): number;
    get taskCount(): number;
}
declare class MicroTask {
    constructor(task: any, priority?: number);
    taskFunc: any;
    priority: number;
    _isCancelled: boolean;
    _isStart: boolean;
    execute(): void;
    cancel(): void;
    isCancelled(): boolean;
    isStart(): boolean;
}
export {};
