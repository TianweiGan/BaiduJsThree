export class Earth extends BaseMap {
    constructor(engine: any, map: any, options: any);
    MERCATOR_LENGTH: number;
    projectionName: string;
    near: number;
    fov: number;
    _farScale: number;
    domContainer: any;
    _ellipsoid: Readonly<Ellipsoid>;
    mode: number;
    mapProjection: GeographicProjection;
    afterInit(): void;
    _ellipsoidCamera: EllipsoidCamera | undefined;
    _globe: Globe | undefined;
    _occluder: EllipsoidalOccluder | undefined;
    _initControl(): void;
    _controllerScene: {
        camera: EllipsoidCamera | undefined;
        canvas: any;
        globe: Globe | undefined;
        mode: number;
        globeHeight: number;
        mapProjection: GeographicProjection;
        rendering: any;
    } | undefined;
    _controller: ScreenSpaceCameraController | undefined;
    _bindEvents(): void;
    handleContextMenu: (e: any) => void;
    handleEventPointerDown: (e: any) => void;
    handleEventPointerUp: (e: any) => void;
    handleEventClick: (e: any) => void;
    handleEventDblClick: (e: any) => void;
    handleEventMouseMove: (e: any) => void;
    getContainerSize(): any[];
    getResolution(): any;
    getCenter(): any;
    /**
     * 获取投影中心点，直接计算和椭球的交点
     * @returns {number[]} 和椭球交点的投影中心点的投影坐标
     */
    getProjectionCenter(): number[];
    getPitch(): any;
    getHeading(): number;
    getRoll(): any;
    getRange(): any;
    /**
     * @deprecated
     */
    getZoom(): number;
    /**
     * @deprecated
     * 根据相机高度计算，在3D场景下不适用
     */
    getZoomUnits(): number;
    getCameraDistance(): any;
    getZoomUnitsByZoom(zoom: any): number;
    getZoomByZoomUnits(zoomUnits: any): number;
    getProjectionBounds(): any;
    getBounds(): any;
    setCenter(center: any): void;
    setProjectionCenter(projectionCenter: any): void;
    setHeading(heading: any): void;
    setPitch(pitch: any): void;
    setZoom(zoom: any): void;
    setRange(range: any): void;
    zoomIn(): void;
    zoomOut(): void;
    updateView(): void;
    handleViewChange: () => void;
    handleMapResize: () => void;
    /**
     * @param {Vector3 | Array} target 视野目标点坐标
     * @param {*} options 飞行参数，包含heading、pitch、range,飞行结束的回调函数complete
     */
    flyTo(target: Vector3 | any[], options?: any): void;
    /**
     * 设置视野中心点
     * @param {Vector3 | Array} target 视野目标点坐标
     * @param {*} offset 视野参数，包含heading、pitch、range
     */
    lookAt(target: Vector3 | any[], offset?: any): void;
    /**
     * 设置相机的位置
     * @param {Vector3 | Array} destination 相机的目标位置坐标
     * @param {*} orientation 相机方向参数，包含heading、pitch、roll，单位为角度，或者direction、up
     */
    setView(destination: Vector3 | any[], orientation?: any): void;
    /**
     * 根据EllipsoidCamera的相机参数更新真实相机对象
     */
    _syncFromEllipsoidCamera(): void;
    /**
     * 更新相机
     */
    updateCamera(): void;
    enableControl(): void;
    disableControl(): void;
    getCameraLocation(target: any): any;
    setInputAction(action: any, type: any): void;
    getInputAction(type: any): any;
    removeInputAction(type: any): void;
    get occluder(): EllipsoidalOccluder | undefined;
    set canvas(canvas: any);
    get canvas(): any;
    _canvas: any;
    set farScale(value: number);
    get farScale(): number;
}
import { BaseMap } from '../BaseMap';
import { Ellipsoid } from './Ellipsoid';
import { GeographicProjection } from './GeographicProjection';
import { EllipsoidCamera } from './EllipsoidCamera';
import { Globe } from './Globe';
import { EllipsoidalOccluder } from './EllipsoidalOccluder';
import { ScreenSpaceCameraController } from './ScreenSpaceCameraController';
