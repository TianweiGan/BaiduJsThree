export function HeadingPitchRoll(heading: any, pitch: any, roll: any): void;
export class HeadingPitchRoll {
    constructor(heading: any, pitch: any, roll: any);
    /**
   * Gets or sets the heading.
   * @type {number}
   * @default 0.0
   */
    heading: number;
    /**
   * Gets or sets the pitch.
   * @type {number}
   * @default 0.0
   */
    pitch: number;
    /**
   * Gets or sets the roll.
   * @type {number}
   * @default 0.0
   */
    roll: number;
    clone(result: any): HeadingPitchRoll;
    equals(right: any): boolean;
    equalsEpsilon(right: any, relativeEpsilon: any, absoluteEpsilon: any): boolean;
    toString(): string;
}
export namespace HeadingPitchRoll {
    /**
     * Computes the heading, pitch and roll from a quaternion (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )
     *
     * @param {Quaternion} quaternion The quaternion from which to retrieve heading, pitch, and roll, all expressed in radians.
     * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.
     * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.
     */
    function fromQuaternion(quaternion: Quaternion, result?: HeadingPitchRoll): HeadingPitchRoll;
    /**
     * Returns a new HeadingPitchRoll instance from angles given in degrees.
     *
     * @param {number} heading the heading in degrees
     * @param {number} pitch the pitch in degrees
     * @param {number} roll the heading in degrees
     * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.
     * @returns {HeadingPitchRoll} A new HeadingPitchRoll instance
     */
    function fromDegrees(heading: number, pitch: number, roll: number, result?: HeadingPitchRoll): HeadingPitchRoll;
    /**
     * Duplicates a HeadingPitchRoll instance.
     *
     * @param {HeadingPitchRoll} headingPitchRoll The HeadingPitchRoll to duplicate.
     * @param {HeadingPitchRoll} [result] The object onto which to store the result.
     * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided. (Returns undefined if headingPitchRoll is undefined)
     */
    function clone(headingPitchRoll: HeadingPitchRoll, result?: HeadingPitchRoll): HeadingPitchRoll;
    /**
     * Compares the provided HeadingPitchRolls componentwise and returns
     * <code>true</code> if they are equal, <code>false</code> otherwise.
     *
     * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.
     * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.
     * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.
     */
    function equals(left?: HeadingPitchRoll, right?: HeadingPitchRoll): boolean;
    /**
     * Compares the provided HeadingPitchRolls componentwise and returns
     * <code>true</code> if they pass an absolute or relative tolerance test,
     * <code>false</code> otherwise.
     *
     * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.
     * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.
     * @param {number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.
     * @param {number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.
     * @returns {boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.
     */
    function equalsEpsilon(left?: HeadingPitchRoll, right?: HeadingPitchRoll, relativeEpsilon?: number, absoluteEpsilon?: number): boolean;
}
