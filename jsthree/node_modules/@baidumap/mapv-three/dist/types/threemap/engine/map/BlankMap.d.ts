/** @protected */
export class BlankMap extends BaseMap {
    static EARTH_RADIUS: number;
    static DEFAULT_CENTER: number[];
    constructor(engine: any, map: any, options?: {});
    isBlankMap: boolean;
    MERCATOR_LENGTH: number;
    projectionName: string;
    origin: number[];
    center: number[];
    zoom: number;
    pitch: number;
    heading: number;
    bounds: number[][];
    near: number;
    /** @private */
    private _far;
    fov: number;
    /** @private
     * 相机经纬度坐标和高度
    */
    private _cameraLocation;
    domContainer: any;
    afterInit(): void;
    resetHome(): void;
    initControl(): void;
    control: MapControl | undefined;
    getContainerSize(): any[];
    getResolution(): any;
    getCenter(): number[];
    getZoom(): number;
    getPitch(): number;
    getZoomUnitsByZoom(zoom: any): number;
    getCameraLocation(target: any): any;
    getZoomByZoomUnits(zoomUnits: any): number;
    getZoomUnits(): number;
    getHeading(): number;
    enableControl(): void;
    disableControl(): void;
    handleViewChange: () => void;
    handleMapResize: () => void;
    handleEventClick: (e: any) => void;
    handleEventDblClick: (e: any) => void;
    handleEventPointerDown: (e: any) => void;
    handleEventPointerUp: (e: any) => void;
    handleEventMouseMove: (e: any) => void;
    _getPixelFromEvent: (e: any) => number[];
    setCameraMatrix(): void;
    _updateCameraLocation(): void;
    updateCamera(): void;
    computeMapCameraMatrix(camera: any, center: any, zoom: any, pitch: any, heading: any): void;
    zoomUnits: number | undefined;
    cameraDistance: number | undefined;
    setCenter(center: any): void;
    setProjectionCenter(projectionCenter: any): void;
    setZoom(zoom: any): void;
    zoomIn(): void;
    zoomOut(): void;
    setHeading(heading: any): void;
    setPitch(pitch: any): void;
    setMaxRange(range: any): void;
    lookAt(target: any, offset?: {}): void;
    /**
         * 根据heading、pitch计算相机的旋转quaternion
         */
    _getCameraQuaternion(heading: any, pitch: any): any;
    flyTo(target: any, options: any): void;
    _currentFlight: {
        startObject: {};
        stopObject: {};
        duration: number;
        complete: any;
        cancel: any;
    } | {
        duration: any;
        easingFunction: any;
        startObject: {
            time: number;
        };
        stopObject: {
            time: any;
        };
        update: any;
        complete: () => void;
        cancel: () => void;
    } | undefined;
    cancelFlight(): void;
    setBounds(bounds: any): void;
    /**
     * 根据俯仰角计算NDC坐标的Y值因子，用于调整视角倾斜时的屏幕空间坐标。
     * @returns {number} NDC坐标的Y值因子
     */
    getNdcYFactor(): number;
    /**
     * 获取主视野区域的地理坐标范围
     * @returns {Box3} 地理坐标范围，坐标为投影坐标
     */
    getProjectionBounds(): Box3;
    /**
     * 获取主视野区域的坐标范围
     * @returns {Box3} 坐标范围，坐标为经纬度坐标
     */
    getBounds(): Box3;
    updateView(): void;
    getCameraDistance(): number | undefined;
    getProjectionCenter(): number[];
    set far(value: number);
    get far(): number;
}
import { BaseMap } from './BaseMap';
import { MapControl } from '../../../threejs/controls/MapControl';
