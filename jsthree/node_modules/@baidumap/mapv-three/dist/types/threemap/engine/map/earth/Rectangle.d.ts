export class Rectangle {
    constructor(west: any, south: any, east: any, north: any);
    west: any;
    south: any;
    east: any;
    north: any;
    /**
     * Gets the width of the rectangle in radians.
     * @memberof Rectangle.prototype
     * @type {number}
     * @readonly
     */
    readonly get width(): number;
    /**
     * Gets the height of the rectangle in radians.
     * @memberof Rectangle.prototype
     * @type {number}
     * @readonly
     */
    readonly get height(): number;
}
export namespace Rectangle {
    function fromDegrees(west: any, south: any, east: any, north: any, result: any): any;
    /**
     * Computes the width of a rectangle in radians.
     * @param {Rectangle} rectangle The rectangle to compute the width of.
     * @returns {number} The width.
     */
    function computeWidth(rectangle: Rectangle): number;
    /**
       * Computes the height of a rectangle in radians.
       * @param {Rectangle} rectangle The rectangle to compute the height of.
       * @returns {number} The height.
       */
    function computeHeight(rectangle: Rectangle): number;
    function clone(rectangle: any, result: any): any;
    /**
     * Computes the southwest corner of a rectangle.
     *
     * @param {Rectangle} rectangle The rectangle for which to find the corner
     * @param {Vector3} [result] The object onto which to store the result.
     * @returns {Vector3} The modified result parameter or a new Cartographic instance if none was provided.
     */
    function southwest(rectangle: Rectangle, result?: Vector3): Vector3;
    /**
     * Computes the northeast corner of a rectangle.
     *
     * @param {Rectangle} rectangle The rectangle for which to find the corner
     * @param {Vector3} [result] The object onto which to store the result.
     * @returns {Vector3} The modified result parameter or a new Cartographic instance if none was provided.
     */
    function northeast(rectangle: Rectangle, result?: Vector3): Vector3;
    /**
     * Computes the southeast corner of a rectangle.
     *
     * @param {Rectangle} rectangle The rectangle for which to find the corner
     * @param {Vector3} [result] The object onto which to store the result.
     * @returns {Vector3} The modified result parameter or a new Cartographic instance if none was provided.
     */
    function southeast(rectangle: Rectangle, result?: Vector3): Vector3;
    /**
     * Computes the northwest corner of a rectangle.
     *
     * @param {Rectangle} rectangle The rectangle for which to find the corner
     * @param {Vector3} [result] The object onto which to store the result.
     * @returns {Vector3} The modified result parameter or a new Cartographic instance if none was provided.
     */
    function northwest(rectangle: Rectangle, result?: Vector3): Vector3;
    /**
     * Computes the center of a rectangle.
     *
     * @param {Rectangle} rectangle The rectangle for which to find the center
     * @param {Vector3} [result] The object onto which to store the result.
     * @returns {Vector3} The modified result parameter or a new Cartographic instance if none was provided.
     */
    function center(rectangle: Rectangle, result?: Vector3): Vector3;
    /**
     * Returns true if the cartographic is on or inside the rectangle, false otherwise.
     *
     * @param {Rectangle} rectangle The rectangle
     * @param {Vector3} cartographic The cartographic to test.
     * @returns {boolean} true if the provided cartographic is inside the rectangle, false otherwise.
     */
    function contains(rectangle: Rectangle, cartographic: Vector3): boolean;
    function fromBox(box: any, result: any, restrict?: boolean): any;
    let MAX_VALUE: Readonly<Rectangle>;
}
