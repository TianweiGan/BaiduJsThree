export class Ellipsoid {
    static fromCartesian3(vector: any): Ellipsoid;
    static clone(ellipsoid: any, result: any): any;
    constructor(x: any, y: any, z: any);
    _radii: any;
    _radiiSquared: any;
    _radiiToTheFourth: any;
    _oneOverRadii: any;
    _oneOverRadiiSquared: any;
    _minimumRadius: number;
    _maximumRadius: number;
    _centerToleranceSquared: number;
    _squaredXOverSquaredZ: number | undefined;
    geodeticSurfaceNormalCartographic(cartographic: any, result: any): any;
    cartographicDegreeToCartesian(cartographicDegree: any, result: any): any;
    cartographicToCartesian(cartographic: any, k: any): any;
    cartesianToCartographicDegree(cartesian: any, result: any): any;
    scaleToGeodeticSurface(cartesian: any, result: any): Cartesian3;
    scaleToGeocentricSurface(cartesian: any, result: any): any;
    cartesianToCartographic(cartesian: any, result: any): any;
    geodeticSurfaceNormal(cartesian: any, result: any): any;
    getSurfaceNormalIntersectionWithZAxis(position: any, buffer: any, result: any): any;
    transformPositionToScaledSpace(position: any, result: any): any;
    get radii(): any;
    get radiiSquared(): any;
    get radiiToTheFourth(): any;
    get oneOverRadii(): any;
    get oneOverRadiiSquared(): any;
    get maximumRadius(): number;
    get minimumRadius(): number;
}
export namespace Ellipsoid {
    let WGS84: Readonly<Ellipsoid>;
}
