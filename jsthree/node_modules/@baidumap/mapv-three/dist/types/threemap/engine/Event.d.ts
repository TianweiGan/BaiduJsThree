/**
 * 引擎事件系统。<br/>
 * 该类会随{@link Engine}的初始化自动实例化，不需要开发者手动执行初始化，通过`engine.event`访问。<br/>
 * 该类负责处理引擎中的事件调度和触发逻辑。开发者一般不需要直接操作该类，而是通过`object.addEventListener/object.removeEventListener`对物体进行事件绑定和解绑。
 *
 * @category Internal
 * @example
 * ```javascript
 * engine.map.addEventListener('click', e => {
 *     console.log(e);
 * });
 * engine.map.removeEventListener('click', e => {
 *     console.log(e);
 * });
 * const mesh = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({color: 0x00ff00}));
 * engine.add(mesh);
 * mesh.addEventListener('click', e => {
 *     console.log(e);
 * });
 * ```
 */
export class EngineEvent {
    static EVENT_NAME_CLICK: string;
    static EVENT_NAME_DOUBLE_CLICK: string;
    static EVENT_NAME_RIGHT_CLICK: string;
    static EVENT_NAME_RIGHT_DOUBLE_CLICK: string;
    static EVENT_NAME_MOUSE_MOVE: string;
    static EVENT_NAME_MOUSE_ENTER: string;
    static EVENT_NAME_MOUSE_LEAVE: string;
    static EVENT_NAME_POINTER_DOWN: string;
    static EVENT_NAME_POINTER_UP: string;
    /**
     * @param {Engine} engine
     */
    constructor(engine: Engine);
    /**
     * @private
     * 鼠标归一化坐标
     */
    private _mouse;
    /**
     * @private
     * 鼠标原始坐标
     */
    private _mousePosition;
    /**
     * @private
     */
    private _intersections;
    /** @private */
    private _engine;
    /**
     * @private
     */
    private _currentMouseEnterLeaveObjects;
    _eventThrottle: EventThrottle;
    _isEventHandleBusy: boolean;
    _lastMouseEnterLeaveObjects: Map<any, any>;
    beginFrame(): void;
    endFrame(): void;
    _handleTriggerEvents: (eventToTriggerMap: any) => Promise<void>;
    _triggerEventOfObjects: (eventToTriggerMap: any) => Promise<boolean>;
    /**
     * @private
     * 处理当前帧未相交但上一帧相交的物体，必然触发mouseleave事件
     * TODO: 这里的leave没法stopPropagation
     */
    private _triggerMouseLeaveEvents;
    _triggerRootObjectEvents(eventToTriggerMap: any, intersection: any, hasStoppedTypes: any): Promise<void>;
    _executeCallbacks(callbacks: any, eventParams: any): void;
    _isSameEntity: (entityProxy1: any, entityProxy2: any) => boolean;
    /**
     * @internal
     * @deprecated 请使用`object.addEventListener`代替
     * @param {Object3D} object 三维物体，继承自THREE.Object3D。可省略，省略时相当于给场景中的空区域添加事件。
     *  如click时间，如果object设置为一个立方体，则在点击立方体时触发事件，object省略时，点击空白区域触发事件。
     * @param {string} eventName 事件名称，如'click'
     * @param {Function} callback 触发事件时的回调函数，回调函数中会返回封装过的事件对象
     *
     * ### 示例
     * #### 给立方体绑定点击事件
     * ```javascript
     *    engine.event.bind(cube, 'click', e => {
     *         console.log(e)
     *    });
     * ```
     * #### 给容器绑定点击事件
     * ```javascript
     *    engine.event.bind('click', e => {
     *         console.log(e)
     *    });
     * ```
     * ### 回调函数参数说明
     * | 属性 | 含义 |
     * | --- | --- |
     * | e.point | 经纬度坐标 |
     * | e.position | 三维场景中的坐标，根据不同容器结果不同 |
     * | e.pixel | 像素坐标 |
     * | e.event | 原始事件，如浏览器点击事件，地图点击事件 |
     * | e.object  | 触发事件的物体 |
     * | e.entity  | 触发事件的具体实例，如3DTiles中的某个单体，点图层中的某个点 |
     */
    bind(object: Object3D, eventName: string, callback: Function): void;
    /**
     * @internal
     * @deprecated 请使用`object.removeEventListener`代替
     * 解除object的eventName事件绑定的callback
     * @param {Object3D} object 三维物体
     * @param {string} eventName 事件名称
     * @param {Function} callback 给object绑定的触发事件时的回调函数
     */
    unbind(object: Object3D, eventName: string, callback: Function): void;
    /**
     * @internal
     * @deprecated 请使用`object.addEventListener`代替
     * 给复杂glb模型（scene）添加事件代理
     * @param {object} scene scene对象，默认的指定代理对象
     * @param {object} proxyObject 可选, 另指定事件代理对象
    */
    markEventProxy(scene: object, proxyObject: object): void;
    /**
     * 创建一个多事件切换事件。
     * @param {Function[]} callbacks 回调函数数组
     * @param {number} startIndex 开始索引
     * @returns {MultipleToggleEvent}
     * @example
     * ```javascript
     *  object.addEventListener('click', engine.event.createMultipleToggleEvent([() => {
     *      console.log('111');
     *   }, () => {
     *      console.log('222');
    *  }, () => {
     *      console.log('333');
    *  }]));
     * ```
     */
    createMultipleToggleEvent(callbacks: Function[], startIndex?: number): MultipleToggleEvent;
    /**
     * @private
     */
    private _handlePointerDown;
    /**
     * @private
     */
    private _handlePointerUp;
    /**
     * @private
     */
    private _handleClick;
    /**
     * @private
     */
    private _handleDblClick;
    /**
     * @private
     */
    private _handleRightClick;
    /**
     * @private
     */
    private _handleRightDblClick;
    /**
     * @private
     */
    private _handleMouseMove;
    /**
     * @private
     */
    private _updateMouse;
    dispose(): void;
}
import { EventThrottle } from './event/EventThrottle';
import { MultipleToggleEvent } from './event/MultipleToggleEvent';
