/**
 * 场景拾取，用于拾取场景中的物体和坐标<br/>
 * 需要了解有三种坐标系背景：
 * - 1. pixel 屏幕像素坐标，左上角为原点，x轴向右，y轴向下，单位为像素
 * - 2. ndc 归一化设备坐标系，以中心为原点，x轴向右，y轴向上，xy范围[-1, 1]
 * - 3. readPixel 左下角为原点，x轴向右，y轴向上，单位为像素，调用 depthPicking.pickDepth 时注意转换成该坐标系
 *
 * @category Internal
 */
export class Picking {
    static PICK_INTERSECTION_TYPE_ALL: number;
    static PICK_INTERSECTION_TYPE_VISIBLE: number;
    static PICK_INTERSECTION_TYPE_EVENT: number;
    constructor(rendering: any);
    /** @private */
    private _useDepthPicking;
    /** @private */
    private _positionCache;
    /** @private */
    private _seaLevelPositionCache;
    /** @private */
    private _intersectionCache;
    _rendering: any;
    init(): void;
    dispose(): void;
    beginFrame(): void;
    endFrame(): void;
    onResolutionChange(): void;
    /**
     * 获取世界坐标，优先获取场景物体的世界坐标，若未找到则获取地图上的海平面交点
     * @param {*} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns 返回对应的世界坐标
     */
    pickWorldPosition(pixel: any): Promise<Vector3>;
    /**
     * 从归一化设备坐标(NDC)中选取世界坐标
     * @param {Vector2} ndc 归一化设备坐标(NDC)
     * @returns 返回对应的世界坐标
     */
    pickWorldPositionFromNdc(ndc: Vector2): Promise<Vector3>;
    /**
     * 拾取场景物体像素点的世界坐标，每帧缓存，同屏幕位置只计算一次
     * @param {Vector2} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns {Vector3} 拾取坐标
     */
    pickSceneWorldPosition(pixel: Vector2): Vector3;
    /**
     * 从归一化设备坐标(NDC)中选取世界坐标
     * @param {Vector2} ndc 归一化设备坐标(NDC)
     * @returns 返回对应的世界坐标
     */
    pickSceneWorldPositionFromNdc(ndc: Vector2): Promise<Vector3>;
    /**
     * @internal
     * @param {Vector2} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns 返回世界坐标位置，若未找到则返回null
     */
    _pickSceneWorldPosition(pixel: Vector2): Promise<any>;
    /**
     * @internal
     * 从depthTexture获取地图上的交点
     * @private
     * @param {*} pixel 屏幕像素坐标，左上角为原点，向右向上为正方向
     * @returns 交点坐标
     */
    private _pickSceneWorldPositionFromDepth;
    /**
     * @internal
     * 获取像素坐标对应的地图上的相交物体数组，每帧缓存，同屏幕位置只计算一次
     * @param {Vector2} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns {Array} 交点数组
     */
    pickIntersections(pixel: Vector2): any[];
    /**
     * @internal
     * 获取可见物体的交点
     * @param {Vector2} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns {Array} 交点数组
     */
    pickIntersectionsOfVisibleObjects(pixel: Vector2): any[];
    /**
     * @internal
     * 获取与事件相关的物体的交点
     * @param {Vector2} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns {Array} 交点数组
     */
    pickIntersectionsOfEventObjects(pixel: Vector2, eventNames?: string[]): any[];
    /**
     * @internal
     * 拾取物体
     * @param {*} pixel
     */
    _pickIntersectionByRayRasting(type: any, pixel: any, eventNames?: string[]): Promise<any>;
    /**
     * 拾取地形交点
     * @param {Ray} ray 射线
     * @returns {Vector3} 交点坐标
     */
    pickTerrainWorldPosition(ray: Ray): Vector3;
    /**
     * @internal
     * @param {Ray} ray 射线
     * @param {Function} callback 回调函数
     * @returns {Array} 交点数组
     */
    _pickIntersectionsWithCheckCallback(ray: Ray, callback: Function): any[];
    pickSeaLevelWorldPositionFromNdc(ndc: any): Vector3;
    /**
     * 拾取海平面交点
     * @param {Vector2} pixel 屏幕像素坐标，左上角为原点，向右向下为正方向
     * @returns {Vector3} 交点坐标
     */
    pickSeaLevelWorldPosition(pixel: Vector2): Vector3;
    /**
     * 将像素坐标转换为NDC坐标，以中心为原点，向右向上为正方向，范围[-1, 1]
     * @private
     * @param {Vector2} pixel 屏幕像素坐标
     * @returns NDC坐标
     */
    private pixelToNdc;
    /**
     * 转换NDC坐标为屏幕像素坐标，以左上角为原点，向右向下为正方向
     * @private
     * @param {Vector2} ndc NDC坐标
     * @returns 屏幕像素坐标
     */
    private ndcToPixel;
    /**
     * @param {boolean} value 是否使用深度拾取
     */
    set useDepthPicking(value: boolean);
    /**
     * 获取是否使用深度拾取
     * 使用深度图拾取世界坐标，性能表现受GPU、屏幕分辨率影响。
     * 小分辨率，大场景的情况下性能表现较好。
     * 注意该api是同步的，主线程发起请求后会等GPU处理完返回通信后才响应，所以性能差的时候会导致IO阻塞。
     * @returns {boolean} 是否使用深度拾取
     */
    get useDepthPicking(): boolean;
}
