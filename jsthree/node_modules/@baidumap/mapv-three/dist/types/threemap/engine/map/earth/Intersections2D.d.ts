export default Intersections2D;
declare namespace Intersections2D {
    /**
     * Splits a 2D triangle at given axis-aligned threshold value and returns the resulting
     * polygon on a given side of the threshold.  The resulting polygon may have 0, 1, 2,
     * 3, or 4 vertices.
     *
     * @param {number} threshold The threshold coordinate value at which to clip the triangle.
     * @param {boolean} keepAbove true to keep the portion of the triangle above the threshold, or false
     *                            to keep the portion below.
     * @param {number} u0 The coordinate of the first vertex in the triangle, in counter-clockwise order.
     * @param {number} u1 The coordinate of the second vertex in the triangle, in counter-clockwise order.
     * @param {number} u2 The coordinate of the third vertex in the triangle, in counter-clockwise order.
     * @param {number[]} [result] The array into which to copy the result.  If this parameter is not supplied,
     *                            a new array is constructed and returned.
     * @returns {number[]} The polygon that results after the clip, specified as a list of
     *                     vertices.  The vertices are specified in counter-clockwise order.
     *                     Each vertex is either an index from the existing list (identified as
     *                     a 0, 1, or 2) or -1 indicating a new vertex not in the original triangle.
     *                     For new vertices, the -1 is followed by three additional numbers: the
     *                     index of each of the two original vertices forming the line segment that
     *                     the new vertex lies on, and the fraction of the distance from the first
     *                     vertex to the second one.
     *
     * @example
     * const result = Cesium.Intersections2D.clipTriangleAtAxisAlignedThreshold(0.5, false, 0.2, 0.6, 0.4);
     * // result === [2, 0, -1, 1, 0, 0.25, -1, 1, 2, 0.5]
     */
    function clipTriangleAtAxisAlignedThreshold(threshold: number, keepAbove: boolean, u0: number, u1: number, u2: number, result?: number[]): number[];
    /**
     * Compute the barycentric coordinates of a 2D position within a 2D triangle.
     *
     * @param {number} x The x coordinate of the position for which to find the barycentric coordinates.
     * @param {number} y The y coordinate of the position for which to find the barycentric coordinates.
     * @param {number} x1 The x coordinate of the triangle's first vertex.
     * @param {number} y1 The y coordinate of the triangle's first vertex.
     * @param {number} x2 The x coordinate of the triangle's second vertex.
     * @param {number} y2 The y coordinate of the triangle's second vertex.
     * @param {number} x3 The x coordinate of the triangle's third vertex.
     * @param {number} y3 The y coordinate of the triangle's third vertex.
     * @param {Vector3} [result] The instance into to which to copy the result.  If this parameter
     *                     is undefined, a new instance is created and returned.
     * @returns {Vector3} The barycentric coordinates of the position within the triangle.
     *
     * @example
     * const result = Cesium.Intersections2D.computeBarycentricCoordinates(0.0, 0.0, 0.0, 1.0, -1, -0.5, 1, -0.5);
     * // result === new Cesium.Vector3(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0);
     */
    function computeBarycentricCoordinates(x: number, y: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, result?: Vector3): Vector3;
    /**
     * Compute the intersection between 2 line segments
     *
     * @param {number} x00 The x coordinate of the first line's first vertex.
     * @param {number} y00 The y coordinate of the first line's first vertex.
     * @param {number} x01 The x coordinate of the first line's second vertex.
     * @param {number} y01 The y coordinate of the first line's second vertex.
     * @param {number} x10 The x coordinate of the second line's first vertex.
     * @param {number} y10 The y coordinate of the second line's first vertex.
     * @param {number} x11 The x coordinate of the second line's second vertex.
     * @param {number} y11 The y coordinate of the second line's second vertex.
     * @param {Vector2} [result] The instance into to which to copy the result. If this parameter
     *                     is undefined, a new instance is created and returned.
     * @returns {Vector2} The intersection point, undefined if there is no intersection point or lines are coincident.
     *
     * @example
     * const result = Cesium.Intersections2D.computeLineSegmentLineSegmentIntersection(0.0, 0.0, 0.0, 2.0, -1, 1, 1, 1);
     * // result === new Cesium.Vector2(0.0, 1.0);
     */
    function computeLineSegmentLineSegmentIntersection(x00: number, y00: number, x01: number, y01: number, x10: number, y10: number, x11: number, y11: number, result?: Vector2): Vector2;
}
