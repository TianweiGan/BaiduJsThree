/**
 * Handles user input events. Custom functions can be added to be executed on
 * when the user enters input.
 *
 * @alias ScreenSpaceEventHandler
 *
 * @param {HTMLCanvasElement} [element=document] The element to add events to.
 *
 * @constructor
 */
export function ScreenSpaceEventHandler(element?: HTMLCanvasElement): void;
export class ScreenSpaceEventHandler {
    /**
     * Handles user input events. Custom functions can be added to be executed on
     * when the user enters input.
     *
     * @alias ScreenSpaceEventHandler
     *
     * @param {HTMLCanvasElement} [element=document] The element to add events to.
     *
     * @constructor
     */
    constructor(element?: HTMLCanvasElement);
    _inputEvents: {};
    _buttonDown: {
        LEFT: boolean;
        MIDDLE: boolean;
        RIGHT: boolean;
    };
    _isPinching: boolean;
    _isTouchHolding: boolean;
    _lastSeenTouchEvent: number;
    _primaryStartPosition: any;
    _primaryPosition: any;
    _primaryPreviousPosition: any;
    _positions: AssociativeArray;
    _previousPositions: AssociativeArray;
    _removalFunctions: any[];
    _touchHoldTimer: any;
    _clickPixelTolerance: number;
    _holdPixelTolerance: number;
    _element: any;
    /**
     * Set a function to be executed on an input event.
     *
     * @param {Function} action Function to be executed when the input event occurs.
     * @param {Number} type The ScreenSpaceEventType of input event.
     * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>
     * event occurs.
     *
     * @see ScreenSpaceEventHandler#getInputAction
     * @see ScreenSpaceEventHandler#removeInputAction
     */
    setInputAction(action: Function, type: number, modifier?: number): void;
    /**
     * Returns the function to be executed on an input event.
     *
     * @param {Number} type The ScreenSpaceEventType of input event.
     * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>
     * event occurs.
     *
     * @returns {Function} The function to be executed on an input event.
     *
     * @see ScreenSpaceEventHandler#setInputAction
     * @see ScreenSpaceEventHandler#removeInputAction
     */
    getInputAction(type: number, modifier?: number): Function;
    /**
     * Removes the function to be executed on an input event.
     *
     * @param {Number} type The ScreenSpaceEventType of input event.
     * @param {Number} [modifier] A KeyboardEventModifier key that is held when a <code>type</code>
     * event occurs.
     *
     * @see ScreenSpaceEventHandler#getInputAction
     * @see ScreenSpaceEventHandler#setInputAction
     */
    removeInputAction(type: number, modifier?: number): void;
    /**
     * Returns true if this object was destroyed; otherwise, false.
     * <br /><br />
     * If this object was destroyed, it should not be used; calling any function other than
     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.
     *
     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.
     *
     * @see ScreenSpaceEventHandler#destroy
     */
    isDestroyed(): boolean;
    /**
     * Removes listeners held by this object.
     * <br /><br />
     * Once an object is destroyed, it should not be used; calling any function other than
     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,
     * assign the return value (<code>undefined</code>) to the object as done in the example.
     *
     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.
     *
     *
     * @example
     * handler = handler && handler.destroy();
     *
     * @see ScreenSpaceEventHandler#isDestroyed
     */
    destroy(): undefined;
}
export namespace ScreenSpaceEventHandler {
    let mouseEmulationIgnoreMilliseconds: number;
    let touchHoldDelayMilliseconds: number;
}
import { AssociativeArray } from './AssociativeArray';
