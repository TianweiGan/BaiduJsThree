/**
 * 全局标签类，可通过此类的API添加和移除标签 <br/>
 * 该类会随{@link EngineRendering}的初始化自动实例化，不需要开发者手动执行初始化调用，通过`engine.rendering.label`访问
 *
 * @category Internal
 * @example
* ```javascript
* // 添加一个简单的文本标签
* engine.rendering.label.add({
*     position: [116.404, 39.915, 0],
*     text: '北京市',
*     textSize: 14,
*     textFillStyle: '#ffffff',
* });
*
* // 添加一个图标标签
* engine.rendering.label.add({
*     position: [116.404, 39.915, 0],
*     mapSrc: 'marker.png',
*     width: 32,
*     height: 32,
* });
*
* // 添加一个图文组合标签
* engine.rendering.label.add({
*     position: [116.404, 39.915, 0],
*     text: '北京市',
*     mapSrc: 'marker.png',
*     width: 32,
*     height: 32,
*     collision: true, // 支持碰撞检测
*     textAnchor: 'left',  // 图标在文字左边
* });
* ```
*/
export class RenderingLabel {
    constructor(rendering: any);
    /** @private */
    private _blocks;
    /** @private */
    private _collisionLabels;
    _timers: {};
    /** @private */
    private _enabled;
    /**
     * @private
     */
    private _spriteTexture;
    _rendering: any;
    set enabled(enabled: boolean);
    get enabled(): boolean;
    set spriteTexture(spriteTexture: any);
    init(): void;
    initCollisionLabel(): void;
    _iconDataSource: DataSource | undefined;
    _icon: any;
    _iconUvDataSource: DataSource | undefined;
    _iconUv: any;
    _iconFlatUvDataSource: DataSource | undefined;
    _iconFlatUv: any;
    _textFlatDataSource: DataSource | undefined;
    _textFlat: any;
    _textFixedDataSource: DataSource | undefined;
    _textFixed: any;
    _iconTextDataSource: DataSource | undefined;
    _iconText: any;
    _iconTextUvDataSource: DataSource | undefined;
    _iconTextUv: any;
    initLabel(): void;
    _labelIconDataSource: DataSource | undefined;
    _labelIcon: any;
    _labelIconFlatDataSource: DataSource | undefined;
    _labelIconFlat: any;
    _labelTextFlatDataSource: DataSource | undefined;
    _labelTextFlat: any;
    _labelTextFixedDataSource: DataSource | undefined;
    _labelTextFixed: any;
    _labelIconTextDataSource: DataSource | undefined;
    _labelIconText: any;
    processLabel(label: any): any;
    /**
     * @internal
     * 根据label数据项，选择已经创建或者创建新的label组件
     * @param {Object} label
     * @returns {Symbol}
     */
    _getCollisionLabel(label: Object): Symbol;
    addCollisionLabel(label: any): any;
    addNormalLabel(label: any): any;
    /**
     * 添加单个标签
     * @param {Object} label 标签配置
     * @param {Array<number>} label.position 标签位置 [经度, 纬度, 高度]
     * @param {string} [label.text] 标签文本
     * @param {string} [label.mapSrc] 图标URL
     * @param {number} [label.width] 图标宽度(像素)
     * @param {number} [label.height] 图标高度(像素)
     * @param {number} [label.textSize=16] 文字大小(像素)
     * @param {string} [label.textFillStyle='#ffffff'] 文字颜色
     * @param {string} [label.textStrokeStyle='#000000'] 文字描边颜色
     * @param {number} [label.textStrokeWidth=0] 文字描边宽度
     * @param {string} [label.textAnchor='center'] 文字锚点位置
     * @param {boolean} [label.collision=false] 是否启用碰撞检测
     * @param {boolean} [label.flat=false] 是否贴地
     * @returns {DataItem} 返回添加的标签项
     *
     * @example
     * ```javascript
     * const label = engine.rendering.label.add({
     *     position: [116.404, 39.915, 0],
     *     text: '北京市',
     *     textSize: 16,
     *     textFillStyle: '#ffffff',
     *     textStrokeStyle: '#000000',
     *     textStrokeWidth: 2,
     *     textAnchor: 'bottom',
     *     collision: true,
     *     flat: false
     * });
     * ```
    */
    addLabel(label: {
        position: Array<number>;
        text?: string | undefined;
        mapSrc?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        textSize?: number | undefined;
        textFillStyle?: string | undefined;
        textStrokeStyle?: string | undefined;
        textStrokeWidth?: number | undefined;
        textAnchor?: string | undefined;
        collision?: boolean | undefined;
        flat?: boolean | undefined;
    }): DataItem;
    addLabels(labels: any, id: any): void;
    _createLabelTask(labels: any): () => Promise<any>;
    computeBoundingBox(label: any): any;
    _checkRemoveCollisionLabel(collisionLabel: any, label: any): void;
    removeCollisionLabel(label: any): void;
    removeNormalLabel(label: any): void;
    /**
     * 移除单个标签
     * @param {DataItem} label 要移除的标签项
     * @example
     * ```javascript
     * const label = engine.rendering.label.add({
     *     position: [116.404, 39.915, 0],
     *     text: '北京市'
     * });
     *
     * // 稍后移除该标签
     * engine.rendering.label.removeLabel(label);
     * ```
    */
    removeLabel(label: DataItem): void;
    removeLabels(labels: any, id: any): void;
    dispose(): void;
}
import { DataSource } from '../../dataSource/DataSource';
import { DataItem } from '../../dataSource/DataItem';
