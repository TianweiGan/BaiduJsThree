/**
 * 后处理类，用于管理后处理<br/>
 * 该类会随{@link EngineRendering}的初始化自动实例化，不需要开发者手动执行初始化调用，通过`engine.rendering.postprocessings`访问<br/>
 * 引擎内部渲染特性需要的后处理，会自动添加到该类中，开发者不需要手动添加<br/>
 * 开发者可以调用`add`方法添加自定义后处理，也可以调用`remove`方法移除后处理<br/>
 * 后处理会根据`renderOrder`属性进行排序，`renderOrder`值越小，渲染顺序越靠前<br/>
 *
 * @category Internal
 * @example
 * ```javascript
 * engine.rendering.postprocessings.add(new ExamplePostprocessing());
 * ```
 */
export class Postprocessings {
    constructor(rendering: any);
    /** @private */
    private _postprocessings;
    /** @private */
    private _validCount;
    /** @private */
    private _composer;
    /**
     * @private
     */
    private _outputPass;
    /** @private */
    private _samples;
    _rendering: any;
    setSize(width: any, height: any): void;
    beginFrame(): void;
    _uiPass: UIPass | undefined;
    _updatePostprocessings(): void;
    /**
     * 添加后处理
     * @param {Postprocessing} postprocessing - 后处理
     */
    add(postprocessing: Postprocessing): void;
    /**
     * 移除后处理
     * @param {Postprocessing} postprocessing - 后处理
     */
    remove(postprocessing: Postprocessing): void;
    render(): void;
    updateReqirements(requirements: any): void;
    endFrame(): void;
    dispose(): void;
    _postprocessingRenderTarget1: any;
    get renderTarget1(): any;
    get validCount(): number;
    get postprocessings(): any[];
}
import { UIPass } from './UIPass';
