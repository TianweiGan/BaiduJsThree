/**
 * A plane tangent to the provided ellipsoid at the provided origin.
 * If origin is not on the surface of the ellipsoid, it's surface projection will be used.
 * If origin is at the center of the ellipsoid, an exception will be thrown.
 * @alias EllipsoidTangentPlane
 * @constructor
 *
 * @param {Cartesian3} origin The point on the surface of the ellipsoid where the tangent plane touches.
 * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.
 *
 * @exception {DeveloperError} origin must not be at the center of the ellipsoid.
 */
export class EllipsoidTangentPlane {
    static fromPoints(positions: any, ellipsoid: any): EllipsoidTangentPlane;
    constructor(origin: any, ellipsoid: any);
    _ellipsoid: any;
    _origin: any;
    _xAxis: any;
    _yAxis: any;
    _plane: any;
    /**
     * Computes the projection of the provided 3D position onto the 2D plane, along the plane normal.
     *
     * @param {Cartesian3} cartesian The point to project.
     * @param {Cartesian2} [result] The object onto which to store the result.
     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.
     */
    projectPointToNearestOnPlane(cartesian: Cartesian3, result?: Cartesian2): Cartesian2;
    projectPointsOntoPlane(cartesians: any, result: any): any;
    projectPointOntoPlane(cartesian: any, result: any): any;
    get ellipsoid(): any;
    get origin(): any;
    get plane(): any;
    get xAxis(): any;
    get yAxis(): any;
    get zAxis(): any;
}
import { Cartesian3 } from './Cartesian3';
import { Cartesian2 } from './Cartesian2';
