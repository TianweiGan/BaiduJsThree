export default EllipsoidGeodesic;
/**
 * Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.
 *
 * @alias EllipsoidGeodesic
 * @constructor
 *
 * @param {Vector3} [start] The initial planetodetic point on the path.
 * @param {Vector3} [end] The final planetodetic point on the path.
 * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the geodesic lies.
 */
export function EllipsoidGeodesic(start?: Vector3, end?: Vector3, ellipsoid?: Ellipsoid): void;
export class EllipsoidGeodesic {
    /**
     * Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.
     *
     * @alias EllipsoidGeodesic
     * @constructor
     *
     * @param {Vector3} [start] The initial planetodetic point on the path.
     * @param {Vector3} [end] The final planetodetic point on the path.
     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the geodesic lies.
     */
    constructor(start?: Vector3, end?: Vector3, ellipsoid?: Ellipsoid);
    _ellipsoid: any;
    _start: any;
    _end: any;
    _constants: {};
    _startHeading: any;
    _endHeading: any;
    _distance: any;
    _uSquared: any;
    /**
     * Sets the start and end points of the geodesic
     *
     * @param {Vector3} start The initial planetodetic point on the path.
     * @param {Vector3} end The final planetodetic point on the path.
     */
    setEndPoints(start: Vector3, end: Vector3): void;
    /**
     * Provides the location of a point at the indicated portion along the geodesic.
     *
     * @param {number} fraction The portion of the distance between the initial and final points.
     * @param {Vector3} [result] The object in which to store the result.
     * @returns {Vector3} The location of the point along the geodesic.
     */
    interpolateUsingFraction(fraction: number, result?: Vector3): Vector3;
    /**
     * Provides the location of a point at the indicated distance along the geodesic.
     *
     * @param {number} distance The distance from the inital point to the point of interest along the geodesic
     * @param {Vector3} [result] The object in which to store the result.
     * @returns {Vector3} The location of the point along the geodesic.
     *
     * @exception {DeveloperError} start and end must be set before calling function interpolateUsingSurfaceDistance
     */
    interpolateUsingSurfaceDistance(distance: number, result?: Vector3): Vector3;
}
import { Ellipsoid } from './Ellipsoid';
