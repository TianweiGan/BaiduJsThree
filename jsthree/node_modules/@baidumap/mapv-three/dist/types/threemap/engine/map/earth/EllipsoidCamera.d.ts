export function directionUpToHeadingPitchRoll(camera: any, position: any, orientation: any, result: any): any;
export class EllipsoidCamera {
    static DEFAULT_VIEW_RECTANGLE: any;
    static DEFAULT_VIEW_FACTOR: number;
    static DEFAULT_OFFSET: HeadingPitchRange;
    constructor(scene: any);
    _scene: any;
    _camera: any;
    _ellipsoid: any;
    _transform: any;
    _invTransform: any;
    _actualTransform: any;
    _actualInvTransform: any;
    _transformChanged: boolean;
    position: any;
    _position: any;
    _positionWC: any;
    _positionCartographic: any;
    _oldPositionWC: any;
    positionWCDeltaMagnitude: number;
    positionWCDeltaMagnitudeLastFrame: number;
    timeSinceMoved: number;
    _lastMovedTimestamp: number;
    direction: any;
    _direction: any;
    _directionWC: any;
    up: any;
    _up: any;
    _upWC: any;
    right: any;
    _right: any;
    _rightWC: any;
    defaultMoveAmount: number;
    defaultLookAmount: number;
    defaultRotateAmount: number;
    defaultZoomAmount: number;
    constrainedAxis: any;
    maximumZoomFactor: number;
    _moveStart: any;
    _moveEnd: any;
    _changed: any;
    _changedPosition: any;
    _changedDirection: any;
    _changedFrustum: any;
    percentageChanged: number;
    _viewMatrix: any;
    _invViewMatrix: any;
    _mode: number;
    _modeChanged: boolean;
    _projection: any;
    _maxCoord: any;
    _max2Dfrustum: any;
    canPreloadFlight(): boolean;
    _setTransform: (transform: any) => void;
    setView(options: any): void;
    lookAt(target: any, offset: any): void;
    lookAtTransform(transform: any, offset: any): void;
    move(direction: any, amount: any): void;
    moveForward(amount: any): void;
    moveBackward(amount: any): void;
    moveUp(amount: any): void;
    moveDown(amount: any): void;
    moveRight(amount: any): void;
    moveLeft(amount: any): void;
    /**
     * 绕着point，以axis为旋转轴，旋转angle
     */
    rotateAroundPoint(point: any, axis: any, angle: any): void;
    zoomIn(amount: any): void;
    rotate(axis: any, angle: any): void;
    rotateDown(angle: any): void;
    rotateUp(angle: any): void;
    rotateRight(angle: any): void;
    rotateLeft(angle: any): void;
    look(axis: any, angle: any): void;
    lookLeft(amount: any): void;
    lookRight(amount: any): void;
    lookUp(amount: any): void;
    lookDown(amount: any): void;
    getPickRay(windowPosition: any, result: any): any;
    pickEllipsoid(windowPosition: any, ellipsoid: any, result: any): any;
    worldToCameraCoordinates(cartesian: any, result: any): any;
    worldToCameraCoordinatesPoint(cartesian: any, result: any): any;
    cancelFlight(): void;
    _currentFlight: {
        startObject: {};
        stopObject: {};
        duration: number;
        complete: any;
        cancel: any;
    } | {
        duration: any;
        easingFunction: any;
        startObject: {
            time: number;
        };
        stopObject: {
            time: any;
        };
        update: any;
        complete: () => void;
        cancel: () => void;
    } | undefined;
    /**
     * Completes the current camera flight and moves the camera immediately to its final destination.
     * If no flight is in progress, this this function does nothing.
     */
    completeFlight(): void;
    flyTo(options: any): void;
    flyHome(duration: any): void;
    getRectangleCameraCoordinates(rectangle: any, result: any): any;
    update(): void;
    _adjustOrthographicFrustum(zooming: any): void;
    clone(camera: any, result: any): any;
    getLocalTransform(): any;
    get transform(): any;
    get inverseTransform(): any;
    get viewMatrix(): any;
    get inverseViewMatrix(): any;
    get positionCartographic(): any;
    get positionWC(): any;
    get directionWC(): any;
    get upWC(): any;
    get rightWC(): any;
    get heading(): number;
    get pitch(): number;
    get roll(): number;
    get moveStart(): any;
    get moveEnd(): any;
    get changed(): any;
}
import { HeadingPitchRange } from './HeadingPitchRange';
