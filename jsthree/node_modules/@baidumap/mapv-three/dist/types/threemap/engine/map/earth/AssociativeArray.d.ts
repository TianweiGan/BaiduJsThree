/**
 * A collection of key-value pairs that is stored as a hash for easy
 * lookup but also provides an array for fast iteration.
 * @alias AssociativeArray
 * @constructor
 */
export function AssociativeArray(): void;
export class AssociativeArray {
    _array: any[];
    _hash: {};
    /**
     * Determines if the provided key is in the array.
     *
     * @param {String|Number} key The key to check.
     * @returns {Boolean} <code>true</code> if the key is in the array, <code>false</code> otherwise.
     */
    contains(key: string | number): boolean;
    /**
     * Associates the provided key with the provided value.  If the key already
     * exists, it is overwritten with the new value.
     *
     * @param {String|Number} key A unique identifier.
     * @param {*} value The value to associate with the provided key.
     */
    set(key: string | number, value: any): void;
    /**
     * Retrieves the value associated with the provided key.
     *
     * @param {String|Number} key The key whose value is to be retrieved.
     * @returns {*} The associated value, or undefined if the key does not exist in the collection.
     */
    get(key: string | number): any;
    /**
     * Removes a key-value pair from the collection.
     *
     * @param {String|Number} key The key to be removed.
     * @returns {Boolean} True if it was removed, false if the key was not in the collection.
     */
    remove(key: string | number): boolean;
    /**
     * Clears the collection.
     */
    removeAll(): void;
}
