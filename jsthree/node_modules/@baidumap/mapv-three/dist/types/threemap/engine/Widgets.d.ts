/**
 * 引擎UI控件入口 <br/>
 * 该类会随{@link Engine}的初始化自动实例化，不需要开发者手动执行初始化调用，通过`engine.widgets`访问
 *
 * @category Internal
 * @example
 * ```javascript
 * // 动态启用组件
 * engine.widgets.logo.enabled = true;
 *
 * // 初始化时配置组件
 * const engine = new Engine(container, {
 *     widgets: {
 *         logo: {
 *             enabled: true,
 *         },
 *         zoom: {
 *             enabled: true
 *         },
 *         scale: {
 *             enabled: true
 *         },
 *         fullscreen: {
 *             enabled: true
 *         },
 *         geoLocate: {
 *             enabled: true
 *         },
 *         exportImage: {
 *             enabled: true
 *         },
 *         mapInfo: {
 *             enabled: true,
 *             template: 'CHP',
 *             separator: ', '
 *         },
 *         compass: {
 *             enabled: true
 *         },
 *         drawer: {
 *             enabled: true,
 *             draws: [{
 *                 defaultChecked: true,
 *                 name: '点图层',
 *                 data: 'point',
 *                 onChange: (checked, data, engine) => {
 *                     console.log(checked, data, engine);
 *                 }
 *             }, {
 *                 name: '面图层',
 *                 data: 'polygon',
 *                 onChange: (checked, data, engine) => {
 *                     console.log(checked, data, engine);
 *                 }
 *             }]
 *         }
 *     }
 * });
 * ```
 */
export class EngineWidgets {
    /**
     * @param {Engine} engine 引擎实例
     * @param {object} options 控件配置选项
     * @param {object} options.logo logo控件配置
     * @param {boolean} options.logo.enabled 是否启用logo控件
     * @param {object} options.zoom 缩放控件配置
     * @param {boolean} options.zoom.enabled 是否启用缩放控件
     * @param {object} options.scale 比例尺控件配置
     * @param {boolean} options.scale.enabled 是否启用比例尺控件
     * @param {object} options.fullscreen 全屏控件配置
     * @param {boolean} options.fullscreen.enabled 是否启用全屏控件
     * @param {object} options.geoLocate 定位控件配置
     * @param {boolean} options.geoLocate.enabled 是否启用定位控件
     * @param {object} options.exportImage 导出图片控件配置
     * @param {boolean} options.exportImage.enabled 是否启用导出图片控件
     * @param {object} options.mapInfo 地图信息控件配置
     * @param {boolean} options.mapInfo.enabled 是否启用地图信息控件
     * @param {object} options.mapInfo.template 地图信息模板，默认值为'CR'，其中'C'表示中心点，'R'表示视野距离，'H'表示旋转角度，'P'表示倾斜角度
     * @param {object} options.mapInfo.separator 地图信息分隔符，默认值为' | '
     * @param {object} options.compass 指南针控件配置
     * @param {boolean} options.compass.enabled 是否启用指南针控件
     * @param {object} options.drawer 抽屉控件配置
     * @param {boolean} options.drawer.enabled 是否启用抽屉控件
     * @param {object} options.drawer.draws 抽屉控件的绘制配置
     * @param {object} options.drawer.draws.name 抽屉控件的名称
     * @param {boolean} options.drawer.draws.defaultChecked 抽屉控件的默认选中状态
     * @param {function} options.drawer.draws.onChange 抽屉控件的选中状态改变回调函数
     * @param {object} options.drawer.draws.data 抽屉控件的数据
     */
    constructor(engine: Engine, options?: {
        logo: {
            enabled: boolean;
        };
        zoom: {
            enabled: boolean;
        };
        scale: {
            enabled: boolean;
        };
        fullscreen: {
            enabled: boolean;
        };
        geoLocate: {
            enabled: boolean;
        };
        exportImage: {
            enabled: boolean;
        };
        mapInfo: {
            enabled: boolean;
            template: object;
            separator: object;
        };
        compass: {
            enabled: boolean;
        };
        drawer: {
            enabled: boolean;
            draws: {
                name: object;
                defaultChecked: boolean;
                onChange: Function;
                data: object;
            };
        };
    });
    /** @private */ private _container;
    /** @private */ private _engine;
    /** @private */ private _logo;
    /** @private */ private _zoom;
    /** @private */ private _scale;
    /** @private */ private _fullscreen;
    /** @private */ private _geoLocate;
    /** @private */ private _exportImage;
    /** @private */ private _mapInfo;
    /** @private */ private _compass;
    /** @private */ private _drawer;
    _control: HTMLDivElement;
    dispose(): void;
    /**
     * mapvthree的容器
     */
    get container(): any;
    /**
     * engine对象
     */
    get engine(): any;
    /**
     * compass组件实例，通过`.enable`属性控制启用
     */
    get compass(): Compass;
    /**
     * logo组件实例，通过`.enable`属性控制启用
     */
    get logo(): Logo;
    /**
     * zoom组件实例，通过`.enable`属性控制启用
     */
    get zoom(): Zoom;
    /**
     * scale组件实例，通过`.enable`属性控制启用
     */
    get scale(): Scale;
    /**
     * fullscreen组件实例，通过`.enable`属性控制启用
     */
    get fullscreen(): Fullscreen;
    /**
     * geoLocate组件实例，通过`.enable`属性控制启用
     */
    get geoLocate(): GeoLocate;
    /**
     * exportImage组件实例，通过`.enable`属性控制启用
     */
    get exportImage(): ExportImage;
    /**
     * mapInfo组件实例，通过`.enable`属性控制启用
     */
    get mapInfo(): MapInfo;
    get drawer(): Drawer;
}
import { Compass } from './widgets/Compass';
import { Logo } from './widgets/Logo';
import { Zoom } from './widgets/Zoom';
import { Scale } from './widgets/Scale';
import { Fullscreen } from './widgets/Fullscreen';
import { GeoLocate } from './widgets/GeoLocate';
import { ExportImage } from './widgets/ExportImage';
import { MapInfo } from './widgets/MapInfo';
import { Drawer } from './widgets/Drawer';
