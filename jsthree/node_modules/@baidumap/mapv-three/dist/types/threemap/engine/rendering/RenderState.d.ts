/**
 * 渲染状态管理类，用于管理渲染状态<br/>
 * 该类会随{@link EngineRendering}的初始化自动实例化，不需要开发者手动执行初始化调用，通过`engine.rendering.renderState`访问<br/>
 * 该类会管理渲染状态，包括渲染时间、渲染帧数、渲染视图变化等。其状态由引擎内部自动管理，开发者可在回调中获取相关状态<br/>
 *
 * @category Internal
 * @example
 * ```javascript
 * engine.addBeforeRenderListener((engine, renderState) => {
 *     console.log(renderState.deltaTime);
 *     console.log(renderState.frameCount);
 *     console.log(renderState.viewChanged);
 *     console.log(renderState.viewMatrixWorld);
 *     console.log(renderState.projectionMatrix);
 *     console.log(renderState.cameraMatrix);
 *     console.log(renderState.cameraMatrixInverse);
 * });
 * ```
 */
export class RenderState {
    constructor(rendering: any);
    /** @private */
    private _stage;
    /** @private */
    private _time;
    /** @private */
    private _startTime;
    /** @private */
    private _elapsedTime;
    /** @private */
    private _viewChanged;
    /** @private */
    private _viewMatrixWorld;
    /** @private */
    private _viewMatrixWorldInverse;
    /** @private */
    private _projectionMatrix;
    /** @private */
    private _cameraMatrix;
    /** @private */
    private _cameraMatrixInverse;
    /** @private */
    private _cameraOffsetX;
    /** @private */
    private _cameraOffsetY;
    /** @private */
    private _cameraOffset;
    /** @private */
    private _frameCount;
    /** @private */
    private _viewStableFrameCount;
    /** @private */
    private _isRendererRecreated;
    /** @private */
    private _cameraLocation;
    _rendering: any;
    beginFrame(rendering: any, time: any): void;
    _deltaTime: number | undefined;
    _deltaSeconds: number | undefined;
    endFrame(): void;
    updateCameraOffsetState(camera: any, offsetX: any, offsetY: any, offsetZ: any): void;
    getDepthByDistance(distance: any): number;
    /**
     * 获取当前渲染时间
     * @returns {number} 当前渲染时间
     */
    get time(): number;
    /**
     * 获取当前渲染视图是否发生变化
     * @returns {boolean} 当前渲染视图是否发生变化
     */
    get viewChanged(): boolean;
    /**
     * 获取当前渲染视图矩阵
     * @returns {Matrix4} 当前渲染视图矩阵
     */
    get viewMatrixWorld(): Matrix4;
    /**
     * 获取当前渲染视图矩阵的逆矩阵
     * @returns {Matrix4} 当前渲染视图矩阵的逆矩阵
     */
    get viewMatrixWorldInverse(): Matrix4;
    /**
     * 获取当前渲染投影矩阵
     * @returns {Matrix4} 当前渲染投影矩阵
     */
    get projectionMatrix(): Matrix4;
    /**
     * 获取当前渲染相机矩阵
     * @returns {Matrix4} 当前渲染相机矩阵
     */
    get cameraMatrix(): Matrix4;
    /**
     * 获取当前渲染相机矩阵的逆矩阵
     * @returns {Matrix4} 当前渲染相机矩阵的逆矩阵
     */
    get cameraMatrixInverse(): Matrix4;
    /**
     * 获取当前渲染相机偏移量X
     * @returns {number} 当前渲染相机偏移量X
     */
    get cameraOffsetX(): number;
    /**
     * 获取当前渲染相机偏移量Y
     * @returns {number} 当前渲染相机偏移量Y
     */
    get cameraOffsetY(): number;
    /**
     * 获取当前渲染时间差
     * @returns {number} 当前渲染时间差
     */
    get deltaTime(): number;
    /**
     * 获取从渲染开始到当前的渲染时间
     * @returns {number} 从渲染开始到当前的渲染时间
     */
    get elapsedTime(): number;
    /**
     * 获取当前渲染时间差，单位秒
     * @returns {number} 当前渲染时间差，单位秒
     */
    get deltaSeconds(): number;
    /**
     * 获取当前渲染帧数
     * @returns {number} 当前渲染帧数
     */
    get frameCount(): number;
    /**
     * 获取当前渲染视图稳定帧数
     * @returns {number} 当前渲染视图稳定帧数
     */
    get viewStableFrameCount(): number;
    /**
     * 获取当前渲染相机偏移量
     * @returns {Vector3} 当前渲染相机偏移量
     */
    get cameraOffset(): Vector3;
    /**
     * 获取当前渲染是否重新创建渲染器
     * @returns {boolean} 当前渲染是否重新创建渲染器
     */
    get isRendererRecreated(): boolean;
    set stage(value: null);
    get stage(): null;
}
