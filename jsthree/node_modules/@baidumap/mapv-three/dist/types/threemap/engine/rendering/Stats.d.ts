export class TimeStatsItem {
    constructor(name: any);
    /** @private */
    private _lastValue;
    /** @private */
    private _count;
    /** @private */
    private _total;
    /** @private */
    private _beginTime;
    /** @private */
    private _name;
    begin(time: any): void;
    end(time: any): void;
    add(value: any): void;
    get total(): number;
    get count(): number;
    get average(): number;
    get lastValue(): number;
    get name(): any;
    get beginTime(): number;
}
/**
 * 渲染统计类，用于统计渲染时间<br/>
 * 该类会随{@link EngineRendering}的初始化自动实例化，不需要开发者手动执行初始化调用，通过`engine.rendering.stats`访问<br/>
 * 该类会统计引擎内部各个阶段的时间，并提供打印方法，供开发者调试<br/>
 *
 * @category Internal
 * @example
 * ```javascript
 * console.log(engine.rendering.stats.printString());
 * ```
 */
declare class Stats {
    /** @private */
    private _timeStatsItem;
    addTimeStatsItem(name: any): void;
    removeTimeStatsItem(name: any): void;
    beginTimeStatsItem(name: any, time: any): void;
    endTimeStatsItem(name: any, time: any): void;
    addTimeStatsItemValue(name: any, value: any): void;
    /**
     * 获取排序后的时间统计项
     * @returns {TimeStatsItem[]} 排序后的时间统计项
     */
    getSortedTimeStatsItems(): TimeStatsItem[];
    /**
     * 打印时间统计项
     * @returns {string} 时间统计项
     */
    printString(): string;
}
export { Stats as RenderingStats };
