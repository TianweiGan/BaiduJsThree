export class Cartesian3 {
    static ZERO: any;
    static UNIT_X: any;
    static UNIT_Y: any;
    static UNIT_Z: any;
    static clone(v1: any, v2: any): any;
    static equals(v1: any, v2: any): any;
    static normalize(v1: any, v2: any): any;
    static add(v1: any, v2: any, result: any): any;
    static dot(v1: any, v2: any): any;
    static cross(v1: any, v2: any, result: any): any;
    static magnitudeSquared(v1: any): any;
    static multiplyByScalar(v1: any, scalar: any, result: any): any;
    static divideByScalar(v1: any, scalar: any, result: any): any;
    static subtract(v1: any, v2: any, result: any): any;
    static distance(v1: any, v2: any): any;
    static negate(v1: any, result: any): any;
    static multiplyComponents(v1: any, v2: any, result: any): any;
    static magnitude(v: any): any;
    static equalsEpsilon(left: any, right: any, relativeEpsilon: any, absoluteEpsilon: any): boolean;
    static fromCartesian4(v: any, result: any): any;
    static abs: (cartesian: any, result: any) => any;
    static mostOrthogonalAxis: (cartesian: any, result: any) => any;
    static fromElements(x: any, y: any, z: any, result: any): any;
    static fromRadians(longitude: any, latitude: any, height: any, ellipsoid: any, result: any): any;
    static angleBetween(left: any, right: any): number;
    static fromDegrees(longitude: any, latitude: any, height: any, ellipsoid: any, result: any): any;
    COLUMN0ROW0: number;
    COLUMN0ROW1: number;
    COLUMN0ROW2: number;
    COLUMN1ROW0: number;
    COLUMN1ROW1: number;
    COLUMN1ROW2: number;
    COLUMN2ROW0: number;
    COLUMN2ROW1: number;
    COLUMN2ROW2: number;
}
