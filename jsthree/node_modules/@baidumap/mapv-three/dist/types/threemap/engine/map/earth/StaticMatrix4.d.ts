export class StaticMatrix4 {
    static IDENTITY: any;
    static clone(m1: any, m2: any): any;
    static inverseTransformation(m1: any, m2: any): any;
    static multiplyByPoint(m: any, v: any, result: any): any;
    static multiplyByPointAsVector(m: any, v: any, result: any): any;
    static computeViewportTransformation(viewport: any, nearDepthRange: any, farDepthRange: any, result: any): any;
    static equals(a: any, b: any): any;
    static multiplyByVector(matrix: any, v: any, result: any): any;
    /**
     * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.
     *
     * @param {Matrix4} matrix The matrix to use.
     * @param {number} index The zero-based index of the column to retrieve.
     * @param {Cartesian4} result The object onto which to store the result.
     * @returns {Cartesian4} The modified result parameter.
     *
     * @exception {DeveloperError} index must be 0, 1, 2, or 3.
     *
     * @example
     * // m = [10.0, 11.0, 12.0, 13.0]
     * //     [14.0, 15.0, 16.0, 17.0]
     * //     [18.0, 19.0, 20.0, 21.0]
     * //     [22.0, 23.0, 24.0, 25.0]
     *
     * // Sets values for Cartesian instance
     * const a = new Cesium.Cartesian4();
     * Cesium.Matrix4.getColumn(m, 2, a);
     *
     * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;
     */
    static getColumn(matrix: Matrix4, index: number, result: Cartesian4): Cartesian4;
    static fromTranslationQuaternionRotationScale(translation: any, rotation: any, scale: any, result: any): any;
}
export namespace StaticMatrix4 {
    let ZERO: any;
}
