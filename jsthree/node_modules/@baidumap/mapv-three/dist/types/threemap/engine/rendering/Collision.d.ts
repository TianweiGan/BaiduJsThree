/**
 * 全局碰撞检测
 * @category Internal
 * @example
 * ```javascript
 * const icon = engine.add(new mapvthree.Icon({
 *     icon: 'icon.png',
 *     width: 40,
 *     height: 40,
 * }));
 * icon.dataSource = dataSource;
 * // 为icon添加碰撞检测
 * engine.rendering.collision.add(icon, {margin: [10, 10]} 'poi');
 * ```
 */
export class RenderingCollision {
    constructor(rendering: any);
    /**
     * @private
     * 每组的object对象
     */
    private _groupObjectMap;
    /**
     * @private
     * 每组的全体对象按rank排序数据
     */
    private _groupDataMap;
    /**
     * @private
     * 每个分组的额外信息
     * 包含bucket排序函数bucketSort
     * 是否开启bucket缓存的enabledBucketCache
     * 以及是否需要裁剪的requireClip
     */
    private _groupOptions;
    /**
     * @private
     * 每帧碰撞后更新，存的是每个对象对应的碰撞后的数据
     */
    private _objectDataMap;
    /**
     * @private
     * 重新排序数据的flag
     */
    private _needsUpdate;
    /**
     * @private
     * 参与计算碰撞的整体数据量，限制之后以提高一些性能
     */
    private _restrictCount;
    /** @private */
    private _cacheBucketKeys;
    /**
     * @internal
     * 上次计算碰撞更新的时间
     */
    _lastUpdateTime: number;
    /**
     * @internal
     * 碰撞节流的延时时间
     */
    _delayUpdateTime: number;
    /**
     * @internal
     * 节流定时器句柄
     */
    _delayUpdateTimeHandler: null;
    /** @private */ private _margin;
    /** @private */ private _maxRenderDepth;
    /** @private */ private _lastZoom;
    /** @private */ private _viewMatrixWorld;
    /** @private */ private _projectionMatrix;
    /** @private */ private _viewChanged;
    _rendering: any;
    /**
     * 添加一个对象到碰撞检测系统
     * @param {GeoObject} object 需要进行碰撞检测的对象
     * @param {Object} [options={}] 碰撞检测选项
     * @param {Array<number>|number} [options.margin] 碰撞边距
     * @param {string} [group='_default'] 碰撞检测分组
     * @example
     * ```javascript
     * // 添加一个标签到指定分组，并设置碰撞边距
     * engine.rendering.collision.add(labelObject, {
     *     margin: [2, 2]
     * }, 'poi-labels');
     * ```
     */
    add(object: GeoObject, options?: {
        margin?: number | number[] | undefined;
    }, group?: string): void;
    setGroupOption(groupName: any, groupOptions: any): void;
    /**
     * 从碰撞检测系统中移除一个对象
     * @param {GeoObject} object 要移除的对象
     * @param {string} [group='_default'] 对象所在的分组
     * @example
     * ```javascript
     * // 从默认分组移除对象
     * engine.rendering.collision.remove(labelObject);
     *
     * // 从指定分组移除对象
     * engine.rendering.collision.remove(labelObject, 'poi-labels');
     * ```
    */
    remove(object: GeoObject, group?: string): void;
    sortBucket(bucket: any): void;
    sortBuckets(buckets: any, groupKey: any): any[];
    /**
     * @internal
     */
    sortData(): void;
    /**
     * @internal
     * 每帧执行全局碰撞
     */
    update(renderState: any): void;
    _calculatePixelSize(camera: any, position: any): number;
    /**
     * @internal
     */
    _collisionTest(): false | undefined;
    /**
     * 碰撞方块的外边距，主要影响碰撞体积
     * @param {Array<number> | number} value x轴与y轴的边距
     */
    set margin(value: Array<number> | number);
    /**
     * 获取碰撞方块外边距
     * @returns {Array<number>} 碰撞方块外边距
     */
    get margin(): Array<number>;
    /**
     * 最大渲染深度, 超过此深度的元素将不参与碰撞检测, 范围[0, 1], 默认1, 即不限制
     * @default 1
     * @param {number} value 最大渲染深度
     */
    set maxRenderDepth(value: number);
    /**
     * 参与碰撞检测计算的最大数据量，用于性能优化
     * @type {number}
     * @default 10000
     * @example
    * ```javascript
    * // 限制参与碰撞检测的数据量
    * engine.rendering.collision.restrictCount = 5000;
    * ```
    */
    set restrictCount(value: number);
    /**
     * 获取参与碰撞检测计算的最大数据量
     * @returns {number} 参与碰撞检测计算的最大数据量
     */
    get restrictCount(): number;
    /**
     * 设置是否需要更新碰撞检测
     * @param {boolean} value 是否需要更新碰撞检测
     */
    set needsUpdate(value: boolean);
    /**
     * 获取是否需要更新碰撞检测
     * @returns {boolean} 是否需要更新碰撞检测
     */
    get needsUpdate(): boolean;
}
import { GeoObject } from '../../../threejs/objects/GeoObject';
