export class VolumetricCloudsPass {
    constructor(parameters?: {});
    /** @private */
    private _coverage;
    /** @private */
    private _density;
    /** @private */
    private _speed;
    /** @private */
    private _shapeBaseScale;
    /** @private */
    private _shapeDetailScale;
    /** @private */
    private _sunColor;
    /** @private */
    private _sunDirection;
    /** @private */
    private _ambientColorBottom;
    /** @private */
    private _useVolumetric;
    _fsQuad: any;
    _shapeRenderTarget: any;
    _shapeMaterial: any;
    _detailRenderTarget: any;
    _detailMaterial: any;
    _mainMaterial: any;
    _previousRenderTarget: any;
    _copyMaterial: any;
    _compostionMaterial: any;
    needsDepthTexture: boolean;
    render(renderer: any, writeBuffer: any, readBuffer: any, deltaTime: any, maskActive: any): void;
    _hasRenderShapeTexture: boolean | undefined;
    _stableFrames: number | undefined;
    getCurrentUsedTextures(): any[];
    _resetStableState(): void;
    set coverage(value: number);
    get coverage(): number;
    set density(value: number);
    get density(): number;
    set speed(value: number);
    get speed(): number;
    set sunColor(value: any);
    get sunColor(): any;
    set sunDirection(value: any);
    get sunDirection(): any;
    set ambientColorBottom(value: any);
    get ambientColorBottom(): any;
    set shapeBaseScale(value: number);
    get shapeBaseScale(): number;
    set shapeDetailScale(value: number);
    get shapeDetailScale(): number;
    set useVolumetric(value: boolean);
    get useVolumetric(): boolean;
    set marchSteps(value: any);
    get marchSteps(): any;
    set selfShadowSteps(value: any);
    get selfShadowSteps(): any;
}
