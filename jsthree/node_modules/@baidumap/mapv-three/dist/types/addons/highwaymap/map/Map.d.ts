export class Map {
    static EARTH_RADIUS: number;
    constructor(engine: any, map: any, options?: {});
    isHighwayMap: boolean;
    MERCATOR_LENGTH: number;
    projectionName: string;
    origin: number[];
    center: number[];
    zoom: number;
    pitch: number;
    heading: number;
    bounds: number[][];
    _engine: any;
    domContainer: any;
    afterInit(): void;
    initControl(): void;
    control: MapControl | undefined;
    bindCanvas(): void;
    releaseCanvas(): void;
    getContainerSize(): any[];
    getResolution(): any;
    getCenter(): any;
    getZoom(): number;
    getPitch(): number;
    getZoomUnitsByZoom(zoom: any): number;
    getZoomByZoomUnits(zoomUnits: any): number;
    getZoomUnits(): number;
    getHeading(): number;
    enableControl(): void;
    disableControl(): void;
    handleViewChange: () => void;
    handleMapResize: () => void;
    handleEventClick: (e: any) => void;
    handleEventDblClick: (e: any) => void;
    handleEventPointerDown: (e: any) => void;
    handleEventPointerUp: (e: any) => void;
    handleEventMouseMove: (e: any) => void;
    _getPixelFromEvent: (e: any) => number[];
    setCameraMatrix(): void;
    updateCamera(): void;
    computeMapCameraMatrix(camera: any, center: any, zoom: any, pitch: any, heading: any): void;
    zoomUnits: number | undefined;
    cameraDistance: number | undefined;
    setCenter(center: any): void;
    setProjectionCenter(projectionCenter: any): void;
    setZoom(zoom: any): void;
    zoomIn(): void;
    zoomOut(): void;
    setHeading(heading: any): void;
    setPitch(pitch: any): void;
    lookAt(target: any, offset?: {}): void;
    setBounds(bounds: any): void;
    getBounds(): any;
    updateView(): void;
    getCameraDistance(): number | undefined;
    getProjectionCenter(): number[];
    dispose(): void;
}
import { MapControl } from './MapControl';
