export class Viewer {
    /**
     * 构造函数
     * @param {{
     * trafficLayer?: boolean,
     * host?: string,
     * data?: object
     * }} options 传入参数对象
     * @param {boolean} options.trafficLayer 是否显示路况，默认不显示
     * @param {string} options.host 设置svg动态接口数据的host，与data二选一
     * @param {string} options.data 设置svg静态数据，与host二选一
     */
    constructor(options?: {
        trafficLayer?: boolean;
        host?: string;
        data?: object;
    });
    /** @private */ private camera;
    /** @private */ private defaultIcon;
    /** @private */ private defaultIconGeo;
    /** @private */ private defaultIconSrcs;
    /** @private */ private textArrGeo;
    /** @private */ private lineArrGeo;
    /** @private */ private lukuangGeo;
    /** @private */ private defaultLines;
    /** @private */ private lukuangLines;
    /** @private */ private linesLukuang;
    /** @private */ private renderer;
    /** @private */ private scene;
    /** @private */ private selectIcon;
    /** @private */ private zoom;
    trafficLayer: boolean | undefined;
    host: string;
    subUrl: any;
    data: object | undefined;
    /** @private */
    private afterAddToEngine;
    engine: any;
    /** @private */
    private beforeRemoveFromEngine;
    /**
     * @ignore
     */
    initLights(): void;
    /** @private */
    private dispose;
    /**
     * 初始化图标对象
     * @ignore
     * @param options 图标设置选项
     * @param {number} options.width icon宽度
     * @param {number} options.height icon高度
     * @param {boolean} options.keepSize 是否保持大小（即按像素为单位绘制）
     * @param {boolean} options.transparent 图标是否透明，默认true
     * @param {boolean} options.vertexSizes 是否通过数据携带尺寸配置
     * @param {boolean} options.vertexIcons 是否通过数据携带图标src配置
     * @param {string} options.mapSrc 图标src引用路径
     * @param {array} options.offset 图标偏移两 [x, y]
     * @returns 返回添加的图标对象
     */
    _initIcon(options: any): any;
    /**
     * 处理svg数据
     * @ignore
     */
    _getSvgDom(data: any): void;
    /**
     * 根据svg数据设置道路颜色
     * @ignore
     */
    _getLineColor(arr: any): "rgba(13, 31, 249, 0)" | "#4fd27d" | "#e80e0e" | "#ffd045" | undefined;
    /**
     * 初始化svg简图
     * @param {{
     * roadColor?: string,
     * }} options 初始化所需配置文件
     * @param {string} options.roadColor 道路颜色
     * @param {object} params 可选参数
     */
    initSvg(options: {
        roadColor?: string;
    }, params: object): Promise<any>;
    /**
     * 获取坐标点，包括像素坐标和百度经纬度坐标
     * @param {{location: string, type: number}} options
     * @param {string} location 如：经纬度坐标'116.397428, 39.90923'或像素坐标：'20823.17191, 11755.66599'
     * @param {number} type 1：百度经纬度坐标，2：像素坐标
     */
    getPointInfo(options: {
        location: string;
        type: number;
    }): Promise<any>;
    /**
     * 自定义弹框
     * @ignore
     */
    _domPointCallback(feature: any): HTMLDivElement;
    /**
     * 设置svg图层元素
     * @ignore
     */
    _getMapLayer(data: any, baseConfig: any): Promise<any>;
    /**
     * 生成linelayer的geojson
     * @ignore
     */
    _getLineJsonData(data: any, type: any): any[];
    /**
     * 生成icon的geojson
     * @ignore
     */
    _getIconJsons(iconArrs: any): any;
    /**
     * 生成textlayer的geojson
     * @ignore
     */
    _getTextJsons(textArrs: any): any;
    /**
     * 获取textlayer的字体颜色
     * @ignore
     */
    _getTextColor(className: any): "red" | "#333";
    /**
     * 切换路况图层显示隐藏状态
     * @param {boolean} flag 是否打开路况图层
     */
    toggleTrafficLayer(flag: boolean): void;
    /**
     * 新增自定义弹框
     * @param {point: Array<number>, dom: object} options 图标详情框
     * @param {Array<number>} options.point 定位坐标
     * @param {object} options.dom 弹窗dom节点
     */
    setDOMOverlay(options: any): any;
    /**
     * 新增图标
     * @param {object || array} iconData geojson数据
     * @param infoWindow 图标详情框
     * @param {function} infoWindow.callback 编写详情框内容的函数，返回node节点
     * @param {array} infoWindow.offset 图标偏移两 [x, y]
     * @param {boolean} infoWindow.keepSize 是否保持大小（即按像素为单位绘制）
     */
    setMaker(iconData: any, infoWindow: any): any;
    /**
     * 初始化线对象
     *
     * @param options 线设置选项
     * @param {number} options.lineWidth 线宽
     * @param {boolean} options.vertexColors 是否通过数据携带线的颜色配置
     * @param {string} options.lineJoin 线拐角形状
     * @param {string} options.lineCap 端头角形状
     * @param {string} options.color 线颜色
     * @returns 返回添加的线对象
     */
    setFatLine(options: any): any;
    /**
     * 更新engin
     */
    requestRender(): void;
    /**
     * @ignore
     */
    render(): void;
}
