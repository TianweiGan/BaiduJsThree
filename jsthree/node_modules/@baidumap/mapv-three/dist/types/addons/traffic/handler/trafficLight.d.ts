/**
 * 红绿灯图层
 * ```
 * import {trafficAddon} from '@baidu/mapv-three/addons';
 * const trafficLightLayer = engine.add(new trafficAddon.TrafficLightsLayer({
 *      // serviceConfig: {
 *      //     signalPath: 'wss://ip:port/v2x/platform/ws/lampsselect',
 *      //     lampsPath: 'https://ip:port/v2x/platform/lamp/crossinfo/gis',
 *      // },
 *      // autoConnect: true,
 *      // sideMap: {},
 *      // key: 'crossid',
 *      // deviceMap: {}
 *      // defaultMessage: [roadId],
 *  });
 * // 单独控制某个灯时使用
 * trafficLightLayer.updateTrafficLightMaterial([10, 3017, 200002], uuid)
 * ```
 */
export class TrafficLightsLayer {
    /**
     * @private
     * 更新交通灯材质
     * @param {*} lightList
     * @param {*} name
     * @param {*} mapKey
     */
    private static _updateTrafficLightMaterial;
    /**
     * 交通信号灯层构造函数
     *
     * @param arg 参数对象，可选
     * @param arg.renderOptions 渲染选项 可选
     * @param arg.autoConnect 是否自动连接，可选
     * @param arg.defaultMessage 默认消息，可选
     * @param arg.sideMap 路口映射，可选
     * @param arg.serviceConfig 红绿灯服务配置，可选
     * @param arg.delay 红绿灯渲染延迟，可选
     * @param arg.key 静态红绿灯信息获取时的键，可选
     * @param arg.staticLightDataHandle 静态灯数据处理程序，可选
     * @param arg.deviceMap 设备映射，可选（红绿灯状态上设备时需添加）
     * @returns 无返回值
     */
    constructor(arg?: {});
    /**
     * @private
     * 已链接红绿灯动态数据的路口Id
     */
    private hasSignalRoadIds;
    /**
     * 是否默认开启自动连接信号灯服务
     * @private
     * @default true
     */
    private autoConnect;
    /**
     * 是否跟随缩放等级自动隐藏
     * @private
     */
    private _autoHide;
    /**
     * 开启autoHide后小于这个层级会自动隐藏
     * @private
     */
    private _maxShowLevel;
    /**
     * 红绿灯显示状态
     * @private
     */
    private _showTrafficLight;
    /** @private */ private lampsMapBuffer;
    /** @private */ private lampsMap;
    /** @private */ private lampsResetMap;
    /** @private */ private trafficLightZ;
    /** @private */ private shineTimeoutMap;
    /** @private */ private defaultMessage;
    /** @private */ private engine;
    /** @private */ private delay;
    /** @private */ private fetchLightKey;
    /** @private */ private serviceConfig;
    /** @private */ private sideMap;
    /** @private */ private staticLightDataHandle;
    /** @private */ private trafficLabelList;
    /** @private */ private websocketMap;
    /**
     * 已渲染红绿灯的路口Id
     */
    hasLamps: any[];
    name: string;
    replayStatus: boolean;
    deviceMap: any;
    handleConnectParams: any;
    _lastMessageStr: string;
    /** @private */
    private afterAddToEngine;
    /** @private */
    private onBeforeScenePrepareRender;
    /**
     * 渲染默认红绿灯标识牌
     * LampStaticInfo {
           lampIds: Array<{
               lampId: string;
               phaseId: number;
           }>;
           poleLat: number;
           poleLon: number;
           roadDirection: number;
       }
     * @param {LampStaticInfo[]} lamps 红绿灯静态信息
     * @param {Object} params 红绿灯渲染配置
     * @param {number} params.z 红绿灯高度
     * @param {number} params.scaleNum 红绿灯渲染放大倍数 默认15
     * @param {number} roadId 红绿灯路口唯一ID
     * @returns
     */
    setDefaultLightGroup(lamps: LampStaticInfo[], params: {
        z: number;
        scaleNum: number;
    } | undefined, roadId: number): void;
    /**
     * 渲染动态红绿灯数据
     * LampInfo {
           countDown: number;
           lampId: string;
           lampStatus: string;
           nextCountDown: number;
           nextLampStatus: string;
           phaseId: string;
           roadDirection: string;
           roadFlowDirection: string;
       }
     * LampGroupInfo {
           crossId: string;
           lampRealInfos: Array<LampInfo>;
           signalMachineStamp: number;
       }
     * @param {LampGroupInfo} signalInfo
     * @param {*} option
     * @returns
     */
    renderLamps(signalInfo: LampGroupInfo, option?: any): false | undefined;
    /**
     * 更新交通灯材质
     * @param {*} lightList
     * 每个灯头 遵循如下规则
       纯色灯态 XX (XX为灯态 10、20、30、40分别代表红黄绿灰)
       数字灯态 XXYY (YY为数字)
       箭头灯态 XX00ZZ (ZZ为箭头类型)

       箭头类型ZZ 枚举如下
       掉头 01
       左转 02
       左转待行 03
       直行 04
       直行待行 05
       右转 06
       掉头待行 07
       禁行 11
       可通行 12

       例子:
       四个灯头 第三个为红色圆灯 其他灰色 [40, 40, 10, 40]
       四个灯头 第一个为左转红色 第三个为红色圆灯 其他灰色 [100002, 40, 10, 40]
     * @param {*} name 设备的uuid或name
     */
    updateTrafficLightMaterial(lightList: any, name: any, mapKey?: string): void;
    /**
     * 重置一个路口的红绿灯
     * @param crossId
     */
    resetTrafficLightGroup(crossId: any): void;
    /** @private */
    private sendMixParams;
    /** @private */
    private addEvent;
    /** @private */
    private connectSignalWs;
    /** @private */
    private connectSignal;
    /** @private */
    private connectLampReplay;
    /**
     * @private
     * 处理信号灯数据
     * @param data 信号灯数据的字符串（JSON.stringify后)
     * @param option 信号灯配置
     * @returns 处理后信号灯数数据 转化为数组后可供updateTrafficLightGroup使用
     */
    private formatLampsData;
    /**
     * @private
     * 获取红绿灯静态数据并渲染
     * @param roadId
     * @param params
     * @returns
     */
    private fetchLights;
    /**
     * 根据设备ID和灯信息渲染交通灯模型
     * @param {string} deviceId 设备ID
     * @param {object} lightInfo 灯信息
     * @param {string} lightInfo.color 灯顔色
     * @param {string} lightInfo.signalLightDirection 灯方向
     * @param {number} lightInfo.number 灯倒计时数字
     */
    renderTrafficLightModel(deviceId: string, lightInfo: {
        color: string;
        signalLightDirection: string;
        number: number;
    }): void;
    /**
     * @private
     * 更新一个路口的红绿灯
     * @param trafficLights 红绿灯数据
     * @param crossId 路口id
     * @returns
     */
    private updateTrafficLightGroup;
    /**
     * @private
     * 释放单红绿灯
     * @param crossId
     * @returns
     */
    private removeLightsGroup;
    /**
     * 更新红绿灯样式
     * @param params 配置
     * @param backStyle 背景样式
     * @param numStyle 数字样式
     * @param iconStyle 标签样式
     */
    updateLampStyle(params: any, backStyle: any, numStyle: any, iconStyle: any): void;
    /**
     * 灯闪烁
     * @param params
     */
    shineLamp(params: any): void;
    /**
     * 展示感应式控制信息
     * @param info 控制信息
     * @param color 颜色
     * @param option 配置
     */
    showLampControlInfo(info: any, color: string | undefined, option: any): void;
    dispose(): void;
    /**
     * @private
     */
    private updateLightVisible;
    set visible(visible: boolean);
    get visible(): boolean;
}
