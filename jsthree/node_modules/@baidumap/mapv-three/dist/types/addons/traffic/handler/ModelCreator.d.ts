/**
 * 模型创建器，负责创建模型
 */
export class ModelCreator {
    constructor({ engine, setModelMaterialMap, bindClick }: {
        engine: any;
        setModelMaterialMap?: {} | undefined;
        bindClick: any;
    });
    _modelIdMap: Map<any, any>;
    _engine: any;
    _setModelMaterialMap: {};
    _bindClick: any;
    _projection: any;
    /**
     * 更新_modelIdMap，genMeshParams和addMesh方法依赖_modelIdMap数据。initModels会自动调用该方法
     * @param modelList
     */
    updateModelIdMap(modelList: any): void;
    genMeshParams(deviceConfig?: {}, extraConfig?: {}): {
        classType: any;
        composed: boolean;
        rawX: any;
        rawY: any;
        rawZ: any;
        setX: number;
        setY: number;
        extranetUrl: any;
        imageUrl: any;
        mainClass: any;
        subClass: any;
        tags: any;
        children: any;
        boundingBox: any;
        hasBoundingBox: boolean;
        genMeshParamsboundingBox: any;
        delta: any;
        coordinates: any;
        modelId: any;
        type: any;
        subtype: any;
        subtype2: any;
        mcScale: any;
        images: string;
        material: any[];
        isVisible: boolean;
    } | null;
    addMesh(params: {} | undefined, loadCallback: null | undefined, errorCallBack: any): Group | DynamicModel | Model;
    genMesh(params: {} | undefined, mainDeviceInfo: any): DynamicModel | Model;
    /**
     * 更新设备包围盒
     * @param temp
     * @private
     */
    private _updateBoundingBox;
    /**
     * 更新设备占用的tile块信息
     * @param rawX
     * @param rawY
     * @param boundingBox
     * @param l
     * @returns {string}
     * @private
     */
    private _genTileNumber;
    _getMercatorScaleFactor(coordinates: any): number;
}
import { TrafficGroup as Group } from '../objects/TrafficGroup';
import { DynamicModel } from '../objects/DynamicModel';
import { Model } from '../objects/Model';
