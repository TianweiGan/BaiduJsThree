/**
 * 模型加载器，加载模型，渲染不同效果
 */
export class ModelHandler {
    constructor(engine: any, { models, assetsInfo, modelInfoScrollMap, modelInfoMap, tileDeviceMap, setModelMaterialMap, modelExtraConfig, layerHideMap, setDeviceHidenList, bindClick, dispatchEvent, transformControl, }: {
        models?: never[] | undefined;
        assetsInfo?: {} | undefined;
        modelInfoScrollMap?: {} | undefined;
        modelInfoMap?: {} | undefined;
        tileDeviceMap?: {} | undefined;
        setModelMaterialMap?: {} | undefined;
        modelExtraConfig?: {} | undefined;
        layerHideMap?: {} | undefined;
        setDeviceHidenList?: never[] | undefined;
        bindClick?: null | undefined;
        dispatchEvent?: null | undefined;
        transformControl?: null | undefined;
    }, instance?: any);
    _engine: any;
    _models: any[];
    _assetsInfo: {};
    _modelInfoScrollMap: {};
    _modelInfoMap: {};
    _tileDeviceMap: {};
    _editor: ModelCreator;
    _layerHideMap: {};
    _allAllModelVisible: boolean;
    _setDeviceHidenList: any[];
    _dispatchEvent: any;
    transformControl: any;
    _controlMode: string;
    selectionBox: any;
    selectedModel: any;
    _historyRecord: {};
    flyManager: any;
    colorConfig: {};
    _isEditMode: boolean;
    _pendingLightUuid: any;
    _assetsScene: any;
    _modelExtraConfig: {};
    /**
     * @private
     * @param {*} point
     * @param {*} config
     * @param {*} option
     * @returns
     */
    private createModel;
    initModels(config?: {}, needAddScene?: boolean, showClickControl?: boolean): Promise<any[] | undefined>;
    /**
     * 增加一个新模型
     * @param config Model配置参数
     */
    addNewModel(config: any): Promise<any>;
    /**
     * 是出现控制轴
     * @param isEditMode true；展示控制轴心
     */
    switchEditMode(isEditMode: any): void;
    /**
     * 设置控制轴的模式，'scale', 'rotate', 'translate'其中一个
     * @param mode
     */
    setControlMode(mode: any): void;
    /**
     * 当某个设备需要修改模型的时候调用这个方法
     * @param config Model配置项目
     */
    changeModel(config: any): Promise<any>;
    /**
     * 设置当前选中的设备
     * 1.如果配置项属于组合模型的子设备，则会高亮展示，不展示控制轴
     * 2.如果配置项所对应的模型已经在地图上出现，则把地图视野定位到这个模型所在位置，并设置为选中态
     * 3.如果这个配置没有在地图那么会先把地图视野切换到这个位置，等这个模型加载完成后设置为选中态
     * @param config
     * @param subDeviceInfo
     */
    switchDevice(config: any, subDeviceInfo: any): void;
    /**
     * 从地图中移除这个模型
     * @param config 目前只需要uuid这个属性
     */
    removeModel(config: any): void;
    setVisible(config: any, visible: any): void;
    /**
     * 给某个子设备设置贴图
     * @param uuid
     * @param point 挂接点
     * @param url
     */
    setMaterialMap(config?: {}): void;
    /**
     * @private
     * 如果没有该classType的InstanceMesh则新建，否则则更新
     * @param meshConfigList
     * @param needAddScene
     * @param extraCount
     * @returns {Promise<Array>}
     */
    private getInstancedModel;
    /** @private */
    private genInstancedModel;
    setAllVisible(visible: any): void;
    _genModelInfo(deviceInfo: any, modelConfig: any): any;
    drawMaterial(model: any, style: any, content: any, materialCanvas: any, blur?: number): Promise<void>;
    /**
     * 把该模型颜色重恢复成高亮前的颜色，隐藏该模型的包围框
     * @param selectedModel Mesh
     */
    resetColor(selectedModel: any): void;
    /**
     * 把这个模型增加包围框展示，如果可以改变颜色的话，也把颜色改变
     * @param selectedModel Mesh
     * @param highlight 是否把该模型颜色设置为高亮颜色，true：设置高亮颜色
     */
    switchLightColor(selectedModel: any, highlight?: boolean): void;
    flyTo(position: any): void;
    free(): void;
    _addModel(config: any, showLoadControl: any, showClickControl?: boolean): Promise<any>;
    _objectChangeListener(): void;
    _pointDownListener(): void;
    _pointUpListener(): void;
    _initTools(): void;
    _transformListener: {
        objectChange: () => void;
        pointerdown: () => void;
        pointerup: () => void;
    } | undefined;
    _showBox(selectedModel: any): void;
}
import { ModelCreator } from './ModelCreator';
